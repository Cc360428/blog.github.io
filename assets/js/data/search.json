[
  
  {
    "title": "DataStructure（02142）",
    "url": "/blog.github.io/posts/DataStructure/",
    "categories": "ComputerBasics",
    "tags": "DataStructure, SelfStudy",
    "date": "2022-03-31 21:19:55 +0800",
    





    "snippet": "数据结构导论（02142）第一章 概论（重点）1 引言  数据结构：是计算机组织数据和存储数据的方式  计算机解决问题步骤          建立数学模型      设计算法      编程实现算法        程序=数据结构+算法  通常操作：查找、读取、插入、删除、更新  合理的数据结构有什么用          可降低程序设计的复杂性      提高程序的执行效率      2 基本概念和术语  数据：所有被计算机存储、处理的的对象  数据元素：是数据这个集合的一个个体积数据的基本单位  数据项：数据元素常常分为若干个数据项，是数据的具有意义的最小单位          数据-&gt;数据元素-&gt;数据项        逻辑结构：元素之间的结构关系（集合、线性、树形、图结构）          线性结构：除第一个和最后一个数据元素外，每个数据元素只有一个前驱和一个后继数据元素      树结构：除根结点外，每个数据元素只有一个前驱数据元素，可有0个或若干个后继数据元素。      图结构：每个数据元素可有0个或若干个前驱数据元素和0个或若干个后继数据元素。      集合结构：数据元素同“属于一个集合”之间没有任何联系。        物理结构：存储结构（顺序、链式、索引、散列），数据在计算机内的表示称为数据的存储结构          存储结点      数据元素之间关联方式的表示      分类                  顺序存储结构：借助数据元素的相对存储位置来表示数据的逻辑结构；                          线性表的顺序存储方法：将表中的结点一次存放在计算机内存中一组连续的存储单元中。                                链式存储结构：借助数据元素地址的指针表示数据的逻辑结构。          索引存储结构：借助索引表中的索引指示各存储节点的存储位置。          散列存储结构：用散列函数指示各节点的存储位置。                      运算：在逻辑结构上施加的操作，逻辑结构加工  加工型运算：操作改变原逻辑结构的值  引用型运算：不改变原有逻辑结构的值（查找、读取、插入、删除、更新）    算法及描述    算法 规定了求解给定类型问题，所需的所有 处理步骤 及 执行顺序 是给定类型问题能在有限时间内被机械的求解  算法特性（对特定问题求解步骤的描述，他是指令的有穷序列）          有穷性：在执行有穷步后结束      确定性：每一步必须明确地定义      可行性：每一步都可以同步已经实现的操作完成      输入：可以零个或多个输入      输出：一个或多个输出（特定关系的量）      4 算法分析  算法设计满足          正确性：对于合法输入产生符合要求的输出      可读性：易读、添加注释      健壮性：非法输入是，能够作出反应而不会崩溃      效率高切内存消耗小：运行时间短，储存制算法执行过程中所需的最大内存空间        算法时空性:时间复杂度、空间复杂度；目的提高算法的效率  考虑两个度量分析          时间复杂度：运行时需要的总步数，通常时问题规模的函数（大O表示）                  常数O(1)＜ 对数阶O(log2n) ＜ 线性阶O(n) ＜ 线性对数阶O(nlog2n) ＜ 平方阶O(n^2) ＜ 多项式阶O(n^C) ＜ 指数阶O(C^n)          时间复杂度分析基本策略：从内向外分析，从最深层开始分析          看有几层循环，一层循环是O(n)或者O(log2n)；两层循环是O(n^2) ；三层循环是O(n^3) （一般规律如此，具体问题具体分析）                    空间复杂度：执行时所占用的储存空间，通常时问题规模的函数,运行过程中临时占用存储空间大小的度量                  程序代码所占用的空间          输入数据所占用的空间          辅助变量所占用的空间（估算时间复杂度，一般值分析辅助变量所占用的空间)                    5 小结第二章 线性表（重点）1 线性表的基本概念  线性表是有n(n&gt;=0)个数据元素（结点）组成的有限序列          n定义长度，n=0称为空表      非空（n&gt;0）      数据元素（1&lt;=i&lt;=n）      1:1的关系        非空的线性表          有且仅有一个起始结点a1 ,没有直接前驱，有且仅有一个直接后继a2；      有且仅有一个终端结点an，没有直接后继，有且仅有一个直接前驱an−1；      其余的内部结点ai（2≤i≤n-1）都有且仅有一个直接前驱ai−1和一个直接后继ai+1        线性表的基本运算：初始化、求表长度、取表元、定位、插入、删除（区分引用和加工型操作）2 线性表的顺序存储  定义：顺序表是线性表的顺序存储结构，一段连续内存存放的线性表  特点          顺序表是用一维数组实现线性表，数组下标是元素相对地址      逻辑上相邻元素，在存储物理位置也是相邻的单元中      线性表的逻辑结构与存储结构一致      可以对数据元素实现随机读取        存储地址计算          每个结点类型相同、占用存储空间大小相同      例如结点占用L个存储单元，其中第一个单元存储地址则是该结点的存储地址      设表开始结点a1的存储地址d，结点ai的存储地址为LOC(ai)  公式：LOC(ai) = d+(i−1)*L （必考）        顺序表插入运算          当表空间已满，不可在插入操作      插入位置非法，不可正常插入操作      插入新的结点x，插入位置i=n+1时，才无需移动结点，直接将x插入表的末尾      长度变为 n+1      需要移动 n-i+1      元素平均移动次数 n/2 时间复杂度O(n)          void InsertSeqList( Seqlist *L DataType x int i )  {  \tint j;  \tif ( i &lt; 1 || i &gt; L.length + 1 )  \t\texit( “ 位置 错 误 ” );  \tif ( L.length == MaxSize )  \t\texit (“ 溢出 \");     for( j=L.length-1; j&gt;=i; j--)            L.data[ j ] = L.data[j-1 ];        //依次后移   L.data[ i-1] = x;       L.length++;  }                      删除操作运算          只需要删除终端结点，无需移动结点      长度-1      需要移动n-i+1      元素平均移动次数 n-1/2 时间复杂度O(n)  ```c  void DeleteSeqList( SeqList *L, int i )  {  \tint j;  \t  if ( i &lt; 1 || i &gt; L.length )  \t\tError( “ 位置 错 误 ” );  \tfor ( j = i; j &lt; L.length; j++ )  \t\tL.data[j - 1] = L.data[j];      \tL.length–;    }  ```    优点          无需表示该的单元的逻辑关系增加额外存储空间      方便的随机取表任意结点        缺点          插入删除运算不方便，必须移动大大量的结点      顺序表要求占用连续的存储空间，需要预先分配内存，表长变化较大是，难以确定合适储存规模      3 线性表的链接存储  线性表的链式存储值存储结构是链式的，常见的有（单链表、循环链表、双向链表）  存储表示          用一组内衣的存储单元存放      链表中结点的逻辑次序和物理次序不一定相同，必须存储指示后续结点地址信息      date 数据域      next 存放即诶单直接后继的地址（位置）的指针域（链域）      NULL 空指针（^）      head 头指针变量，存放链表中第一个结点地址                                    单链表：(Head          exit)-&gt;(k          ^)                            插入运算（ai-1~ai）                  找到ai-1（p） 存储x          生成x          p 指针域指向x，然后插入x          x 结点指针域指向ai              void InsertLinkList( LinkList head, Data x, int i )     /* 在表中head的第i个数据元素结点之前插入一个以X为值的新结点。 */  {  \tNode *p, *q;  \tif ( i == 1 )  \t\tq = head;  \telse q = GetLinkList( head, i - 1 );            /* 找第i-1个数据元素结点 */  \tif ( q == NULL )                                /* 第i-1个结点不存在 */  \t\texit( “ 找到 插入位置 ” );  \telse{ p\t\t= malloc( sizeof(Node) );       /* 生成新结点 */  \t      p-&gt;data\t= x;                            /* 生成新结点指向X */  \t      p-&gt;next\t= q-&gt;next;                      /* 新结点链域指向*q的后继结点 */  1  \t      q-&gt;next\t= p;                            /* 修改*q的链域 */              2  \t}  }  // 特别要注意：上面1和2二行代码不可颠倒顺序，否则*q链先断了会找不到。                                          删除运算                  找到i-1结点，存在继续，否则结束          删除i结点，释放对应的内存              void DeleteLinkList( LinkList head, int i )  {  \tNode *q;  \tif ( i == 1 )  \t\tp = head;  \telse p = GetLinkList( head, i - 1 );    /* 先找待删结点的直接前驱 */  \tif ( p ！ = NULL &amp;&amp; p-&gt;next != NULL )  \t{  \t\tq\t= p-&gt;next;              /* P指向待删结点 */  \t\tp-&gt;next = q-&gt;next;              /* 移出待删结点 */  \t\tfree( q );                      /* 释放已移出结点P的空间 */  \t}  else printf( ” error ” );  }                        4、5 其它运算在单链表的实现、其他链表                                单向循环链表：如果第一个结点指针域指向第一个结点构成循环，任意结点出发都能够扫描整个链表          普通链表的终端结点next只为NULL      循环链表终端结点next指向头结点      导致循环链表中结点只有一个指针        双向循环链表          链表中有两个指针域：一个指向后继结点、一个指向前驱结点（双向链表）                                                  (Prior              date              next)                                          头prior指向最后一个结点，最后一个结点next指向头结点      删除          q= p-&gt;next;  p-&gt;next = p-&gt;next-&gt;next;  p-&gt;next-&gt;prior = p;  free(q);                    插入          t-&gt;prior\t= p;  t-&gt;next\t\t= p-&gt;next;  p-&gt;next-&gt;prior\t= t;  p-&gt;next\t\t= t;                6 顺序实现与链式实现的比较                        时间复杂度      顺序表      链表                  读      O(1)      O(n)              找      O(n)      O(n)              插      O(n)      O(n)              删      O(n)      O(n)      存储密度 = 数据域占用存储量/整个存储结点占用存储量  顺序表          静态分配。程序执行之前必须明确规定存储规模。若线性表长度n变化较大，则存诸规模难于预先确定估计过大将造成空间浪费，估计太小又将使空间溢出机会增多。      为1。当线性表的长度变化不大，易于事先确定其大小时，为了节约存储空间，宜采用顺序表作为存储结构。      随机存取结构，对表中任一结点都可在0（1）时间内直接取得线性表的操作主要是进行查找，很少做插入和删除操作时，采用顺序表做存储结构为宜。      在顺序表中进行插入和删除，平均要移动表中近一半的结点，尤其是当每个结点的信息量较大时，移动结点的时间开销就相当可观        链表          动态分配只要内存空间尚有空闲，就不会产生溢出。因此，当线性表的长度变化较大，难以估计其存储规模时，以采用动态链表作为存储结构为好      &lt;1      顺序存取结构，链表中的结点，需从头指针起顺着链扫描才能取得。      在链表中的任问位置上进行插入和删除，都只需要修改指针。对于频繁进行插入和删除的线性表，宜采用链表做存储结构。若表的插入和删除主要发生在表的首尾两端，则采用尾指针表示的单循环链表为宜      7 小结第三章 栈、队列和数组（重点）  栈和队列何以看作特殊的线性表1 栈  定义:栈只能在表一端(表尾)进行插入和删除的线性表          允许插入删除一端(尾部)称为栈顶(top),另一端表头称为栈底(bottom)      表中没有元素称空栈        特点          进栈push;出栈pop删除      先进先出 (LIFO)      用途-常用于暂时保存待有处理的数据        顺序栈:是一组连续的存储单元一次放栈中的每个元素(初始端为栈低)          顺序实现        链式栈:链式存储,运算受限单链表,插入删除受限表头位置上进行栈顶指针就是链表的头指针2 队列(Queue)  定义: 是一种运算受限的线性表,只允许一端插入在另一端删除          允许删除的一端为队头(front),允许插入的一端为队尾(rear)        特点          先进先出(FIFO)      用途-常用于暂时保存待有处理的数据        顺序实现:顺序存储,由一个一维数组(存储元素)          循环队列                  上溢条件:sq.rear=-maxsize-1(队满)          下溢条件:sq.rear==sq.front(队列空)          假溢出:极端情况会出现上溢,为了客服假溢出引入循环队列          头尾连接          插入:rear=(sq.rear+1)%maxsize          删除:front=(sq.front+1)%maxsize          下溢-队空:CQ.front==CQ.rear          上溢-队满:(CQ.rear+1)%maxsize==CQ.front                      链接实现          使用一个带有头结点的单链表来表示队列      头结点exit域指向队列首结点,尾指针指向队列尾结点      3 数组、应用  数组可以看成一种特殊的线性表,顺序存储,每一个元素值和一个下表组成,一般具有上界下界  定义          一维内存单元连续(又称向量)      二维存储方式两种                  列序为主          主序为主(C语言)                    随机存取结构        读写:给一定下标读取和修改元素  矩阵的压缩存储          矩阵是一种常用的数据对象,来描述一个二维数组      矩阵存储下进行元素随机存储      存储密度为1      矩阵中零元素存在大量的零元素,队矩阵造成极大的浪费,为了节省空间,对矩阵进行压缩存储      压缩存储:即多个相同元素的非零只分配一个存储空间,对零元素不分配空间      特殊矩阵压缩分类                  对称矩阵          三角矩阵(上三角、下三角)                    稀疏矩阵        4 小结        第四章树和二叉树（重、难点）              非线性结构  1:N关系    1 树的基本概念    概念          定义:是n(n&gt;=0)个结点有限集      有且仅有一个特定的称为根结点      其余结点可分为m(m&gt;=0)个互相不交集的子集,其中每个子集有是一颗书,并称其为子树      递归是树的固有特性      逻辑表示                  直观表示          嵌套括号法          凹入表示法                      相关术语          结点:由一个元素及若干个指向其他结点的分支所组成      度                  结点的度:该结点子树数(分支)          树的度:树中结点的度最大值                    叶子(终端结点):度为零的结点      非终端结点:度不为零的结点      结点层次:从根开始算起,根为第一层      树的高度:所有结点层次树的最大值称该树的高度或深度      有序树:左右不能互换,有次序,最左子树的根称第一个孩子      无序树:各个结点的子树是无序的,可以互换      森林:m(&gt;=0)课树的集合      结点和边的关系:n个结点的树,共有n-1条边      2 二叉树  任何一棵树都可以与二叉树相互转换  定义          二叉树是n（n&gt;=0）个结点有限集合，或空（n=0）      每课子树都是二叉树        特点          二叉树可以是空，称空二叉树      每个结点最多是两个孩子      子树有左，右，之分次序不能颠倒        与树的比较|  | 结点 | 子树 | 结点顺序 || — | — | — | — || 树 | n&gt;=0 | 不定（有限） | 无 || 二叉树 | n&gt;=0 | &lt;=2 | 有（左、右） |  二叉树的性质          在二叉树的第i(i&gt;=1)层上至多有2i-1个结点。（i&gt;=1）；至少1个      深度为k(k&gt;=1)的二叉树至多有2k－1个结点；至少K个      对任何一棵二叉树，如果其终端结点数为n0，度为2的结点数为n2，则n0＝n2＋1。即：叶结点数n0=度为2的结点数n2+1      下图其中度为2的结点数共有5个，即ABCEF（有2个孩子的，如G就不是），叶子共有6个，即IJKLMH(没有结点，度为0的)，得出这二叉树终端结点数=度为2的结点数+1，即6=5+1          graph TB;  A((A))  B((B))  C((C))  E((E))  F((F))  G((G))  H((H))  I((I))  J((J))  K((K))  L((L))  M((M))  A--&gt;B  A--&gt;C  B--&gt;E  B--&gt;F  E--&gt;I  E--&gt;J  C--&gt;G  G--&gt;M  F--&gt;K  F--&gt;L  C--&gt;H            满二叉树:深度为k(k&gt;=1)且有2^k-1个结点的二叉树；下图满二叉树结点 2^3-1=7          graph TB;  1((1))  2((2))  3((3))  4((4))  5((5))  6((6))  7((7))  1--&gt;2  1--&gt;3  2--&gt;4  2--&gt;5  3--&gt;6  3--&gt;7            完全二叉树:深度为K的二叉树中，K-1层结点数是满的(2k-2 )，K层结点是左连续的(即结点编号是连续的)      满二叉树一定是完全二叉树，而完全二叉树不一定是满二叉树过      3 二叉树的存储结构  顺序存储          一组连续的存储单元存储      必须把二叉树所有结点安排一个恰当的序列      对二叉树进行编号，然后用一维数组存储，其中编号为i的结点存储在数组中的下标为i对的分量中–称为一编号为地址策略      树从根起，自上层至下层，每层子左至右给所有结点编号                  缺点对存储空间造成极大的浪费（深度为H且只有H个结点右单只树需要2^h-1个结点存储空间）          若经常需要插入删除树中结点是，顺序方式不是很好                      链式存储          画二叉链      4 二叉树的遍历  遍历二叉树：是按照一定规律对二叉树中每个结点访问且仅访问一次  D-根；L-左；R-右  遍历分类          先序遍历(DLR)-根左右 A-&gt;B-&gt;D-&gt;H-&gt;E-&gt;I-&gt;C-&gt;F-&gt;J-&gt;K-&gt;G          void   preorder( bitreptr r )  {  \t/*先序遍历以r为根的二叉树*/  \tif ( r == NULL )  \t\treturn;  \tprintf( r-&gt;data );         /*访问根结点*/  \tpreorder( r-&gt;lchild ) ；  \tpreorder( r-&gt;rchild );  \t/*先序遍历以r的右孩子为根的右子树*/  };                    中序遍历(LDR)-左根右 D-&gt;H-&gt;B-&gt;E-&gt;I-&gt;A-&gt;J-&gt;F-&gt;K-&gt;C-&gt;G          void   inorder( bitreptr r )  {  \t/*中序遍历以r为根的二叉树*/  \tif ( r == NULL )  \t\treturn;  \tinorder( r-&gt;lchild ) ；  \t/*中序遍历以r的左孩子为根的左子树*/  \tprintf( r-&gt;data );              /*访问根结点*/  \tinorder( r-&gt;rchild );           /*…….*/  }                    后序遍历(LRD)-左右根 H-&gt;D-&gt;I-&gt;E-&gt;B-&gt;J-&gt;K-&gt;F-&gt;G-&gt;C-&gt;A          void   postorder( bitreptr r )  {  \t/*后序遍历以r为根的二叉树*/  \tif ( r == NULL )  \t\treturn;  \tpostorder( r-&gt;lchild ) ；  \t/*后序遍历以r的左孩子为根的左子树*/  \tpostorder( r-&gt;rchild ) ；  \tprintf( r-&gt;data );       /*访问根结点*/  }                  graph TB;  A((A))  B((B))  C((C))  D((D))  E((E))  F((F))  G((G))  H((H))  I((I))  J((J))  K((K))  nil((nil))  nille((nille))  A--&gt;B  A--&gt;C  B--&gt;D  B--&gt;E  E--&gt;nille  E--&gt;I  D--&gt;nil  D--&gt;H  C--&gt;G  C--&gt;F  F--&gt;J  F--&gt;K        5 树和森林              树的存储结构                                                      孩子链表表示法：（child              next）                                                child：存放孩子结点在表头数组中的序号          exit：指向下一个孩子结点                                                                孩子兄弟链表示法（二叉链表表示）（son              data              brother）                                                son：指向第一个孩子结点          brother：指向该结点的下一个兄弟结点                    双亲表示法        树、森林、二叉树          树-&gt;二叉树                  各兄弟之间加连线          对任一结点，除最左孩子，抹掉该结点与其余孩子的各枝          以根为轴心，将连线顺指针转45度                    森林-&gt;二叉树                  将每棵树转换成相应的二叉树          将（1）中得到的各颗二叉树的根结点看做是兄弟链接起来                    二叉树-&gt;一般树                  从根结点起          该结点左孩子和左孩子右枝上的结点一次作为该结点孩子          重复（1）                      树和森的遍历          树                  先序遍历：先序先访问根结点，然后一次先序遍历根的每A-&gt;B-&gt;C-&gt;D-&gt;E          后序遍历：先依次后续遍历每棵子树，最后访问根结点B-&gt;D-&gt;C-&gt;E-&gt;A          层次遍历：遍历每个兄弟结点A-&gt;B-&gt;C-&gt;E-&gt;D              graph TB;  A((A))  B((B))  C((C))  D((D))  E((E))  A--&gt;B  A--&gt;C  A--&gt;E  C--&gt;D                              森林的遍历                  先序：访问森林中每棵树的根结点；先序遍历森林中第一棵树的根结点的子树组成的森林；先序遍历除去第一棵树之外其余的树组成的森林。          中序：中序访问森林中第一棵树的根结点的子树组成的森林；访问第一棵树的根结点；中序遍历除去第一棵树之外其余的树组成的森林；                    6 判定树和哈夫曼树  解题思路：先求哈夫曼树，再求哈夫曼编码          求哈夫曼树的口诀                  构造森林全是根          选用两小造新树          删除两小添新人          重复，2，3剩单根            7 小结            第五章 图（重点）                          邻接矩阵 、邻接表存储结构；深度优先和广度优先；求最小生成树的prim算法                                          1 图的基本概念  图的定义          图G：是有集合V合成E组成，记成G=(V,E)                  v：顶点集（非空）          E：边集（可空），可只有顶点，没边                    边是顶点的有序对或无序对（反映两点之间的关系）                  有向图：边顶点有序对的图（用箭头指明方向）          无向同：边是顶点的无序对的图                    网状结构（比线性（线性表）、层次（图））更复杂      多对多(N:N)      集合可空      边集中不允许出现相同的边        基本术语          顶点：图中的数据元素      弧头（终端点）箭头端      弧尾（初始点）无箭头端      完全图                  无向完全图：边数=n*(n-1)/2的无向图          有向完全图：边数=n*(n-1)的有向图                    权：与图中的边相关的数      子图：图G和G′,若有V(G′)∈=V(G)和 E(G′)∈= E(G),则称 G′为图G的子图      邻接：若(Vi,Vj)∈E(G)，则称Vi和Vj互为邻接点      关联：若(Vi,Vj)∈E(G)，则称边(Vi,Vj)关联于顶点Vi和Vj;      度                  无向图：顶点Vi的度为与Vi相关联的边的个数；D(Vi)用（ ）表示          有向图用&lt; &gt;表示                          出度：顶点Vi的出度为以Vi为尾的出边数              入度：顶点Vi的入度为以Vi为头的入边数              度：有向图的度=入度+出度                                一边带二度，两度组一边                    路径      路径长度：路径上边或弧的数目      简单路径：除第一个和最后一个外，其余的各个顶点均不相同的路径      回路：第一个和最后一个顶点相同的路径（也称环）      简单回路：第一个和最后一个顶点相同的简单路径                  回路中可以有多个圈，而简单回路只能有一个圈                    连通：无向图中，若从顶点Vi到Vj顶点有路径，则称Vi和Vj是连通的      连通图和连同分量      生成树：含有该连通图的全部顶点的一个极小连通子图。若连通图G的顶点个数为n，则G的生成树的变数为n-1                  边&gt;n-1，一定有环          边&lt;n-1，一定不连同                    生成森林：在非连通图中，每个连通分量都可得到一个极小连通子图，也就是生成树。这些生成树就组成了一个非连通图的生成森林。      基本运算                  建立图GreateGraph(G,V,E)          取顶点信息Getvex(G,u)          取边信息Getarc(G,u,v)          查询第一个邻接点FirstVex(G,u)          查询下一个邻接点NextVex(G,u,v)          插入顶点InsertVex(G,v)          删除顶点DeleteVex(G,v)          插入边InsertArc(G,v,w)          删除边DeleteArc(G,v,w)          遍历图Travers(G,tag)                    2 图的存储结构  没有顺序存储结构，可以借助二维数组表示，也叫做邻接矩阵；共有邻接矩阵，邻接表，十字链表，邻接多重等存储结构….  邻接矩阵表示法（也叫二维数组）          图的邻接矩阵：表示图的各顶点之间关系的矩阵                  有边1表示          无边0表示                          无向图的邻接矩阵是对称的              从邻接矩阵容易判断任意两顶点间是否有边相联；容易求出各顶点的度              无向图：顶点Vi的度D(Vi)=矩阵中第i行的1总和              有向图：OD(Vi)=矩阵中第i行的1总和，I D(Vi)=矩阵中第i列的1总和                                          带权图(网)的邻接矩阵                  有n个结点，对应就会有n*n的方阵                      邻接表示法（连式）          n个顶点、e条边的无向图，则其邻接表的表头结点数为n，链表结点总数为2e；      对于无向图，第i个链表的结点数为顶点Vi的度；      对于有向图，第i个链表的结点数为顶点Vi的出度；      在边稀疏时，邻接表比邻接矩阵省单元；      邻接表表示在检测边数方面比邻接矩阵表示效率要高。      3 图的遍历  从图G的某一顶点V出发，顺序访问各顶点一次      方法：为了克服顶点的重复访问，设立辅助数组（visited[n]）      visted[i]=\\left\\{  \\begin{aligned}  1=&amp;顶点i已被访问过 \\\\  0=&amp;顶点i未被访问过\\\\  \\end{aligned}  \\right.        遍历分类          深度优先搜索发（DFS）必考                    为克服顶点的重复访问，设立一标识向量 visited[n]          图可用邻接矩阵或邻接表表示          DFS规则具有递归性，故需用到栈          搜索到达某个顶点时(图中仍有顶点未被访问)，如果这个顶点的所有邻接点都被访问过，那么搜索就要回到前一个被访问过的顶点，再从该顶点的下一未被访问的邻接点开始深度优先搜索。          深度搜索的顶点的访问序列不是唯一的                    广度优先搜索发（BFS）**考点                  类似于树的层次遍历的过程（遍历所有的兄弟结点）          过程：中某一点Vi出发，首先访问Vi的所有邻接点（w1，w2，…，wt），然后再顺序访问w1，w2，…，wt的 所有未被访问过的邻接点…., 此过程直到所有顶点都被访问过          图可用邻接矩阵或邻接表表示          顶点的处理次序——先进先出，故需用到队列          思想                          所有结点标记置为“未被访问”标志；              访问起始顶点，同时置起始顶点“已访问”标记；              将起始顶点进队列              当队列不为空时重复执行以下步骤；                                  取当前队头顶点；                  对与队头顶点相邻接的所有未被访问过的顶点依次做：                                          访问该顶点                      置该顶点为“已访问”标记,并将它进队列；                                                        当前队头元素顶点出队；                  重复进行，直到队空时结束。                                                                        求图的连通分量                  判断连通性：调用一次DFS或BFS得到一顶点集合之后与V(G)比较，若两集合相等，则图G是连通图，否则不连通          求图的连通分量：图遍历的一种应用                    4 图的应用  最小生成树：连通图G=(V,E)，从任一顶点遍历，则图中边分成两部分：E(G) = T(G)+ B(G)          T(G):遍历通过的边      B(G):剩下的边（即遍历时未通过的边）        深度优先生成树：按照深度优先遍历而生成的树  广度优先生成树：按照广度优先遍历而生成的树  图的生成树不是唯一的  最小生成树也不是唯一的  最小生成树：给一个带权图，构造带权图的一颗生成树，使树中所有边权总和为最小  最小生成树的构造算法          Prim算法：适用于稠密最小生成树      Kruskal算法：构造的最小生成树不唯一，但权和相同，适合与求边稀疏的网的最小生成树        拓扑排序：拓扑有序序列的构造过程称          AOV网：对AOV网构造顶点线性序列（…i,…,k,…j,…）i是j的前趋，则i在j之前，若i、k间无路径，则或i在k前，或k在i前。这样的线性序列称为拓扑有序序列      拓扑排序算法：避免重复查找，可将入度为0的顶点入度域串链成一个链式栈                  将全体入度为0 的顶点入栈；          链栈非空时，反复执行：                          弹出栈顶元素Vj并将其输出；              检查Vj的出边表，将每条出边（Vj，Vk）的终点Vk的入度域减1；              若Vk的入度为0，则Vk入栈。                                若输出的顶点数小于N，则输出有回路；否则，拓扑排序结束。                    5 小结第六章查找1 基本概念  查找表：是由同一类型的数据元素构成的集合，查找中的核心  查找：给定K值，寻找K的数据元素  静态查找表：进行的是引用型运算          基本运算                  建表          查找          读表中元素                      动态查找表：进行的是加工型运算          基本运算                  初始化          查找          读表中元素          插入          删除                    树查找（二分查找，B树查找）      哈希查找        查找成功：在数据元素集合中找到了要查找的数据元素  查找不成功：在数据元素集合中没有找到要查找的数据元素    2 静态查找表    二分法查找          静态查找：二分查找，索引顺序表查找      动态查找：二叉排序树找，哈希查找        顺序表中查找：二分法查找法          从表中最后一个记录开始顺序进行查找，若当前记录的关键字=给定值，则查找成功；否则，继续查上一记录…；若直至第一个记录尚未找到需要的记录，则查找失败。包括“二分查找，索引顺序表查找”二种方法      优点：简单，对表无要求      缺点：比较次数多      算法                  设立岗哨                    思想：：每次将处于查找区间中间位置上的数据元素与给定值K比较，若不等则缩小查找区间并在新的区间内重复上述过程，直到查找成功或查找区间长度为0（查找不成功）为止。可使下次查找范围缩小一半        分块查找：索引顺序查找          查找过程（把数据分为若干个块，然后在块中再查找）                  先建立最大（小）关键字表-索引表（有序）          查找索引表，以确定所查找元素块号          在相应的块中按顺序查找关键字为K的记录                    3 二叉排序树  定义：是种特殊的、增加了限制条件的二叉树  条件          左子树上所有结点的值都小于它的根值，如左子树为空除外。      右子树上所有结点的值都大于它的根植，如右子树为空除外      每一个子树也要分别满足上二个条件，即一层一层都是这样条件        总结：二叉排序树上进行查找，如查找成功，则是从根结点出发走了一条从根结点到待查结点的路径；如查找不成功，则是从根结点出发走了一条从根到某个叶子的路径。因些与二分查找类似，关键字比较的次数不超过二叉树的深度，对于同一组结点，由于建立二叉排序树时插入结点的先后次序不同，所构成的二叉排序树的形态与深度也不同，含有n个结点的二叉排序树不是唯一的。也就是说，二叉排序树上的查找长度不仅与结点数n有关，也与二叉排序树的生成过程有关  插入原则：必须要保证插入一个新结点后，仍为一棵二叉排序树，这个结点是查找不成功时查找路径上访问的最后一个结点的左孩子或右孩子    4 散列表    哈希表          散列函数（哈希函数）：关键字与元素地址的函数      散列地址：由散列函数决定数据元素的存储位置，该位置称为散列地址      散列查找：关键字-&gt;散列函数转换-&gt;位置上有无元素      散列表：通过散列法建立的表称为散列表        冲突          散列表的实现：链池址法      优点：直接由关键字通过哈希函数计算出哈希地址，查找效率高      缺点：常发生冲突，影响查找效率      5 小结第七章排序（重点）1 概述  数据排序：一个文件记录按照关键字不减（不增）次序排列，是文件成为有序的文件，此过程称为排序  稳定排序：若排序后相同的关键字的记录保持原来相对次序  不稳定排序：反之稳定排序  排序类型          内部排序：全部数据存与内存 只考                  插入排序：又分直接插入排序，折半插入（二分法）排序，表插入和希尔排序几种，我们重点掌握直接插入排序就可          交换排序：又分冒泡排序，快速排序          选择排序：又分直接选择排序，堆排序          并归排序：它和和前几种完全不同的排序，它又分为有序序列合并，二路归并排序                    外部排序：需要对外存进行访问的排序过程      2 插入排序  过程：对R_1，…，R_i−1已排好序，有K_1≤K_2≤….≤K_i−1，现将K_i依次与K_i−1，K_i−2，…进行比较，并移动元素，直到发现R_i应插在R_j与R_j+1之间(即有K_j ≤ K_i＜K_j+1 )，则将R_i插到j+1号位置上，形成i个有序序列。（i从2～n）  算法          存储空间 n+1；（1为附加空间）      时间复杂度 O(n^2)      稳定性：稳定排序  ```c  void straightsort( list r );  {                                               /* 用直接插入排序法对r[1]…r[n]进行排序 /  \tfor ( i = 2; i &lt;= n; i++ )                    / n为表长，从第二个记录进行插入 /  \t{  \t\tr[0]\t= r[i];                         / 第i个记录复制为岗哨 /  \t\tj\t= i - 1;  \t\twhile ( r[0].key &lt; r[j].key )            / 与岗哨比较，直到健不大于岗哨键值 /  \t\t{  \t\t\tr[j + 1]\t= r[j];                 / 将第j个记录赋值给第j+1个记录 /  \t\t\tj\t\t= j - 1;  \t\t}  \t\tr[j + 1] = r[0];                       / 将第i个记录插入到序列中 */  \t}  }        ```    3 交换排序    冒泡排序          基本思想：通过多次重复比较、交换相邻记录而实现排序；每一趟的效果都是将当前键值最大的记录换到最后。它是对n个元素排序，所历经的趟数至少为1，至多为n-1      原理：通过两两数进行多次对比，把最大的数放在最后面，如下面多次比较才得到第一趟结果把49放在最后面，这就是冒泡的原理(21，25，49，25，16，08)          第一趟：21，25，25，16，08，49  第二趟：21，25，16，08，25，49  第三趟：21，16，08，25，25，49  第四趟：16，08，21，25，25，49  第五趟：08，16，21，25，25，49                  Void bubbleSort( list r, int n )  {                                                       /* 用冒泡排序法对r[1]…r[n]进行排序 */  \t/* flag:标志文件是否已排好序 */  \tfor ( i = 1; i &lt;= n - 1; i++ )  \t{  \t\tflag = 1;                               /* 若循环中记录未作交换,则说明序列已有序 */  \t\tfor ( j = 1; j &lt;= n - i; j++ )  \t\t\tif ( r[j + 1].key &lt; r[j].key )  \t\t\t{  \t\t\t\tflag\t\t= 0;    /* 排序前先为0，若在一趟起泡中交换了记录，则置为1 */  \t\t\t\tp\t\t= r[j]; r[j] = r[j + 1];  \t\t\t\tr[j + 1]\t= p;  \t\t\t}  \t\tif ( flag )  \t\t\treturn;  \t}  }                      快速排序  基本思想：通过分部排序完成整个表的排序；首先取第一个记录，将之与表中其余记录比较并交换，从而将它放到记录的正确的最终位置，使记录表分成两部分{其一（左边的）诸记录的关键字均小于它；其二（右边的）诸记录的关键字均大于它}；然后对这两部分重新执行上述过程，依此类推，直至排序完毕```cvoid  quickpass( list r, int h, int p ){  /* 对顺序表r中的子序列r[h]至r[p]进行快速排序 /  i\t= h;    j = p;  / 左右指针置初值 /  x\t= r[h];         / 取处理元素（即作为枢轴记录） /  while ( i ＜ j  )       / 左右指针未碰头则反复做： /  {      while ( r[j].key &gt; x.key &amp;&amp; i &lt; j )          –j;      /右边未找到小关键字，则右指针j继续左移/      if ( i &lt; j )    /右边找到比枢轴记录小的记录，则将其送到左边/      {          r[i] = r[j];          ++i;      }      while ( r[i].key &lt;= x.key &amp;&amp; i &lt; j )          ++i;      /边未找到大关键字，则左指针i继续右移/      if ( i &lt; j )                    /左边找到比枢轴记录大的记录，则将其送到右边/      {          r[j] = r[i];          - -j;      }  }  r[i] = x;                               /枢轴记录定位/  if ( h &lt; i - 1 )      quickpass( r, h, i - 1 );       /对左子序列进行快速排序/  if ( j + 1 &lt; high )      quickpass( r, j + 1, p );       /对右子序列进行快速排序*/}```  算法分析          空间：n+log2n; （log2n为附加空间—栈）      时间：≤O(nlog2n);                  注：若初始记录表有序或基本有序，则快速排序将蜕化为冒泡排序，其时间复杂度为O(n2)；          即：快速排序在表基本有序时，最不利于其发挥效率。                    稳定性：不稳定排序。      4 选择排序  直接选择：以重复选择的思想为基础进行排序          过程：设记录R_1，R_2…，R_n，对i=1，2，…，n-1，重复下列工作：                  在R_i，…，R_n中选最小(或最大)关键字记录R_j；          将R_j与第i个记录交换位置，即将选到的第i小的记录换到第i号位置上              void  select( list r, int n )  {  \t/*用选择排序法对r[1]….r[n]进行排序*/  \tfor ( i = 1; i &lt; = n - 1; ++i )  \t{  \t\tk = i;                                  /*选择第i小的记录，并交换位*/  \t\tfor ( j = i + 1; j &lt;= n; j++ )  \t\t\tif ( r[j].key &lt; r[k].key )      /*在r.[i]…r.[n-1]中找最小者*/  \t\t\t\tk = j;  \t\tif ( k != i )                           /*交换记录*/  \t\t{  \t\t\ttemp\t= r[i];  \t\t\tr[i]\t= r[k];  \t\t\tr[k]\t= temp;  \t\t}  \t}  }                                          分析                  空间：n+1； （1为附加空间）          时间：C总=∑ni=1(n-i)=(n2–1)/2≈O(n2)          稳定性：不稳定排序；                      堆排序          需要解决问题                  如何由一个初始序列建成一个堆？          如何在输出堆元素之后调整剩余元素成为一个新堆？                    分析                  空间：n+1； （仅需1个附加空间）          时间：O（nlog2n)          稳定性：不稳定排序；            5 并归排序                                有序序列的合并：比较各个子序列的第一个记录的键值，最小的一个就是排序后序列的第一个记录。取出这个记录，继续比较各子序列现有的第一个记录的键值，便可找出排序后的第二个记录。如此继续下去，最终可以得到排序结果  二种并归排序          思路                  n个记录的表看成n个，长度为1的有序表          两两归并成 n/2 个，长度为2的有序表（n为奇数，则还有1个长为1的表）          再两两归并为  n/2 /2 个，长度为4的有序表，再两两归并直至只剩1个，长度为n的有序表，共log2n趟                    算法分析                  空间：n+n；（需n个附加空间）          时间：O（nlogn)          稳定性：稳定排序；            6 小结                                          排序方法      平均时间      最坏情况      辅助存储      稳定性                  简单排序(插入、冒泡、直接选择)      O(n2)      O(n2)      O(1)      稳定排序(除直接选择是不稳定外)              快速排序      O(nlog2n)      O(n2)      O(log2n)      不稳定排序              堆排序      O(nlog2n)      O(nlog2n)      O(1)      不稳定排序              归并排序      O(nlog2n)      O(nlog2n)      O(n)      稳定排序      "
  },
  
  {
    "title": "React Project",
    "url": "/blog.github.io/posts/reactProject/",
    "categories": "Client",
    "tags": "React",
    "date": "2022-02-13 22:58:36 +0800",
    





    "snippet": "项目准备1. 项目介绍本节目标: 了解项目的定位和功能  项目功能演示          登录、退出      首页      内容（文章）管理：文章列表、发布文章、修改文章        技术          React 官方脚手架 create-react-app      react hooks      状态管理：mobx      UI 组件库：antd v4      ajax 请求库：axios      路由：react-router-dom 以及 history      富文本编辑器：react-quill      CSS 预编译器：sass      2. 项目搭建本节目标: 能够基于脚手架搭建项目基本结构实现步骤      使用 create-react-app 生成项目 npx create-react-app geek-pc        进入根目录 cd geek-pc        启动项目 yarn start        调整项目目录结构    /src  //client/react/project         项目资源文件，比如，图片 等  /components     通用组件  /pages          页面  /store          mobx 状态仓库  /utils          工具，比如，token、axios 的封装等  App.js          根组件  index.css       全局样式  index.js        项目入口      保留核心代码src/index.jsimport React from \"react\";import ReactDOM from \"react-dom\";import App from \"./App\";ReactDOM.render(  &lt;React.StrictMode&gt;    &lt;App /&gt;  &lt;/React.StrictMode&gt;,  document.getElementById(\"root\"));src/App.jsexport default function App() {  return &lt;div&gt;根组件&lt;/div&gt;;}3. 使用 gitee 管理项目本节目标: 能够将项目推送到 gitee 远程仓库实现步骤  在项目根目录打开终端，并初始化 git 仓库（如果已经有了 git 仓库，无需重复该步），命令：git init  添加项目内容到暂存区：git add .  提交项目内容到仓库区：git commit -m '项目初始化'  添加 remote 仓库地址：git remote add origin [gitee 仓库地址]  将项目内容推送到 gitee：git push origin master -u4. 使用 scss 预处理器本节目标: 能够在 CRA 中使用 sass 书写样式SASS 是一种预编译的 CSS，作用类似于 Less。由于 React 中内置了处理 SASS 的配置，所以，在 CRA 创建的项目中，可以直接使用 SASS 来写样式实现步骤      安装解析 sass 的包：yarn add sass -D        创建全局样式文件：index.scss    body {  margin: 0;}#root {  height: 100%;}      5. 配置基础路由本节目标: 能够配置登录页面的路由并显示到页面中实现步骤  安装路由：yarn add react-router-dom  在 pages 目录中创建两个文件夹：Login、Layout  分别在两个目录中创建 index.js 文件，并创建一个简单的组件后导出  在 App 组件中，导入路由组件以及两个页面组件  配置 Login 和 Layout 的路由规则代码实现pages/Login/index.jsconst Login = () =&gt; {  return &lt;div&gt;login&lt;/div&gt;;};export default Login;pages/Layout/index.jsconst Layout = () =&gt; {  return &lt;div&gt;layout&lt;/div&gt;;};export default Layout;app.js// 导入路由import { BrowserRouter, Route, Routes } from \"react-router-dom\";// 导入页面组件import Login from \"./pages/Login\";import Layout from \"./pages/Layout\";// 配置路由规则function App() {  return (    &lt;BrowserRouter&gt;      &lt;div className=\"App\"&gt;        &lt;Routes&gt;          &lt;Route path=\"/\" element={&lt;Layout /&gt;} /&gt;          &lt;Route path=\"/login\" element={&lt;Login /&gt;} /&gt;        &lt;/Routes&gt;      &lt;/div&gt;    &lt;/BrowserRouter&gt;  );}export default App;6. 组件库 antd 使用本节目标: 能够使用 antd 的 Button 组件渲染按钮实现步骤  安装 antd 组件库：yarn add antd  全局导入 antd 组件库的样式  导入 Button 组件  在 Login 页面渲染 Button 组件进行测试代码实现src/index.js// 先导入 antd 样式文件// https://github.com/ant-design/ant-design/issues/33327import \"antd/dist/antd.min.css\";// 再导入全局样式文件，防止样式覆盖！import \"./index.css\";pages/Login/index.js import { Button } from \"antd\";const Login = () =&gt; (  &lt;div&gt;    &lt;Button type=\"primary\"&gt;Button&lt;/Button&gt;  &lt;/div&gt;);易错总结  在哪个文件中导入 antd 的样式文件？  antd 的样式文件和我们自己的全局样式文件的导入顺序？7. 配置别名路径本节目标: 能够配置@路径简化路径处理  自定义 CRA 的默认配置 &gt; craco 配置文档      CRA 将所有工程化配置，都隐藏在了 react-scripts 包中，所以项目中看不到任何配置信息    如果要修改 CRA 的默认配置，有以下几种方案：              通过第三方库来修改，比如，@craco/craco （推荐）        通过执行 yarn eject 命令，释放 react-scripts 中的所有配置到项目中            实现步骤  安装修改 CRA 配置的包：yarn add -D @craco/craco  在项目根目录中创建 craco 的配置文件：craco.config.js，并在配置文件中配置路径别名  修改 package.json 中的脚本命令  在代码中，就可以通过 @ 来表示 src 目录的绝对路径  重启项目，让配置生效代码实现craco.config.jsconst path = require(\"path\");module.exports = {  // webpack 配置  webpack: {    // 配置别名    alias: {      // 约定：使用 @ 表示 src 文件所在路径      \"@\": path.resolve(__dirname, \"src\"),    },  },};package.json// 将 start/build/test 三个命令修改为 craco 方式\"scripts\": {  \"start\": \"craco start\",  \"build\": \"craco build\",  \"test\": \"craco test\",  \"eject\": \"react-scripts eject\"}8. @别名路径提示本节目标: 能够让 vscode 识别@路径并给出路径提示实现步骤  在项目根目录创建 jsconfig.json 配置文件  在配置文件中添加以下配置代码实现{  \"compilerOptions\": {    \"baseUrl\": \"./\",    \"paths\": {      \"@/*\": [\"src/*\"]    }  }}vscode 会自动读取jsconfig.json 中的配置，让 vscode 知道@就是 src 目录9. 安装 dev-tools 调试工具  https://gitee.com/react-cp/react-pc-doc 这里找到 dev-tools.crx 文件登录模块1. 基本结构搭建本节目标: 能够使用 antd 搭建基础布局实现步骤  在 Login/index.js 中创建登录页面基本结构  在 Login 目录中创建 index.scss 文件，指定组件样式  将 logo.png 和 login.png 拷贝到 /client/react/project 目录中代码实现pages/Login/index.jsimport { Card } from \"antd\";import logo from \"@//client/react/project/logo.png\";import \"./index.scss\";const Login = () =&gt; {  return (    &lt;div className=\"login\"&gt;      &lt;Card className=\"login-container\"&gt;        &lt;img className=\"login-logo\" src={logo} alt=\"\" /&gt;        {/* 登录表单 */}      &lt;/Card&gt;    &lt;/div&gt;  );};export default Login;pages/Login/index.scss.login {  width: 100%;  height: 100%;  position: absolute;  left: 0;  top: 0;  background: center/cover url(\"~@//client/react/project/login.png\");  .login-logo {    width: 200px;    height: 60px;    display: block;    margin: 0 auto 20px;  }  .login-container {    width: 440px;    height: 360px;    position: absolute;    left: 50%;    top: 50%;    transform: translate(-50%, -50%);    box-shadow: 0 0 50px rgb(0 0 0 / 10%);  }  .login-checkbox-label {    color: #1890ff;  }}2. 创建表单结构本节目标: 能够使用 antd 的 Form 组件创建登录表单实现步骤  打开 antd Form 组件文档  找到代码演示的第一个示例（基本使用），点击&lt;&gt;（显示代码），并拷贝代码到组件中  分析 Form 组件基本结构  调整 Form 组件结构和样式代码实现pages/Login/index.js import { Form, Input, Button, Checkbox } from 'antd'const Login = () =&gt; {  return (    &lt;Form&gt;      &lt;Form.Item&gt;        &lt;Input size=\"large\" placeholder=\"请输入手机号\" /&gt;      &lt;/Form.Item&gt;      &lt;Form.Item&gt;        &lt;Input size=\"large\" placeholder=\"请输入验证码\" /&gt;      &lt;/Form.Item&gt;      &lt;Form.Item&gt;        &lt;Checkbox className=\"login-checkbox-label\"&gt;          我已阅读并同意「用户协议」和「隐私条款」        &lt;/Checkbox&gt;      &lt;/Form.Item&gt;      &lt;Form.Item&gt;        &lt;!-- 渲染Button组件为submit按钮 --&gt;        &lt;Button type=\"primary\" htmlType=\"submit\" size=\"large\" block&gt;          登录        &lt;/Button&gt;      &lt;/Form.Item&gt;    &lt;/Form&gt;  )}3. 表单校验实现本节目标: 能够为手机号和密码添加表单校验实现步骤  为 Form 组件添加 validateTrigger 属性，指定校验触发时机的集合  为 Form.Item 组件添加 name 属性，这样表单校验才会生效  为 Form.Item 组件添加 rules 属性，用来添加表单校验代码实现page/Login/index.jsconst Login = () =&gt; {  return (    &lt;Form validateTrigger={[\"onBlur\", \"onChange\"]}&gt;      &lt;Form.Item        name=\"mobile\"        rules={[          {            pattern: /^1[3-9]\\d{9}$/,            message: \"手机号码格式不对\",            validateTrigger: \"onBlur\",          },          { required: true, message: \"请输入手机号\" },        ]}      &gt;        &lt;Input size=\"large\" placeholder=\"请输入手机号\" /&gt;      &lt;/Form.Item&gt;      &lt;Form.Item        name=\"code\"        rules={[          { len: 6, message: \"验证码6个字符\", validateTrigger: \"onBlur\" },          { required: true, message: \"请输入验证码\" },        ]}      &gt;        &lt;Input size=\"large\" placeholder=\"请输入验证码\" maxLength={6} /&gt;      &lt;/Form.Item&gt;      &lt;Form.Item name=\"remember\" valuePropName=\"checked\"&gt;        &lt;Checkbox className=\"login-checkbox-label\"&gt;          我已阅读并同意「用户协议」和「隐私条款」        &lt;/Checkbox&gt;      &lt;/Form.Item&gt;      &lt;Form.Item&gt;        &lt;Button type=\"primary\" htmlType=\"submit\" size=\"large\" block&gt;          登录        &lt;/Button&gt;      &lt;/Form.Item&gt;    &lt;/Form&gt;  );};4. 获取登录表单数据本节目标: 能够拿到登录表单中用户的手机号码和验证码实现步骤  为 Form 组件添加 onFinish 属性，该事件会在点击登录按钮时触发  创建 onFinish 函数，通过函数参数 values 拿到表单值  Form 组件添加 initialValues 属性，来初始化表单值代码实现pages/Login/index.js// 点击登录按钮时触发 参数values即是表单输入数据const onFinish = (values) =&gt; {  console.log(values);};&lt;Form  onFinish={onFinish}  initialValues=&gt;  ...&lt;/Form&gt;;5. 封装 http 工具模块本节目标: 封装 axios，简化操作实现步骤  创建 utils/http.js 文件  创建 axios 实例，配置 baseURL，请求拦截器，响应拦截器  在 utils/index.js 中，统一导出 http代码实现utils/http.jsimport axios from \"axios\";const http = axios.create({  baseURL: \"http://geek.itheima.net/v1_0\",  timeout: 5000,});// 添加请求拦截器http.interceptors.request.use(  (config) =&gt; {    return config;  },  (error) =&gt; {    return Promise.reject(error);  });// 添加响应拦截器http.interceptors.response.use(  (response) =&gt; {    // 2xx 范围内的状态码都会触发该函数。    // 对响应数据做点什么    return response;  },  (error) =&gt; {    // 超出 2xx 范围的状态码都会触发该函数。    // 对响应错误做点什么    return Promise.reject(error);  });export { http };utils/index.jsimport { http } from \"./http\";export { http };6. 配置登录 Mobx本节目标: 基于 mobx 封装管理用户登录的 storestore/login.Store.js// 登录模块import { makeAutoObservable } from \"mobx\";import { http } from \"@/utils\";class LoginStore {  token = \"\";  constructor() {    makeAutoObservable(this);  }  // 登录  login = async ({ mobile, code }) =&gt; {    const res = await http.post(\"http://geek.itheima.net/v1_0/authorizations\", {      mobile,      code,    });    this.token = res.data.token;  };}export default LoginStore;store/index.jsimport React from \"react\";import LoginStore from \"./login.Store\";class RootStore {  // 组合模块  constructor() {    this.loginStore = new LoginStore();  }}// 导入useStore方法供组件使用数据const StoresContext = React.createContext(new RootStore());export const useStore = () =&gt; React.useContext(StoresContext);7. 实现登录逻辑本节目标: 在表单校验通过之后通过封装好的 store 调用登录接口实现步骤  使用 useStore 方法得到 loginStore 实例对象  在校验通过之后，调用 loginStore 中的 login 函数  登录成功之后跳转到首页代码实现import { useStore } from '@/store'const Login = () =&gt; {  // 获取跳转实例对象  const navigate = useNavigate()  const { loginStore } = useStore()  const onFinish = async values =&gt; {    const { mobile, code } = values    try {      await loginStore.login({ mobile, code })      navigate('/')    } catch (e) {      message.error(e.response?.data?.message || '登录失败')    }  }  return (...)}8. token 持久化8.1 封装工具函数本节目标: 能够统一处理 token 的持久化相关操作实现步骤  创建 utils/token.js 文件  分别提供 getToken/setToken/clearToken/isAuth 四个工具函数并导出  创建 utils/index.js 文件，统一导出 token.js 中的所有内容，来简化工具函数的导入  将登录操作中用到 token 的地方，替换为该工具函数代码实现utils/token.jsconst TOKEN_KEY = \"itcast_geek_pc\";const getToken = () =&gt; localStorage.getItem(TOKEN_KEY);const setToken = (token) =&gt; localStorage.setItem(TOKEN_KEY, token);const clearToken = () =&gt; localStorage.removeItem(TOKEN_KEY);export { getToken, setToken, clearToken };8.2 持久化设置本节目标: 使用 token 函数持久化配置实现步骤  拿到 token 的时候一式两份，存本地一份  初始化的时候优先从本地取，取不到再初始化为控制代码实现store/login.Store.js// 登录模块import { makeAutoObservable } from \"mobx\";import { setToken, getToken, clearToken, http } from \"@/utils\";class LoginStore {  // 这里哦！！  token = getToken() || \"\";  constructor() {    makeAutoObservable(this);  }  // 登录  login = async ({ mobile, code }) =&gt; {    const res = await http.post(\"http://geek.itheima.net/v1_0/authorizations\", {      mobile,      code,    });    this.token = res.data.token;    // 还有这里哦！！    setToken(res.data.token);  };}export default LoginStore;9. 请求拦截器注入 token本节目标: 把 token 通过请求拦截器注入到请求头中  拼接方式：config.headers.Authorization = Bearer ${token}}utils/http.jshttp.interceptors.request.use((config) =&gt; {  // if not login add token  const token = getToken();  if (token) {    config.headers.Authorization = `Bearer ${token}`;  }  return config;});10. 路由鉴权实现本节目标: 能够实现未登录时访问拦截并跳转到登录页面实现思路  自己封装 AuthRoute 路由鉴权高阶组件，实现未登录拦截，并跳转到登录页面  思路为：判断本地是否有 token，如果有，就返回子组件，否则就重定向到登录 Login实现步骤  在 components 目录中，创建 AuthRoute/index.js 文件  判断是否登录  登录时，直接渲染相应页面组件  未登录时，重定向到登录页面  将需要鉴权的页面路由配置，替换为 AuthRoute 组件渲染代码实现components/AuthRoute/index.js// 1. 判断token是否存在// 2. 如果存在 直接正常渲染// 3. 如果不存在 重定向到登录路由// 高阶组件:把一个组件当成另外一个组件的参数传入 然后通过一定的判断 返回新的组件import { getToken } from \"@/utils\";import { Navigate } from \"react-router-dom\";function AuthRoute({ children }) {  const isToken = getToken();  if (isToken) {    return &lt;&gt;{children}&lt;/&gt;;  } else {    return &lt;Navigate to=\"/login\" replace /&gt;;  }}// &lt;AuthComponent&gt; &lt;Layout/&gt; &lt;/AuthComponent&gt;// 登录：&lt;&gt;&lt;Layout/&gt;&lt;/&gt;// 非登录：&lt;Navigate to=\"/login\" replace /&gt;export { AuthRoute };src/app.jsimport { Router, Route } from \"react-router-dom\";import { AuthRoute } from \"@/components/AuthRoute\";import Layout from \"@/pages/Layout\";import Login from \"@/pages/Login\";function App() {  return (    &lt;Router&gt;      &lt;Routes&gt;        {/* 需要鉴权的路由 */}        &lt;Route          path=\"/*\"          element={            &lt;AuthRoute&gt;              &lt;Layout /&gt;            &lt;/AuthRoute&gt;          }        /&gt;        {/* 不需要鉴权的路由 */}        &lt;Route path=\"/login\" element={&lt;Login /&gt;} /&gt;      &lt;/Routes&gt;    &lt;/Router&gt;  );}export default App;Layout 模块1. 基本结构搭建本节目标: 能够使用 antd 搭建基础布局实现步骤  打开 antd/Layout 布局组件文档，找到示例：顶部-侧边布局-通栏  拷贝示例代码到我们的 Layout 页面中  分析并调整页面布局代码实现pages/Layout/index.jsimport { Layout, Menu, Popconfirm } from \"antd\";import {  HomeOutlined,  DiffOutlined,  EditOutlined,  LogoutOutlined,} from \"@ant-design/icons\";import \"./index.scss\";const { Header, Sider } = Layout;const GeekLayout = () =&gt; {  return (    &lt;Layout&gt;      &lt;Header className=\"header\"&gt;        &lt;div className=\"logo\" /&gt;        &lt;div className=\"user-info\"&gt;          &lt;span className=\"user-name\"&gt;user.name&lt;/span&gt;          &lt;span className=\"user-logout\"&gt;            &lt;Popconfirm title=\"是否确认退出？\" okText=\"退出\" cancelText=\"取消\"&gt;              &lt;LogoutOutlined /&gt; 退出            &lt;/Popconfirm&gt;          &lt;/span&gt;        &lt;/div&gt;      &lt;/Header&gt;      &lt;Layout&gt;        &lt;Sider width={200} className=\"site-layout-background\"&gt;          &lt;Menu            mode=\"inline\"            theme=\"dark\"            defaultSelectedKeys={[\"1\"]}            style=          &gt;            &lt;Menu.Item icon={&lt;HomeOutlined /&gt;} key=\"1\"&gt;              数据概览            &lt;/Menu.Item&gt;            &lt;Menu.Item icon={&lt;DiffOutlined /&gt;} key=\"2\"&gt;              内容管理            &lt;/Menu.Item&gt;            &lt;Menu.Item icon={&lt;EditOutlined /&gt;} key=\"3\"&gt;              发布文章            &lt;/Menu.Item&gt;          &lt;/Menu&gt;        &lt;/Sider&gt;        &lt;Layout className=\"layout-content\" style=&gt;          内容        &lt;/Layout&gt;      &lt;/Layout&gt;    &lt;/Layout&gt;  );};export default GeekLayout;pages/Layout/index.scss.ant-layout {  height: 100%;}.header {  padding: 0;}.logo {  width: 200px;  height: 60px;  background: url(\"~@//client/react/project/logo.png\") no-repeat center / 160px    auto;}.layout-content {  overflow-y: auto;}.user-info {  position: absolute;  right: 0;  top: 0;  padding-right: 20px;  color: #fff;  .user-name {    margin-right: 20px;  }  .user-logout {    display: inline-block;    cursor: pointer;  }}.ant-layout-header {  padding: 0 !important;}2. 二级路由配置本节目标: 能够在右侧内容区域展示左侧菜单对应的页面内容使用步骤  在 pages 目录中，分别创建：Home（数据概览）/Article（内容管理）/Publish（发布文章）页面文件夹  分别在三个文件夹中创建 index.js 并创建基础组件后导出  在 app.js 中配置嵌套子路由，在 layout.js 中配置二级路由出口  使用 Link 修改左侧菜单内容，与子路由规则匹配实现路由切换代码实现pages/Home/index.jsconst Home = () =&gt; {  return &lt;div&gt;Home&lt;/div&gt;;};export default Home;pages/Article/index.jsconst Article = () =&gt; {  return &lt;div&gt;Article&lt;/div&gt;;};export default Article;pages/Publish/index.jsconst Publish = () =&gt; {  return &lt;div&gt;Publish&lt;/div&gt;;};export default Publish;app.js&lt;Route path=\"/\" element={    &lt;AuthRoute&gt;      &lt;Layout /&gt;    &lt;/AuthRoute&gt;  }&gt;    {/* 二级路由默认页面 */}    &lt;Route index element={&lt;Home /&gt;} /&gt;    &lt;Route path=\"article\" element={&lt;Article /&gt;} /&gt;    &lt;Route path=\"publish\" element={&lt;Publish /&gt;} /&gt;&lt;/Route&gt;&lt;Route path=\"/login\" element={&lt;Login/&gt;}&gt;&lt;/Route&gt;pages/Layout/index.js// 配置Link组件&lt;Menu    mode=\"inline\"    theme=\"dark\"    style=    selectedKeys={[selectedKey]}    &gt;    &lt;Menu.Item icon={&lt;HomeOutlined /&gt;} key=\"/\"&gt;      &lt;Link to=\"/\"&gt;数据概览&lt;/Link&gt;    &lt;/Menu.Item&gt;    &lt;Menu.Item icon={&lt;DiffOutlined /&gt;} key=\"/article\"&gt;      &lt;Link to=\"/article\"&gt;内容管理&lt;/Link&gt;    &lt;/Menu.Item&gt;    &lt;Menu.Item icon={&lt;EditOutlined /&gt;} key=\"/publish\"&gt;      &lt;Link to=\"/publish\"&gt;发布文章&lt;/Link&gt;    &lt;/Menu.Item&gt;&lt;/Menu&gt;// 二级路由对应显示&lt;Layout className=\"layout-content\" style=&gt;  &lt;Routes&gt;    {/* 二级路由默认页面 */}    &lt;Outlet /&gt;  &lt;/Routes&gt;&lt;/Layout&gt;3. 菜单高亮显示本节目标: 能够在页面刷新的时候保持对应菜单高亮  思路            Menu 组件的 selectedKeys 属性与 Menu.Item 组件的 key 属性发生匹配的时候，Item 组件即可高亮              页面刷新时，将当前访问页面的路由地址作为 Menu 选中项的值（selectedKeys）即可      实现步骤  将 Menu 的 key 属性修改为与其对应的路由地址  获取到当前正在访问页面的路由地址  将当前路由地址设置为 selectedKeys 属性的值代码实现pages/Layout/index.jsimport { useLocation } from \"react-router-dom\";const GeekLayout = () =&gt; {  const location = useLocation();  // 这里是当前浏览器上的路径地址  const selectedKey = location.pathname;  return (    // ...    &lt;Menu      mode=\"inline\"      theme=\"dark\"      selectedKeys={[selectedKey]}      style=    &gt;      &lt;Menu.Item icon={&lt;HomeOutlined /&gt;} key=\"/\"&gt;        &lt;Link to=\"/\"&gt;数据概览&lt;/Link&gt;      &lt;/Menu.Item&gt;      &lt;Menu.Item icon={&lt;DiffOutlined /&gt;} key=\"/article\"&gt;        &lt;Link to=\"/article\"&gt;内容管理&lt;/Link&gt;      &lt;/Menu.Item&gt;      &lt;Menu.Item icon={&lt;EditOutlined /&gt;} key=\"/publish\"&gt;        &lt;Link to=\"/publish\"&gt;发布文章&lt;/Link&gt;      &lt;/Menu.Item&gt;    &lt;/Menu&gt;  );};4. 展示个人信息本节目标: 能够在页面右上角展示登录用户名实现步骤  在 store 中新增 userStore.js 模块，在其中定义获取用户信息的 mobx 代码  在 store 的入口文件中组合新增的 userStore 模块  在 Layout 组件中调用 action 函数获取用户数据  在 Layout 组件中获取个人信息并展示代码实现store/user.Store.js// 用户模块import { makeAutoObservable } from \"mobx\";import { http } from \"@/utils\";class UserStore {  userInfo = {};  constructor() {    makeAutoObservable(this);  }  async getUserInfo() {    const res = await http.get(\"/user/profile\");    this.userInfo = res.data;  }}export default UserStore;store/index.jsimport React from \"react\";import LoginStore from \"./login.Store\";import UserStore from \"./user.Store\";class RootStore {  // 组合模块  constructor() {    this.loginStore = new LoginStore();    this.userStore = new UserStore();  }}const StoresContext = React.createContext(new RootStore());export const useStore = () =&gt; React.useContext(StoresContext);pages/Layout/index.jsimport { useEffect } from \"react\";import { observer } from \"mobx-react-lite\";const GeekLayout = () =&gt; {  const { userStore } = useStore();  // 获取用户数据  useEffect(() =&gt; {    try {      userStore.getUserInfo();    } catch {}  }, [userStore]);  return (    &lt;Layout&gt;      &lt;Header className=\"header\"&gt;        &lt;div className=\"logo\" /&gt;        &lt;div className=\"user-info\"&gt;          &lt;span className=\"user-name\"&gt;{userStore.userInfo.name}&lt;/span&gt;        &lt;/div&gt;      &lt;/Header&gt;      {/* 省略无关代码 */}    &lt;/Layout&gt;  );};export default observer(GeekLayout);5. 退出登录实现本节目标: 能够实现退出登录功能实现步骤  为气泡确认框添加确认回调事件  在store/login.Store.js 中新增退出登录的 action 函数，在其中删除 token  在回调事件中，调用 loginStore 中的退出 action  退出后，返回登录页面代码实现store/login.Store.jsclass LoginStore {  // 退出登录  loginOut = () =&gt; {    this.token = \"\";    clearToken();  };}export default LoginStore;pages/Layout/index.js// login outconst navigate = useNavigate();const onLogout = () =&gt; {  loginStore.loginOut();  navigate(\"/login\");};&lt;span className=\"user-logout\"&gt;  &lt;Popconfirm    title=\"是否确认退出？\"    okText=\"退出\"    cancelText=\"取消\"    onConfirm={onLogout}  &gt;    &lt;LogoutOutlined /&gt; 退出  &lt;/Popconfirm&gt;&lt;/span&gt;;6. 处理 Token 失效本节目标: 能够在响应拦截器中处理 token 失效  说明：为了能够在非组件环境下拿到路由信息，需要我们安装一个 history 包实现步骤  安装：yarn add history  创建 utils/history.js 文件  在 app.js 中使用我们新建的路由并配置 history 参数  通过响应拦截器处理 token 失效代码实现utils/history.js// https://github.com/remix-run/react-router/issues/8264import { createBrowserHistory } from \"history\";import { unstable_HistoryRouter as HistoryRouter } from \"react-router-dom\";const history = createBrowserHistory();export { HistoryRouter, history };app.jsimport { HistoryRouter, history } from \"./utils/history\";function App() {  return &lt;HistoryRouter history={history}&gt;...省略无关代码&lt;/HistoryRouter&gt;;}export default App;utils/http.jsimport { history } from \"./history\";http.interceptors.response.use(  (response) =&gt; {    return response.data;  },  (error) =&gt; {    if (error.response.status === 401) {      // 删除token      clearToken();      // 跳转到登录页      history.push(\"/login\");    }    return Promise.reject(error);  });7. 首页 Home 图表展示本节目标: 实现首页 echart 图表封装展示需求描述：  使用 eharts 配合 react 封装柱状图组件 Bar  要求组件的标题 title，横向数据 xData，纵向数据 yData，样式 style 可定制代码实现components/Bar/index.jsimport * as echarts from \"echarts\";import { useEffect, useRef } from \"react\";function echartInit(node, xData, sData, title) {  const myChart = echarts.init(node);  // 绘制图表  myChart.setOption({    title: {      text: title,    },    tooltip: {},    xAxis: {      data: xData,    },    yAxis: {},    series: [      {        name: \"销量\",        type: \"bar\",        data: sData,      },    ],  });}function Bar({ style, xData, sData, title }) {  // 1. 先不考虑传参问题  静态数据渲染到页面中  // 2. 把那些用户可能定制的参数 抽象props (1.定制大小 2.data 以及说明文字)  const nodeRef = useRef(null);  useEffect(() =&gt; {    echartInit(nodeRef.current, xData, sData, title);  }, [xData, sData]);  return &lt;div ref={nodeRef} style={style}&gt;&lt;/div&gt;;}export default Bar;pages/Home/index.jsimport Bar from \"@/components/Bar\";import \"./index.scss\";const Home = () =&gt; {  return (    &lt;div className=\"home\"&gt;      &lt;Bar        style=        xData={[\"vue\", \"angular\", \"react\"]}        sData={[50, 60, 70]}        title=\"三大框架满意度\"      /&gt;      &lt;Bar        style=        xData={[\"vue\", \"angular\", \"react\"]}        sData={[50, 60, 70]}        title=\"三大框架使用度\"      /&gt;    &lt;/div&gt;  );};export default Home;pages/Home/index.scss.home {  width: 100%;  height: 100%;  align-items: center;}内容管理1. 筛选区结构本节目标: 能够使用 antd 组件库搭建筛选区域结构  重点关注            如何让 RangePicker 日期范围选择框选择中文              Select 组件配合 Form.Item 使用时，如何配置默认选中项      ` &lt;Form initialValues= &gt;`      代码实现import { Link } from \"react-router-dom\";import {  Card,  Breadcrumb,  Form,  Button,  Radio,  DatePicker,  Select,} from \"antd\";import \"moment/locale/zh-cn\";import locale from \"antd/es/date-picker/locale/zh_CN\";import \"./index.scss\";const { Option } = Select;const { RangePicker } = DatePicker;const Article = () =&gt; {  return (    &lt;div&gt;      &lt;Card        title={          &lt;Breadcrumb separator=\"&gt;\"&gt;            &lt;Breadcrumb.Item&gt;              &lt;Link to=\"/home\"&gt;首页&lt;/Link&gt;            &lt;/Breadcrumb.Item&gt;            &lt;Breadcrumb.Item&gt;内容管理&lt;/Breadcrumb.Item&gt;          &lt;/Breadcrumb&gt;        }        style=      &gt;        &lt;Form initialValues=&gt;          &lt;Form.Item label=\"状态\" name=\"status\"&gt;            &lt;Radio.Group&gt;              &lt;Radio value={null}&gt;全部&lt;/Radio&gt;              &lt;Radio value={0}&gt;草稿&lt;/Radio&gt;              &lt;Radio value={1}&gt;待审核&lt;/Radio&gt;              &lt;Radio value={2}&gt;审核通过&lt;/Radio&gt;              &lt;Radio value={3}&gt;审核失败&lt;/Radio&gt;            &lt;/Radio.Group&gt;          &lt;/Form.Item&gt;          &lt;Form.Item label=\"频道\" name=\"channel_id\"&gt;            &lt;Select              placeholder=\"请选择文章频道\"              defaultValue=\"lucy\"              style=            &gt;              &lt;Option value=\"jack\"&gt;Jack&lt;/Option&gt;              &lt;Option value=\"lucy\"&gt;Lucy&lt;/Option&gt;            &lt;/Select&gt;          &lt;/Form.Item&gt;          &lt;Form.Item label=\"日期\" name=\"date\"&gt;            {/* 传入locale属性 控制中文显示*/}            &lt;RangePicker locale={locale}&gt;&lt;/RangePicker&gt;          &lt;/Form.Item&gt;          &lt;Form.Item&gt;            &lt;Button type=\"primary\" htmlType=\"submit\" style=&gt;              筛选            &lt;/Button&gt;          &lt;/Form.Item&gt;        &lt;/Form&gt;      &lt;/Card&gt;    &lt;/div&gt;  );};export default Article;2. 表格区域结构本节目标: 能够基于 Table 组件搭建表格结构  重点关注      通过哪个属性指定 Table 组件的列信息    通过哪个属性指定 Table 数据    通过哪个属性指定 Table 列表用到的 key 属性  代码实现import { Link } from \"react-router-dom\";import { Table, Tag, Space } from \"antd\";import { EditOutlined, DeleteOutlined } from \"@ant-design/icons\";import img404 from \"@//client/react/project/error.png\";const Article = () =&gt; {  const columns = [    {      title: \"封面\",      dataIndex: \"cover\",      width: 120,      render: (cover) =&gt; {        return &lt;img src={cover || img404} width={80} height={60} alt=\"\" /&gt;;      },    },    {      title: \"标题\",      dataIndex: \"title\",      width: 220,    },    {      title: \"状态\",      dataIndex: \"status\",      render: (data) =&gt; &lt;Tag color=\"green\"&gt;审核通过&lt;/Tag&gt;,    },    {      title: \"发布时间\",      dataIndex: \"pubdate\",    },    {      title: \"阅读数\",      dataIndex: \"read_count\",    },    {      title: \"评论数\",      dataIndex: \"comment_count\",    },    {      title: \"点赞数\",      dataIndex: \"like_count\",    },    {      title: \"操作\",      render: (data) =&gt; {        return (          &lt;Space size=\"middle\"&gt;            &lt;Button type=\"primary\" shape=\"circle\" icon={&lt;EditOutlined /&gt;} /&gt;            &lt;Button              type=\"primary\"              danger              shape=\"circle\"              icon={&lt;DeleteOutlined /&gt;}            /&gt;          &lt;/Space&gt;        );      },    },  ];  const data = [    {      id: \"8218\",      comment_count: 0,      cover: {        images: [\"http://geek.itheima.net/resources/images/15.jpg\"],      },      like_count: 0,      pubdate: \"2019-03-11 09:00:00\",      read_count: 2,      status: 2,      title: \"wkwebview离线化加载h5资源解决方案\",    },  ];  return (    &lt;div&gt;      &lt;Card title={`根据筛选条件共查询到 count 条结果：`}&gt;        &lt;Table rowKey=\"id\" columns={columns} dataSource={data} /&gt;      &lt;/Card&gt;    &lt;/div&gt;  );};3. 渲染频道数据本节目标: 使用接口数据渲染频道列表实现步骤  使用 axios 获取数据  将使用频道数据列表改写下拉框组件代码实现pages/Article/index.js// 获取频道列表const [channels, setChannels] = useState([]);useEffect(() =&gt; {  async function fetchChannels() {    const res = await http.get(\"/channels\");    setChannels(res.data.channels);  }  fetchChannels();}, []);// 渲染模板return (  &lt;Form.Item label=\"频道\" name=\"channel_id\"&gt;    &lt;Select placeholder=\"请选择文章频道\" style=&gt;      {channels.map((item) =&gt; (        &lt;Option key={item.id} value={item.id}&gt;          {item.name}        &lt;/Option&gt;      ))}    &lt;/Select&gt;  &lt;/Form.Item&gt;);4. 渲染表格数据本节目标: 使用接口数据渲染表格数据实现步骤  声明列表相关数据管理  声明参数相关数据管理  调用接口获取数据  使用接口数据渲染模板代码实现// 文章列表数据管理const [article, setArticleList] = useState({  list: [],  count: 0,});// 参数管理const [params, setParams] = useState({  page: 1,  per_page: 10,});// 发送接口请求useEffect(() =&gt; {  async function fetchArticleList() {    const res = await http.get(\"/mp/articles\", { params });    const { results, total_count } = res.data;    setArticleList({      list: results,      count: total_count,    });  }  fetchArticleList();}, [params]);// 模板渲染return (  &lt;Card title={`根据筛选条件共查询到 ${article.count} 条结果：`}&gt;    &lt;Table dataSource={article.list} columns={columns} /&gt;  &lt;/Card&gt;);5. 筛选功能实现本节目标: 能够根据筛选条件筛选表格数据实现步骤  为表单添加onFinish属性监听表单提交事件，获取参数  根据接口字段格式要求格式化参数格式  修改params 触发接口的重新发送代码实现// 筛选功能const onSearch = (values) =&gt; {  const { status, channel_id, date } = values;  // 格式化表单数据  const _params = {};  // 格式化status  _params.status = status;  if (channel_id) {    _params.channel_id = channel_id;  }  if (date) {    _params.begin_pubdate = date[0].format(\"YYYY-MM-DD\");    _params.end_pubdate = date[1].format(\"YYYY-MM-DD\");  }  // 修改params参数 触发接口再次发起  setParams({    ...params,    ..._params,  });};// Form绑定事件return &lt;Form onFinish={onSearch}&gt;&lt;/Form&gt;;6. 分页功能实现本节目标: 能够实现分页获取文章列表数据实现步骤  为 Table 组件指定 pagination 属性来展示分页效果  在分页切换事件中获取到筛选表单中选中的数据  使用当前页数据修改 params 参数依赖引起接口重新调用获取最新数据代码实现const pageChange = (page) =&gt; {  // 拿到当前页参数 修改params 引起接口更新  setParams({    ...params,    page,  });};return (  &lt;Table    dataSource={article.list}    columns={columns}    pagination=  /&gt;);7. 删除功能本节目标: 能够实现点击删除按钮弹框确认实现步骤  给删除文章按钮绑定点击事件  弹出确认窗口，询问用户是否确定删除文章  拿到参数调用删除接口，更新列表代码实现// 删除回调const delArticle = async (data) =&gt; {    await http.delete(`/mp/articles/${data.id}`)    // 更新列表    setParams({      page: 1,      per_page: 10    })}const columns = [  // ...  {      title: '操作',      render: data =&gt; {        return (          &lt;Space size=\"middle\"&gt;            &lt;Button type=\"primary\" shape=\"circle\" icon={&lt;EditOutlined /&gt;} /&gt;            &lt;Popconfirm              title=\"确认删除该条文章吗?\"              onConfirm={() =&gt; delArticle(data)}              okText=\"确认\"              cancelText=\"取消\"            &gt;              &lt;Button                type=\"primary\"                danger                shape=\"circle\"                icon={&lt;DeleteOutlined /&gt;}              /&gt;            &lt;/Popconfirm&gt;          &lt;/Space&gt;        )      }]8. 编辑文章跳转本节目标: 能够实现编辑文章跳转功能代码实现const columns = [  // ...  {    title: \"操作\",    render: (data) =&gt; (      &lt;Space size=\"middle\"&gt;        &lt;Button          type=\"primary\"          shape=\"circle\"          icon={&lt;EditOutlined /&gt;}          onClick={() =&gt; history.push(`/home/publish?id=${data.id}`)}        /&gt;      &lt;/Space&gt;    ),  },];发布文章1. 基本结构搭建本节目标: 能够搭建发布文章页面的基本结构实现步骤  使用 Card、Form 组件搭建基本页面结构  创建样式文件，对样式做出调整代码实现pages/Publish/index.jsimport {  Card,  Breadcrumb,  Form,  Button,  Radio,  Input,  Upload,  Space,  Select,} from \"antd\";import { PlusOutlined } from \"@ant-design/icons\";import { Link } from \"react-router-dom\";import \"./index.scss\";const { Option } = Select;const Publish = () =&gt; {  return (    &lt;div className=\"publish\"&gt;      &lt;Card        title={          &lt;Breadcrumb separator=\"&gt;\"&gt;            &lt;Breadcrumb.Item&gt;              &lt;Link to=\"/home\"&gt;首页&lt;/Link&gt;            &lt;/Breadcrumb.Item&gt;            &lt;Breadcrumb.Item&gt;发布文章&lt;/Breadcrumb.Item&gt;          &lt;/Breadcrumb&gt;        }      &gt;        &lt;Form          labelCol=          wrapperCol=          initialValues=        &gt;          &lt;Form.Item            label=\"标题\"            name=\"title\"            rules={[{ required: true, message: \"请输入文章标题\" }]}          &gt;            &lt;Input placeholder=\"请输入文章标题\" style= /&gt;          &lt;/Form.Item&gt;          &lt;Form.Item            label=\"频道\"            name=\"channel_id\"            rules={[{ required: true, message: \"请选择文章频道\" }]}          &gt;            &lt;Select placeholder=\"请选择文章频道\" style=&gt;              &lt;Option value={0}&gt;推荐&lt;/Option&gt;            &lt;/Select&gt;          &lt;/Form.Item&gt;          &lt;Form.Item label=\"封面\"&gt;            &lt;Form.Item name=\"type\"&gt;              &lt;Radio.Group&gt;                &lt;Radio value={1}&gt;单图&lt;/Radio&gt;                &lt;Radio value={3}&gt;三图&lt;/Radio&gt;                &lt;Radio value={0}&gt;无图&lt;/Radio&gt;              &lt;/Radio.Group&gt;            &lt;/Form.Item&gt;            &lt;Upload              name=\"image\"              listType=\"picture-card\"              className=\"avatar-uploader\"              showUploadList            &gt;              &lt;div style=&gt;                &lt;PlusOutlined /&gt;              &lt;/div&gt;            &lt;/Upload&gt;          &lt;/Form.Item&gt;          &lt;Form.Item            label=\"内容\"            name=\"content\"            rules={[{ required: true, message: \"请输入文章内容\" }]}          &gt;&lt;/Form.Item&gt;          &lt;Form.Item wrapperCol=&gt;            &lt;Space&gt;              &lt;Button size=\"large\" type=\"primary\" htmlType=\"submit\"&gt;                发布文章              &lt;/Button&gt;            &lt;/Space&gt;          &lt;/Form.Item&gt;        &lt;/Form&gt;      &lt;/Card&gt;    &lt;/div&gt;  );};export default Publish;pages/Publish/index.scss.publish {  position: relative;}.ant-upload-list {  .ant-upload-list-picture-card-container,  .ant-upload-select {    width: 146px;    height: 146px;  }}2. 富文本编辑器本节目标: 能够安装并初始化富文本编辑器实现步骤  安装富文本编辑器：yarn add react-quill  导入富文本编辑器组件以及样式文件  渲染富文本编辑器组件  通过 Form 组件的 initialValues 为富文本编辑器设置初始值，否则会报错  调整富文本编辑器的样式代码实现pages/Publish/index.jsimport ReactQuill from \"react-quill\";import \"react-quill/dist/quill.snow.css\";const Publish = () =&gt; {  return (    // ...    &lt;Form      labelCol=      wrapperCol=      // 注意：此处需要为富文本编辑表示的 content 文章内容设置默认值      initialValues=&lt;!DOCTYPE html&gt;&lt;html lang=\"zh-CN\"  &gt;  &lt;!--  The Head--&gt;&lt;head&gt;  &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;  &lt;!-- Allow having a localized datetime different from the appearance language --&gt;                        &lt;!-- Begin Jekyll SEO tag v2.8.0 --&gt;&lt;meta name=\"generator\" content=\"Jekyll v4.2.2\" /&gt;&lt;meta property=\"og:title\" content=\"React 基础\" /&gt;&lt;meta property=\"og:locale\" content=\"zh_CN\" /&gt;&lt;meta name=\"description\" content=\"React 基础\" /&gt;&lt;meta property=\"og:description\" content=\"React 基础\" /&gt;&lt;link rel=\"canonical\" href=\"http://localhost:4000/blog.github.io/posts/reactBase/\" /&gt;&lt;meta property=\"og:url\" content=\"http://localhost:4000/blog.github.io/posts/reactBase/\" /&gt;&lt;meta property=\"og:site_name\" content=\"Cc\" /&gt;&lt;meta property=\"og:type\" content=\"article\" /&gt;&lt;meta property=\"article:published_time\" content=\"2022-02-12T22:58:36+08:00\" /&gt;&lt;meta name=\"twitter:card\" content=\"summary\" /&gt;&lt;meta property=\"twitter:title\" content=\"React 基础\" /&gt;&lt;script type=\"application/ld+json\"&gt;{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"dateModified\":\"2022-02-12T22:58:36+08:00\",\"datePublished\":\"2022-02-12T22:58:36+08:00\",\"description\":\"React 基础\",\"headline\":\"React 基础\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"http://localhost:4000/blog.github.io/posts/reactBase/\"},\"url\":\"http://localhost:4000/blog.github.io/posts/reactBase/\"}&lt;/script&gt;&lt;!-- End Jekyll SEO tag --&gt;    &lt;title&gt;React 基础 | Cc  &lt;/title&gt;  &lt;!--  The Favicons for Web, Android, Microsoft, and iOS (iPhone and iPad) Apps  Generated by: https://realfavicongenerator.net/--&gt;&lt;link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/blog.github.io/assets/img/favicons/apple-touch-icon.png\"&gt;&lt;link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/blog.github.io/assets/img/favicons/favicon-32x32.png\"&gt;&lt;link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/blog.github.io/assets/img/favicons/favicon-16x16.png\"&gt;&lt;link rel=\"manifest\" href=\"/blog.github.io/assets/img/favicons/site.webmanifest\"&gt;&lt;link rel=\"shortcut icon\" href=\"/blog.github.io/assets/img/favicons/favicon.ico\"&gt;&lt;meta name=\"apple-mobile-web-app-title\" content=\"Cc\"&gt;&lt;meta name=\"application-name\" content=\"Cc\"&gt;&lt;meta name=\"msapplication-TileColor\" content=\"#da532c\"&gt;&lt;meta name=\"msapplication-config\" content=\"/blog.github.io/assets/img/favicons/browserconfig.xml\"&gt;&lt;meta name=\"theme-color\" content=\"#ffffff\"&gt;            &lt;link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" &gt;      &lt;link rel=\"dns-prefetch\" href=\"https://fonts.googleapis.com\" &gt;          &lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin&gt;      &lt;link rel=\"dns-prefetch\" href=\"https://fonts.gstatic.com\" crossorigin&gt;          &lt;link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" &gt;      &lt;link rel=\"dns-prefetch\" href=\"https://fonts.googleapis.com\" &gt;          &lt;link rel=\"preconnect\" href=\"https://cdn.jsdelivr.net\" &gt;      &lt;link rel=\"dns-prefetch\" href=\"https://cdn.jsdelivr.net\" &gt;        &lt;link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Lato&amp;family=Source+Sans+Pro:wght@400;600;700;900&amp;display=swap\"&gt;    &lt;!-- GA --&gt;    &lt;!-- Bootstrap --&gt;  &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4/dist/css/bootstrap.min.css\"&gt;  &lt;!-- Font Awesome --&gt;  &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.11.2/css/all.min.css\"&gt;  &lt;link rel=\"stylesheet\" href=\"/blog.github.io/assets/css/style.css\"&gt;      &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/afeld/bootstrap-toc@1.0.1/dist/bootstrap-toc.min.css\"&gt;        &lt;!-- Manific Popup --&gt;    &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/magnific-popup@1/dist/magnific-popup.min.css\"&gt;    &lt;!-- JavaScript --&gt;  &lt;script src=\"https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js\"&gt;&lt;/script&gt;      &lt;!--  Switch the mode between dark and light.--&gt;&lt;script type=\"text/javascript\"&gt;  class ModeToggle {    static get MODE_KEY() { return \"mode\"; }    static get MODE_ATTR() { return \"data-mode\"; }    static get DARK_MODE() { return \"dark\"; }    static get LIGHT_MODE() { return \"light\"; }    static get ID() { return \"mode-toggle\"; }    constructor() {      if (this.hasMode) {        if (this.isDarkMode) {          if (!this.isSysDarkPrefer) {            this.setDark();          }        } else {          if (this.isSysDarkPrefer) {            this.setLight();          }        }      }      let self = this;      /* always follow the system prefers */      this.sysDarkPrefers.addEventListener(\"change\", () =&gt; {        if (self.hasMode) {          if (self.isDarkMode) {            if (!self.isSysDarkPrefer) {              self.setDark();            }          } else {            if (self.isSysDarkPrefer) {              self.setLight();            }          }          self.clearMode();        }        self.notify();      });    } /* constructor() */    get sysDarkPrefers() { return window.matchMedia(\"(prefers-color-scheme: dark)\"); }    get isSysDarkPrefer() { return this.sysDarkPrefers.matches; }    get isDarkMode() { return this.mode === ModeToggle.DARK_MODE; }    get isLightMode() { return this.mode === ModeToggle.LIGHT_MODE; }    get hasMode() { return this.mode != null; }    get mode() { return sessionStorage.getItem(ModeToggle.MODE_KEY); }    /* get the current mode on screen */    get modeStatus() {      if (this.isDarkMode        || (!this.hasMode &amp;&amp; this.isSysDarkPrefer)) {        return ModeToggle.DARK_MODE;      } else {        return ModeToggle.LIGHT_MODE;      }    }    setDark() {      $('html').attr(ModeToggle.MODE_ATTR, ModeToggle.DARK_MODE);      sessionStorage.setItem(ModeToggle.MODE_KEY, ModeToggle.DARK_MODE);    }    setLight() {      $('html').attr(ModeToggle.MODE_ATTR, ModeToggle.LIGHT_MODE);      sessionStorage.setItem(ModeToggle.MODE_KEY, ModeToggle.LIGHT_MODE);    }    clearMode() {      $('html').removeAttr(ModeToggle.MODE_ATTR);      sessionStorage.removeItem(ModeToggle.MODE_KEY);    }    /* Notify another plugins that the theme mode has changed */    notify() {      window.postMessage({        direction: ModeToggle.ID,        message: this.modeStatus      }, \"*\");    }  } /* ModeToggle */  const toggle = new ModeToggle();  function flipMode() {    if (toggle.hasMode) {      if (toggle.isSysDarkPrefer) {        if (toggle.isLightMode) {          toggle.clearMode();        } else {          toggle.setLight();        }      } else {        if (toggle.isDarkMode) {          toggle.clearMode();        } else {          toggle.setDark();        }      }    } else {      if (toggle.isSysDarkPrefer) {        toggle.setLight();      } else {        toggle.setDark();      }    }    toggle.notify();  } /* flipMode() */&lt;/script&gt;  &lt;/head&gt;  &lt;body data-spy=\"scroll\" data-target=\"#toc\" data-topbar-visible=\"true\"&gt;    &lt;!--  The Side Bar--&gt;&lt;div id=\"sidebar\" class=\"d-flex flex-column align-items-end\"&gt;  &lt;div class=\"profile-wrapper text-center\"&gt;    &lt;div id=\"avatar\"&gt;      &lt;a href=\"/blog.github.io/\" class=\"mx-auto\"&gt;                        &lt;img src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/commons/avatar.jpg\" alt=\"avatar\" onerror=\"this.style.display='none'\"&gt;              &lt;/a&gt;    &lt;/div&gt;    &lt;div class=\"site-title mt-3\"&gt;      &lt;a href=\"/blog.github.io/\"&gt;Cc&lt;/a&gt;    &lt;/div&gt;    &lt;div class=\"site-subtitle font-italic\"&gt;你好!&lt;/div&gt;  &lt;/div&gt;&lt;!-- .profile-wrapper --&gt;  &lt;ul class=\"w-100\"&gt;    &lt;!-- home --&gt;    &lt;li class=\"nav-item\"&gt;      &lt;a href=\"/blog.github.io/\" class=\"nav-link\"&gt;        &lt;i class=\"fa-fw fas fa-home ml-xl-3 mr-xl-3 unloaded\"&gt;&lt;/i&gt;        &lt;span&gt;首页&lt;/span&gt;      &lt;/a&gt;    &lt;/li&gt;    &lt;!-- the real tabs --&gt;        &lt;li class=\"nav-item\"&gt;      &lt;a href=\"/blog.github.io/categories/\" class=\"nav-link\"&gt;        &lt;i class=\"fa-fw fas fa-stream ml-xl-3 mr-xl-3 unloaded\"&gt;&lt;/i&gt;                &lt;span&gt;分类&lt;/span&gt;      &lt;/a&gt;    &lt;/li&gt; &lt;!-- .nav-item --&gt;        &lt;li class=\"nav-item\"&gt;      &lt;a href=\"/blog.github.io/tags/\" class=\"nav-link\"&gt;        &lt;i class=\"fa-fw fas fa-tag ml-xl-3 mr-xl-3 unloaded\"&gt;&lt;/i&gt;                &lt;span&gt;标签&lt;/span&gt;      &lt;/a&gt;    &lt;/li&gt; &lt;!-- .nav-item --&gt;        &lt;li class=\"nav-item\"&gt;      &lt;a href=\"/blog.github.io/archives/\" class=\"nav-link\"&gt;        &lt;i class=\"fa-fw fas fa-archive ml-xl-3 mr-xl-3 unloaded\"&gt;&lt;/i&gt;                &lt;span&gt;归档&lt;/span&gt;      &lt;/a&gt;    &lt;/li&gt; &lt;!-- .nav-item --&gt;        &lt;li class=\"nav-item\"&gt;      &lt;a href=\"/blog.github.io/about/\" class=\"nav-link\"&gt;        &lt;i class=\"fa-fw  ml-xl-3 mr-xl-3 unloaded\"&gt;&lt;/i&gt;                &lt;span&gt;关于&lt;/span&gt;      &lt;/a&gt;    &lt;/li&gt; &lt;!-- .nav-item --&gt;      &lt;/ul&gt; &lt;!-- ul.nav.flex-column --&gt;  &lt;div class=\"sidebar-bottom mt-auto d-flex flex-wrap justify-content-center align-items-center\"&gt;        &lt;button class=\"mode-toggle btn\" aria-label=\"Switch Mode\"&gt;      &lt;i class=\"fas fa-adjust\"&gt;&lt;/i&gt;    &lt;/button&gt;        &lt;span class=\"icon-border\"&gt;&lt;/span&gt;                        &lt;a href=\"https://github.com/Cc360428\" aria-label=\"github\" target=\"_blank\" rel=\"noopener\" &gt;      &lt;i class=\"fab fa-github\"&gt;&lt;/i&gt;    &lt;/a&gt;                    &lt;a href=\"https://twitter.com/\" aria-label=\"twitter\" target=\"_blank\" rel=\"noopener\" &gt;      &lt;i class=\"fab fa-twitter\"&gt;&lt;/i&gt;    &lt;/a&gt;                    &lt;a href=\"    javascript:location.href = 'mailto:' + ['li_chao_cheng','163.com'].join('@')\" aria-label=\"email\" &gt;      &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt;    &lt;/a&gt;                    &lt;a href=\"/blog.github.io/feed.xml\" aria-label=\"rss\" &gt;      &lt;i class=\"fas fa-rss\"&gt;&lt;/i&gt;    &lt;/a&gt;          &lt;/div&gt; &lt;!-- .sidebar-bottom --&gt;&lt;/div&gt;&lt;!-- #sidebar --&gt;    &lt;!--  The Top Bar--&gt;&lt;div id=\"topbar-wrapper\" class=\"row justify-content-center\"&gt;  &lt;div id=\"topbar\" class=\"col-11 d-flex h-100 align-items-center justify-content-between\"&gt;    &lt;span id=\"breadcrumb\"&gt;                                &lt;span&gt;            &lt;a href=\"/blog.github.io/\"&gt;              首页            &lt;/a&gt;          &lt;/span&gt;                                                          &lt;span&gt;React 基础&lt;/span&gt;                                &lt;/span&gt;&lt;!-- endof #breadcrumb --&gt;    &lt;i id=\"sidebar-trigger\" class=\"fas fa-bars fa-fw\"&gt;&lt;/i&gt;    &lt;div id=\"topbar-title\"&gt;      文章    &lt;/div&gt;    &lt;i id=\"search-trigger\" class=\"fas fa-search fa-fw\"&gt;&lt;/i&gt;    &lt;span id=\"search-wrapper\" class=\"align-items-center\"&gt;      &lt;i class=\"fas fa-search fa-fw\"&gt;&lt;/i&gt;      &lt;input class=\"form-control\" id=\"search-input\" type=\"search\"        aria-label=\"search\" autocomplete=\"off\" placeholder=\"搜索...\"&gt;    &lt;/span&gt;    &lt;span id=\"search-cancel\" &gt;取消&lt;/span&gt;  &lt;/div&gt;&lt;/div&gt;    &lt;div id=\"main-wrapper\"&gt;      &lt;div id=\"main\"&gt;        &lt;div class=\"row\"&gt;  &lt;!-- core --&gt;  &lt;div id=\"core-wrapper\" class=\"col-12 col-lg-11 col-xl-8\"&gt;    &lt;div class=\"post pl-1 pr-1 pl-sm-2 pr-sm-2 pl-md-4 pr-md-4\"&gt;                            &lt;!--  Refactor the HTML structure.--&gt;&lt;!--  In order to allow a wide table to scroll horizontally,  we suround the markdown table with `&lt;div class=\"table-wrapper\"&gt;` and `&lt;/div&gt;`--&gt;&lt;!--  Fixed kramdown code highlight rendering:  https://github.com/penibelst/jekyll-compress-html/issues/101  https://github.com/penibelst/jekyll-compress-html/issues/71#issuecomment-188144901--&gt;&lt;!-- Add attribute 'hide-bullet' to the checkbox list --&gt;&lt;!-- images --&gt;                                                                                                                                                                &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                            &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;                                                                                                                                                    &lt;!-- Add CDN URL --&gt;                &lt;!-- Add image path --&gt;                                    &lt;!-- lazy-load images &lt;https://github.com/ApoorvSaxena/lozad.js#usage&gt; --&gt;              &lt;!-- Add SVG placehoder to prevent layout reflow --&gt;        &lt;!-- Bypass the HTML-proofer test --&gt;            &lt;!-- Add header for code snippets --&gt;&lt;!-- Create heading anchors --&gtlt;!-- Wrap prompt element of blockquote with the &lt;div&gt; tag --&gt;&lt;!-- return --&gt;&lt;h1 data-toc-skip&gt;React 基础&lt;/h1&gt;&lt;div class=\"post-meta text-muted\"&gt;    &lt;!-- published date --&gt;    &lt;span&gt;      发表于      &lt;!--  Date format snippet  See: ${JS_ROOT}/utils/locale-dateime.js--&gt;&lt;em class=\"\"    data-ts=\"1644677916\"    data-df=\"YYYY-MM-DD\"    data-toggle=\"tooltip\" data-placement=\"bottom\"&gt;  2022-02-12&lt;/em&gt;    &lt;/span&gt;    &lt;!-- lastmod date --&gt;        &lt;div class=\"d-flex justify-content-between\"&gt;    &lt;!-- author --&gt;    &lt;span&gt;                        作者      &lt;em&gt;                  &lt;a href=\"https://Cc360428.gitee.io/cc/\"&gt;Cc&lt;/a&gt;              &lt;/em&gt;    &lt;/span&gt;    &lt;div&gt;      &lt;!-- page views --&gt;            &lt;!-- read time --&gt;      &lt;!--  Calculate the post's reading time, and display the word count in tooltip --&gt;&lt;!-- words per minute  --&gt;&lt;!-- return element --&gt;&lt;span class=\"readtime\" data-toggle=\"tooltip\" data-placement=\"bottom\"  title=\"11339 字\"&gt;  &lt;em&gt;62 分钟&lt;/em&gt;阅读&lt;/span&gt;    &lt;/div&gt;  &lt;/div&gt; &lt;!-- .d-flex --&gt;&lt;/div&gt; &lt;!-- .post-meta --&gt;&lt;div class=\"post-content\"&gt;  &lt;h1 id=\"react-基础\"&gt;React 基础&lt;/h1&gt;&lt;h2 id=\"react-介绍\"&gt;&lt;span class=\"mr-2\"&gt;React 介绍&lt;/span&gt;&lt;a href=\"#react-介绍\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 了解什么是 React 以及它的特点&lt;/p&gt;&lt;p&gt;&lt;strong&gt;React 是什么&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ 一个专注于构建用户界面的 JavaScript 库，和 vue 和 angular 并称前端三大框架，不夸张的说，react 引领了很多新思想，世界范围内是最流行的 js 前端框架，最近发布了 18 版本，加入了很多新特性&lt;/p&gt;&lt;p&gt;​ React 英文文档（https://reactjs.org/）&lt;/p&gt;&lt;p&gt;​ React 中文文档 （https://zh-hans.reactjs.org/）&lt;/p&gt;&lt;p&gt;​ React 新文档 （https://beta.reactjs.org/）（开发中….）&lt;/p&gt;&lt;p&gt;&lt;strong&gt;React 有什么特点&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;    &lt;p&gt;声明式 UI（JSX）&lt;/p&gt;    &lt;p&gt;写 UI 就和写普通的 HTML 一样，抛弃命令式的繁琐实现&lt;/p&gt;    &lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/compare.png\" alt=\"compare\" data-proofer-ignore&gt;&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;组件化&lt;/p&gt;    &lt;p&gt;组件是 react 中最重要的内容，组件可以通过搭积木的方式拼成一个完整的页面，通过组件的抽象可以增加复用能力和提高可维护性&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;一次学习，矿平台编写&lt;/p&gt;    &lt;p&gt;react 既可以开发 web 应用也可以使用同样的语法开发原生应用（react-native），比如安卓和 ios 应用，甚至可以使用 react 开发 VR 应用，想象力空间十足，react 更像是一个 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;元框架&lt;/code&gt; 为各种领域赋能&lt;/p&gt;  &lt;/li&gt;&lt;/ol&gt;&lt;h2 id=\"环境初始化\"&gt;&lt;span class=\"mr-2\"&gt;环境初始化&lt;/span&gt;&lt;a href=\"#环境初始化\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 能够独立使用 React 脚手架创建一个 react 项目&lt;/p&gt;&lt;h3 id=\"1-使用脚手架创建项目\"&gt;&lt;span class=\"mr-2\"&gt;1. 使用脚手架创建项目&lt;/span&gt;&lt;a href=\"#1-使用脚手架创建项目\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/create-react.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;打开命令行窗口&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;执行命令&lt;/p&gt;    &lt;div class=\"language-bash highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Shell\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;npx create-react-app react-basic&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;p&gt;说明：&lt;/p&gt;    &lt;ol&gt;      &lt;li&gt;npx create-react-app 是固定命令，&lt;code class=\"language-plaintext highlighter-rouge\"&gt;create-react-app&lt;/code&gt;是 React 脚手架的名称&lt;/li&gt;      &lt;li&gt;react-basic 表示项目名称，可以自定义，保持语义化&lt;/li&gt;      &lt;li&gt;npx 命令会帮助我们临时安装 create-react-app 包，然后初始化项目完成之后会自自动删掉，所以不需要全局安装 create-react-app&lt;/li&gt;    &lt;/ol&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;启动项目&lt;/p&gt;    &lt;div class=\"language-bash highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Shell\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;123&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;yarn startornpm start&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h3 id=\"2-项目目录说明调整\"&gt;&lt;span class=\"mr-2\"&gt;2. 项目目录说明调整&lt;/span&gt;&lt;a href=\"#2-项目目录说明调整\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;目录说明&lt;/p&gt;    &lt;ol&gt;      &lt;li&gt;        &lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;src&lt;/code&gt; 目录是我们写代码进行项目开发的目录&lt;/p&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;package.json&lt;/code&gt; 中俩个核心库：react 、react-dom&lt;/p&gt;      &lt;/li&gt;    &lt;/ol&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;目录调整&lt;/p&gt;    &lt;ol&gt;      &lt;li&gt;删除 src 目录下自带的所有文件，只保留 app.js 根组件和 index.js&lt;/li&gt;      &lt;li&gt;创建 index.js 文件作为项目的入口文件，在这个文件中书写 react 代码即可&lt;/li&gt;    &lt;/ol&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;入口文件说明&lt;/p&gt;    &lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;123456789101112&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"nx\"&gt;ReactDOM&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react-dom&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;./index.css&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"c1\"&gt;// 引入根组件App&lt;/span&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;./App&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"c1\"&gt;// 通过调用ReactDOM的render方法渲染App根组件到id为root的dom节点上&lt;/span&gt;&lt;span class=\"nx\"&gt;ReactDOM&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;render&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;  &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nc\"&gt;StrictMode&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;App&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nc\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nc\"&gt;StrictMode&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;,&lt;/span&gt;  &lt;span class=\"nb\"&gt;document&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;getElementById&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;root&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h2 id=\"jsx-基础\"&gt;&lt;span class=\"mr-2\"&gt;JSX 基础&lt;/span&gt;&lt;a href=\"#jsx-基础\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=\"1-jsx-介绍\"&gt;&lt;span class=\"mr-2\"&gt;1. JSX 介绍&lt;/span&gt;&lt;a href=\"#1-jsx-介绍\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 能够理解什么是 JSX，JSX 的底层是什么&lt;/p&gt;&lt;p&gt;概念：JSX 是 JavaScript XML（HTML）的缩写，表示在 JS 代码中书写 HTML 结构&lt;/p&gt;&lt;p&gt;作用：在 React 中创建 HTML 结构（页面 UI 结构）&lt;/p&gt;&lt;p&gt;优势：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;采用类似于 HTML 的语法，降低学习成本，会 HTML 就会 JSX&lt;/li&gt;  &lt;li&gt;充分利用 JS 自身的可编程能力创建 HTML 结构&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;注意：JSX 并不是标准的 JS 语法，是 JS 的语法扩展，浏览器默认是不识别的，脚手架中内置的 &lt;a href=\"@babel/plugin-transform-react-jsx\"&gt;@babel/plugin-transform-react-jsx&lt;/a&gt; 包，用来解析该语法&lt;/p&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/jsx02.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;h3 id=\"2-jsx-中使用-js-表达式\"&gt;&lt;span class=\"mr-2\"&gt;2. JSX 中使用 js 表达式&lt;/span&gt;&lt;a href=\"#2-jsx-中使用-js-表达式\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 能够在 JSX 中使用表达式&lt;/p&gt;&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;{ JS 表达式 }&lt;/code&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;123&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"nx\"&gt;name&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;柴柴&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"o\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nx\"&gt;h1&lt;/span&gt;&lt;span class=\"o\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"nx\"&gt;你好&lt;/span&gt;&lt;span class=\"err\"&gt;，&lt;/span&gt;&lt;span class=\"nx\"&gt;我叫&lt;/span&gt;&lt;span class=\"p\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;name&lt;/span&gt;&lt;span class=\"p\"&gt;}&amp;lt;&lt;/span&gt;&lt;span class=\"err\"&gt;/&lt;/span&gt;&lt;span class=\"na\"&gt;h1&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;   //    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;h1&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;你好,我叫柴柴&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;h1&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;可以使用的表达式&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;字符串、数值、布尔值、null、undefined、object（ [] / {} ）&lt;/li&gt;  &lt;li&gt;1 + 2、’abc’.split(‘’)、[‘a’, ‘b’].join(‘-‘)&lt;/li&gt;  &lt;li&gt;fn()&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;特别注意&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ if 语句/ switch-case 语句/ 变量声明语句，这些叫做语句，不是表达式，不能出现在 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;{}&lt;/code&gt; 中！！&lt;/p&gt;&lt;h3 id=\"3-jsx-列表渲染\"&gt;&lt;span class=\"mr-2\"&gt;3. JSX 列表渲染&lt;/span&gt;&lt;a href=\"#3-jsx-列表渲染\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 能够在 JSX 中实现列表渲染&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;页面的构建离不开重复的列表结构，比如歌曲列表，商品列表等，我们知道 vue 中用的是 v-for，react 这边如何实现呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;实现：使用数组的&lt;code class=\"language-plaintext highlighter-rouge\"&gt;map&lt;/code&gt; 方法&lt;/p&gt;&lt;p&gt;案例：&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1234567891011121314151617181920&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"c1\"&gt;// 来个列表&lt;/span&gt;&lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"nx\"&gt;songs&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;  &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"na\"&gt;id&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mi\"&gt;1&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"na\"&gt;name&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;痴心绝对&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt; &lt;span class=\"p\"&gt;},&lt;/span&gt;  &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"na\"&gt;id&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mi\"&gt;2&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"na\"&gt;name&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;像我这样的人&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt; &lt;span class=\"p\"&gt;},&lt;/span&gt;  &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"na\"&gt;id&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mi\"&gt;3&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"na\"&gt;name&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;南山南&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt; &lt;span class=\"p\"&gt;},&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt; &lt;span class=\"na\"&gt;className&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"s\"&gt;\"App\"&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;ul&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;        &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;songs&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;map&lt;/span&gt;&lt;span class=\"p\"&gt;((&lt;/span&gt;&lt;span class=\"nx\"&gt;item&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;          &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;li&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;item&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;name&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;li&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;        &lt;span class=\"p\"&gt;))&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;ul&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;注意点：需要为遍历项添加 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;key&lt;/code&gt; 属性&lt;/p&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/jsx03.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;key 在 HTML 结构中是看不到的，是 React 内部用来进行性能优化时使用&lt;/li&gt;  &lt;li&gt;key 在当前列表中要唯一的字符串或者数值（String/Number）&lt;/li&gt;  &lt;li&gt;如果列表中有像 id 这种的唯一值，就用 id 来作为 key 值&lt;/li&gt;  &lt;li&gt;如果列表中没有像 id 这种的唯一值，就可以使用 index（下标）来作为 key 值&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=\"4-jsx-条件渲染\"&gt;&lt;span class=\"mr-2\"&gt;4. JSX 条件渲染&lt;/span&gt;&lt;a href=\"#4-jsx-条件渲染\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 能够在 JSX 中实现条件渲染&lt;/p&gt;&lt;p&gt;作用：根据是否满足条件生成 HTML 结构，比如 Loading 效果&lt;/p&gt;&lt;p&gt;实现：可以使用 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;三元运算符&lt;/code&gt; 或 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;逻辑与(&amp;amp;&amp;amp;)运算符&lt;/code&gt;&lt;/p&gt;&lt;p&gt;案例：&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910111213&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"c1\"&gt;// 来个布尔值&lt;/span&gt;&lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"nx\"&gt;flag&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt; &lt;span class=\"na\"&gt;className&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"s\"&gt;\"App\"&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"cm\"&gt;/* 条件渲染字符串 */&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;      &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;flag&lt;/span&gt; &lt;span class=\"p\"&gt;?&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react真有趣&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt; &lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;vue真有趣&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;      &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"cm\"&gt;/* 条件渲染标签/组件 */&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;      &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;flag&lt;/span&gt; &lt;span class=\"p\"&gt;?&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;span&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;this is span&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;span&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"kc\"&gt;null&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=\"5-jsx-样式处理\"&gt;&lt;span class=\"mr-2\"&gt;5. JSX 样式处理&lt;/span&gt;&lt;a href=\"#5-jsx-样式处理\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 能够在 JSX 中实现 css 样式处理&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;行内样式 - style&lt;/p&gt;    &lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;123456789&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt; &lt;span class=\"na\"&gt;className&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"s\"&gt;\"App\"&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt; &lt;span class=\"na\"&gt;style&lt;/span&gt;&lt;span class=\"p\"&gt;=&amp;gt;&lt;/span&gt;this is a div&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;行内样式 - style - 更优写法&lt;/p&gt;    &lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910111213&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"nx\"&gt;styleObj&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"na\"&gt;color&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"nx\"&gt;red&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt; &lt;span class=\"na\"&gt;className&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"s\"&gt;\"App\"&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt; &lt;span class=\"na\"&gt;style&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;styleObj&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;this is a div&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;类名 - className（推荐）&lt;/p&gt;    &lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;app.css&lt;/code&gt;&lt;/p&gt;    &lt;div class=\"language-css highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"CSS\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1234&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"nc\"&gt;.title&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"nl\"&gt;font-size&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"m\"&gt;30px&lt;/span&gt;&lt;span class=\"p\"&gt;;&lt;/span&gt;  &lt;span class=\"nl\"&gt;color&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"no\"&gt;blue&lt;/span&gt;&lt;span class=\"p\"&gt;;&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;app.js&lt;/code&gt;&lt;/p&gt;    &lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;./app.css&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt; &lt;span class=\"na\"&gt;className&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"s\"&gt;\"App\"&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt; &lt;span class=\"na\"&gt;className&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"s\"&gt;\"title\"&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;this is a div&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;类名 - className - 动态类名控制&lt;/p&gt;    &lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;./app.css&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"nx\"&gt;showTitle&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt; &lt;span class=\"na\"&gt;className&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"s\"&gt;\"App\"&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt; &lt;span class=\"na\"&gt;className&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;showTitle&lt;/span&gt; &lt;span class=\"p\"&gt;?&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;title&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt; &lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;''&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;this is a div&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h3 id=\"6-jsx-注意事项\"&gt;&lt;span class=\"mr-2\"&gt;6. JSX 注意事项&lt;/span&gt;&lt;a href=\"#6-jsx-注意事项\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 掌握 JSX 在实际应用时的注意事项&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;JSX 必须有一个根节点，如果没有根节点，可以使用&lt;code class=\"language-plaintext highlighter-rouge\"&gt;&amp;lt;&amp;gt;&amp;lt;/&amp;gt;&lt;/code&gt;（幽灵节点）替代&lt;/li&gt;  &lt;li&gt;所有标签必须形成闭合，成对闭合或者自闭合都可以&lt;/li&gt;  &lt;li&gt;JSX 中的语法更加贴近 JS 语法，属性名采用驼峰命名法 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;class -&amp;gt; className&lt;/code&gt; &lt;code class=\"language-plaintext highlighter-rouge\"&gt;for -&amp;gt; htmlFor&lt;/code&gt;&lt;/li&gt;  &lt;li&gt;JSX 支持多行（换行），如果需要换行，需使用&lt;code class=\"language-plaintext highlighter-rouge\"&gt;()&lt;/code&gt; 包裹，防止 bug 出现&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=\"格式化配置\"&gt;&lt;span class=\"mr-2\"&gt;格式化配置&lt;/span&gt;&lt;a href=\"#格式化配置\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 基于 vscode 配置格式化工具，提高开发效率&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;    &lt;p&gt;安装 vsCode prettier 插件&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;修改配置文件 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;setting.json&lt;/code&gt;&lt;/p&gt;    &lt;div class=\"language-json highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"JSON\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"p\"&gt;{&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"git.enableSmartCommit\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;修改注释颜色&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"editor.tokenColorCustomizations\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"p\"&gt;{&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"comments\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"p\"&gt;{&lt;/span&gt;&lt;span class=\"w\"&gt;      &lt;/span&gt;&lt;span class=\"nl\"&gt;\"fontStyle\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"bold\"&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;      &lt;/span&gt;&lt;span class=\"nl\"&gt;\"foreground\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"#82e0aa\"&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"p\"&gt;},&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;配置文件类型识别&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"files.associations\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"p\"&gt;{&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"*.js\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"javascript\"&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"*.json\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"jsonc\"&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"*.cjson\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"jsonc\"&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"*.wxss\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"css\"&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"*.wxs\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"javascript\"&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"p\"&gt;},&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"extensions.ignoreRecommendations\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;false&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"files.exclude\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"p\"&gt;{&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"**/.DS_Store\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"**/.git\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"**/.hg\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"**/.svn\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"**/CVS\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"**/node_modules\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;false&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"**/tmp\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"p\"&gt;},&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"nl\"&gt;\"javascript.implicitProjectConfig.experimentalDecorators\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"explorer.confirmDragAndDrop\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;false&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"typescript.updateImportsOnFileMove.enabled\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"prompt\"&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"git.confirmSync\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;false&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"editor.tabSize\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"mi\"&gt;2&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"editor.fontWeight\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"500\"&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"[json]\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"p\"&gt;{},&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"editor.tabCompletion\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"on\"&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"vsicons.projectDetection.autoReload\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"editor.fontFamily\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"Monaco, 'Courier New', monospace, Meslo LG M for Powerline\"&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"[html]\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"p\"&gt;{&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"editor.defaultFormatter\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"vscode.html-language-features\"&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"p\"&gt;},&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"editor.fontSize\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"mi\"&gt;16&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"debug.console.fontSize\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"mi\"&gt;14&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"vsicons.dontShowNewVersionMessage\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"editor.minimap.enabled\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"emmet.extensionsPath\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"s2\"&gt;\"\"&lt;/span&gt;&lt;span class=\"p\"&gt;],&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;vue&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;eslint&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;start&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;保存时自动格式化代码&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"editor.formatOnSave\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;eslint配置项，保存时自动修复错误&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"editor.codeActionsOnSave\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"p\"&gt;{&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"source.fixAll\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"p\"&gt;},&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"vetur.ignoreProjectWarning\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;让vetur使用vs自带的js格式化工具&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;uni-app和vue&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;项目使用&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"vetur.format.defaultFormatter.js\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"vscode-typescript\"&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"javascript.format.semicolons\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"remove\"&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;指定&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;*.vue&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;文件的格式化工具为vetur&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"[vue]\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"p\"&gt;{&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"editor.defaultFormatter\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"octref.vetur\"&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"p\"&gt;},&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;指定&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;*.js&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;文件的格式化工具为vscode自带&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"[javascript]\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"p\"&gt;{&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"editor.defaultFormatter\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"vscode.typescript-language-features\"&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"p\"&gt;},&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;默认使用prettier格式化支持的文件&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"editor.defaultFormatter\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"esbenp.prettier-vscode\"&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"prettier.jsxBracketSameLine\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;函数前面加个空格&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"javascript.format.insertSpaceBeforeFunctionParenthesis\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"prettier.singleQuote\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"prettier.semi\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;false&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;eslint&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;end&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;react&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;当按tab键的时候，会自动提示&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"emmet.triggerExpansionOnTab\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"emmet.showAbbreviationSuggestions\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"emmet.includeLanguages\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"p\"&gt;{&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;jsx的提示&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"javascript\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"javascriptreact\"&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"vue-html\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"html\"&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"vue\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"html\"&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"wxml\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"html\"&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"p\"&gt;},&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;end&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"[jsonc]\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"p\"&gt;{&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"editor.defaultFormatter\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"vscode.json-language-features\"&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"p\"&gt;},&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"err\"&gt;//&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"err\"&gt;@路径提示&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"path-intellisense.mappings\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"p\"&gt;{&lt;/span&gt;&lt;span class=\"w\"&gt;    &lt;/span&gt;&lt;span class=\"nl\"&gt;\"@\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"${workspaceRoot}/src\"&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"p\"&gt;},&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"security.workspace.trust.untrustedFiles\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"s2\"&gt;\"open\"&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"git.ignoreMissingGitWarning\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"w\"&gt;  &lt;/span&gt;&lt;span class=\"nl\"&gt;\"window.zoomLevel\"&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt;&lt;span class=\"w\"&gt; &lt;/span&gt;&lt;span class=\"mi\"&gt;1&lt;/span&gt;&lt;span class=\"w\"&gt;&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"w\"&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;&lt;/ol&gt;&lt;h2 id=\"阶段小练习\"&gt;&lt;span class=\"mr-2\"&gt;阶段小练习&lt;/span&gt;&lt;a href=\"#阶段小练习\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/jsx-demo.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;p&gt;练习说明&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;    &lt;p&gt;拉取准备好的项目模块到本地 ，安装依赖，run 起来项目&lt;/p&gt;    &lt;p&gt;https://gitee.com/react-course-series/react-jsx-demo&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;按照图示，完成 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;评论数据渲染&lt;/code&gt; &lt;code class=\"language-plaintext highlighter-rouge\"&gt;tab内容渲染&lt;/code&gt; &lt;code class=\"language-plaintext highlighter-rouge\"&gt;评论列表点赞和点踩&lt;/code&gt; 三个视图渲染&lt;/p&gt;  &lt;/li&gt;&lt;/ol&gt;&lt;h1 id=\"react-组件基础\"&gt;React 组件基础&lt;/h1&gt;&lt;h2 id=\"组件概念\"&gt;&lt;span class=\"mr-2\"&gt;组件概念&lt;/span&gt;&lt;a href=\"#组件概念\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/components.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;h2 id=\"函数组件\"&gt;&lt;span class=\"mr-2\"&gt;函数组件&lt;/span&gt;&lt;a href=\"#函数组件\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 能够独立使用函数完成 react 组件的创建和渲染&lt;/p&gt;&lt;p&gt;&lt;strong&gt;概念&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;使用 JS 的函数（或箭头函数）创建的组件，就叫做&lt;code class=\"language-plaintext highlighter-rouge\"&gt;函数组件&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;组件定义与渲染&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910111213141516&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"c1\"&gt;// 定义函数组件&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;HelloFn&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;这是我的第一个函数组件!&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"c1\"&gt;// 定义类组件&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt; &lt;span class=\"na\"&gt;className&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"s\"&gt;\"App\"&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"cm\"&gt;/* 渲染函数组件 */&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;HelloFn&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;HelloFn&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nc\"&gt;HelloFn&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;约定说明&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;组件的名称&lt;strong&gt;必须首字母大写&lt;/strong&gt;，react 内部会根据这个来判断是组件还是普通的 HTML 标签&lt;/li&gt;  &lt;li&gt;    &lt;p&gt;函数组件&lt;strong&gt;必须有返回值&lt;/strong&gt;，表示该组件的 UI 结构；如果不需要渲染任何内容，则返回 null&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;组件就像 HTML 标签一样可以被渲染到页面中。组件表示的是一段结构内容，对于函数组件来说，渲染的内容是函数的&lt;strong&gt;返回值&lt;/strong&gt;就是对应的内容&lt;/li&gt;  &lt;li&gt;使用函数名称作为组件标签名称，可以成对出现也可以自闭合&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=\"类组件\"&gt;&lt;span class=\"mr-2\"&gt;类组件&lt;/span&gt;&lt;a href=\"#类组件\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 能够独立完成类组件的创建和渲染&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;使用 ES6 的 class 创建的组件，叫做类（class）组件&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;组件定义与渲染&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1234567891011121314151617181920&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"c1\"&gt;// 引入React&lt;/span&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"c1\"&gt;// 定义类组件&lt;/span&gt;&lt;span class=\"kd\"&gt;class&lt;/span&gt; &lt;span class=\"nx\"&gt;HelloC&lt;/span&gt; &lt;span class=\"kd\"&gt;extends&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;Component&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"nx\"&gt;render&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;这是我的第一个类组件!&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt; &lt;span class=\"na\"&gt;className&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"s\"&gt;\"App\"&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"cm\"&gt;/* 渲染类组件 */&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;HelloC&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;HelloC&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nc\"&gt;HelloC&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;约定说明&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;    &lt;p&gt;&lt;strong&gt;类名称也必须以大写字母开头&lt;/strong&gt;&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;类组件应该继承 React.Component 父类，从而使用父类中提供的方法或属性&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;类组件必须提供 render 方法&lt;strong&gt;render 方法必须有返回值，表示该组件的 UI 结构&lt;/strong&gt;&lt;/p&gt;  &lt;/li&gt;&lt;/ol&gt;&lt;h2 id=\"事件绑定\"&gt;&lt;span class=\"mr-2\"&gt;事件绑定&lt;/span&gt;&lt;a href=\"#事件绑定\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 能够独立绑定任何事件并能获取到事件对象 e&lt;/p&gt;&lt;h3 id=\"1-如何绑定事件\"&gt;&lt;span class=\"mr-2\"&gt;1. 如何绑定事件&lt;/span&gt;&lt;a href=\"#1-如何绑定事件\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;语法&lt;/p&gt;    &lt;p&gt;on + 事件名称 = { 事件处理程序 } ，比如：&lt;code class=\"language-plaintext highlighter-rouge\"&gt;&amp;lt;div onClick={()=&amp;gt;{}}&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;注意点&lt;/p&gt;    &lt;p&gt;react 事件采用驼峰命名法，比如：onMouseEnter、onFocus&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;样例&lt;/p&gt;    &lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910111213141516171819202122232425&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"c1\"&gt;// 函数组件&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;HelloFn&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 定义事件回调函数&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"nx\"&gt;clickHandler&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;事件被触发了&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"c1\"&gt;// 绑定事件&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt; &lt;span class=\"na\"&gt;onClick&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;clickHandler&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;click me!&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"c1\"&gt;// 类组件&lt;/span&gt;&lt;span class=\"kd\"&gt;class&lt;/span&gt; &lt;span class=\"nx\"&gt;HelloC&lt;/span&gt; &lt;span class=\"kd\"&gt;extends&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;Component&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 定义事件回调函数&lt;/span&gt;  &lt;span class=\"nx\"&gt;clickHandler&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;事件被触发了&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"nx\"&gt;render&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;      &lt;span class=\"c1\"&gt;// 绑定事件&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt; &lt;span class=\"na\"&gt;onClick&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;clickHandler&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;click me!&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h3 id=\"2-获取事件对象\"&gt;&lt;span class=\"mr-2\"&gt;2. 获取事件对象&lt;/span&gt;&lt;a href=\"#2-获取事件对象\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;通过事件处理程序的参数获取事件对象 e&lt;/p&gt;    &lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1234567891011121314&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"c1\"&gt;// 函数组件&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;HelloFn&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 定义事件回调函数&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"nx\"&gt;clickHandler&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;e&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"nx\"&gt;e&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;preventDefault&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt;    &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;事件被触发了&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;e&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"c1\"&gt;// 绑定事件&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;a&lt;/span&gt; &lt;span class=\"na\"&gt;href&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"s\"&gt;\"http://www.baidu.com/\"&lt;/span&gt; &lt;span class=\"na\"&gt;onClick&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;clickHandler&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      百度    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;a&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h2 id=\"组件状态\"&gt;&lt;span class=\"mr-2\"&gt;组件状态&lt;/span&gt;&lt;a href=\"#组件状态\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 能够为组件添加状态和修改状态的值&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;一个前提：在 react hook 出来之前，函数式组件是没有自己的状态的，所以我们统一通过类组件来讲解&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/state-update.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;h3 id=\"1-初始化状态\"&gt;&lt;span class=\"mr-2\"&gt;1. 初始化状态&lt;/span&gt;&lt;a href=\"#1-初始化状态\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;通过 class 的实例属性 state 来初始化&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;state 的值是一个对象结构，表示一个组件可以有多个数据状态&lt;/p&gt;    &lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;123456789&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"kd\"&gt;class&lt;/span&gt; &lt;span class=\"nx\"&gt;Counter&lt;/span&gt; &lt;span class=\"kd\"&gt;extends&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;Component&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 初始化状态&lt;/span&gt;  &lt;span class=\"nx\"&gt;state&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"na\"&gt;count&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mi\"&gt;0&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"nx\"&gt;render&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;计数器&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h3 id=\"2-读取状态\"&gt;&lt;span class=\"mr-2\"&gt;2. 读取状态&lt;/span&gt;&lt;a href=\"#2-读取状态\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;通过 this.state 来获取状态&lt;/p&gt;    &lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"kd\"&gt;class&lt;/span&gt; &lt;span class=\"nx\"&gt;Counter&lt;/span&gt; &lt;span class=\"kd\"&gt;extends&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;Component&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 初始化状态&lt;/span&gt;  &lt;span class=\"nx\"&gt;state&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"na\"&gt;count&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mi\"&gt;0&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"nx\"&gt;render&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"c1\"&gt;// 读取状态&lt;/span&gt;    &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;计数器&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h3 id=\"3-修改状态\"&gt;&lt;span class=\"mr-2\"&gt;3. 修改状态&lt;/span&gt;&lt;a href=\"#3-修改状态\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;语法&lt;/p&gt;    &lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;this.setState({ 要修改的部分数据 })&lt;/code&gt;&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;setState 方法作用&lt;/p&gt;    &lt;ol&gt;      &lt;li&gt;修改 state 中的数据状态&lt;/li&gt;      &lt;li&gt;更新 UI&lt;/li&gt;    &lt;/ol&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;思想&lt;/p&gt;    &lt;p&gt;​ 数据驱动视图，也就是只要修改数据状态，那么页面就会自动刷新，无需手动操作 dom&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;注意事项&lt;/p&gt;    &lt;p&gt;​ &lt;strong&gt;不要直接修改 state 中的值，必须通过 setState 方法进行修改&lt;/strong&gt;&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910111213141516&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"kd\"&gt;class&lt;/span&gt; &lt;span class=\"nx\"&gt;Counter&lt;/span&gt; &lt;span class=\"kd\"&gt;extends&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;Component&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 定义数据&lt;/span&gt;  &lt;span class=\"nx\"&gt;state&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"na\"&gt;count&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mi\"&gt;0&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 定义修改数据的方法&lt;/span&gt;  &lt;span class=\"nx\"&gt;setCount&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;setState&lt;/span&gt;&lt;span class=\"p\"&gt;({&lt;/span&gt;      &lt;span class=\"na\"&gt;count&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt; &lt;span class=\"o\"&gt;+&lt;/span&gt; &lt;span class=\"mi\"&gt;1&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;    &lt;span class=\"p\"&gt;})&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 使用数据 并绑定事件&lt;/span&gt;  &lt;span class=\"nx\"&gt;render&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt; &lt;span class=\"na\"&gt;onClick&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;setCount&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=\"this-问题说明\"&gt;&lt;span class=\"mr-2\"&gt;this 问题说明&lt;/span&gt;&lt;a href=\"#this-问题说明\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/this.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;p&gt;这里我们作为了解内容，随着 js 标准的发展，主流的写法已经变成了 class fields，无需考虑太多 this 问题&lt;/p&gt;&lt;h2 id=\"react-的状态不可变\"&gt;&lt;span class=\"mr-2\"&gt;React 的状态不可变&lt;/span&gt;&lt;a href=\"#react-的状态不可变\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 能够理解不可变的意义并且知道在实际开发中如何修改状态&lt;/p&gt;&lt;p&gt;&lt;strong&gt;概念&lt;/strong&gt;：不要直接修改状态的值，而是基于当前状态创建新的状态值&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1. 错误的直接修改&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-js highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"JavaScript\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1234567891011121314151617181920&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"na\"&gt;count&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mi\"&gt;0&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;  &lt;span class=\"na\"&gt;list&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"mi\"&gt;1&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"mi\"&gt;2&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"mi\"&gt;3&lt;/span&gt;&lt;span class=\"p\"&gt;],&lt;/span&gt;  &lt;span class=\"na\"&gt;person&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"na\"&gt;name&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;jack&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;    &lt;span class=\"na\"&gt;age&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mi\"&gt;18&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;  &lt;span class=\"p\"&gt;},&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"c1\"&gt;// 直接修改简单类型Number&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt;&lt;span class=\"o\"&gt;++&lt;/span&gt;&lt;span class=\"o\"&gt;++&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt; &lt;span class=\"o\"&gt;+=&lt;/span&gt; &lt;span class=\"mi\"&gt;1&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"mi\"&gt;1&lt;/span&gt;&lt;span class=\"c1\"&gt;// 直接修改数组&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;list&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;push&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"mi\"&gt;123&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;list&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;spice&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"mi\"&gt;1&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"mi\"&gt;1&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"c1\"&gt;// 直接修改对象&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;person&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;name&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;rose&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2. 基于当前状态创建新值&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-js highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"JavaScript\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;123456789&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;setState&lt;/span&gt;&lt;span class=\"p\"&gt;({&lt;/span&gt;    &lt;span class=\"na\"&gt;count&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt; &lt;span class=\"o\"&gt;+&lt;/span&gt; &lt;span class=\"mi\"&gt;1&lt;/span&gt;    &lt;span class=\"na\"&gt;list&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"p\"&gt;[...&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;list&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"mi\"&gt;4&lt;/span&gt;&lt;span class=\"p\"&gt;],&lt;/span&gt;    &lt;span class=\"na\"&gt;person&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;       &lt;span class=\"p\"&gt;...&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;person&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;       &lt;span class=\"c1\"&gt;// 覆盖原来的属性 就可以达到修改对象中属性的目的&lt;/span&gt;       &lt;span class=\"na\"&gt;name&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;rose&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;    &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;})&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=\"表单处理\"&gt;&lt;span class=\"mr-2\"&gt;表单处理&lt;/span&gt;&lt;a href=\"#表单处理\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 能够使用受控组件的方式获取文本框的值&lt;/p&gt;&lt;p&gt;使用 React 处理表单元素，一般有俩种方式：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;    &lt;p&gt;受控组件 （推荐使用）&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;非受控组件 （了解）&lt;/p&gt;  &lt;/li&gt;&lt;/ol&gt;&lt;h3 id=\"1-受控表单组件\"&gt;&lt;span class=\"mr-2\"&gt;1. 受控表单组件&lt;/span&gt;&lt;a href=\"#1-受控表单组件\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;什么是受控组件？ &lt;code class=\"language-plaintext highlighter-rouge\"&gt;input框自己的状态被React组件状态控制&lt;/code&gt;&lt;/p&gt;  &lt;p&gt;React 组件的状态的地方是在 state 中，input 表单元素也有自己的状态是在 value 中，React 将 state 与表单元素的值（value）绑定到一起，由 state 的值来控制表单元素的值，从而保证单一数据源特性&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;实现步骤&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;以获取文本框的值为例，受控组件的使用步骤如下：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;在组件的 state 中声明一个组件的状态数据&lt;/li&gt;  &lt;li&gt;将状态数据设置为 input 标签元素的 value 属性的值&lt;/li&gt;  &lt;li&gt;    &lt;p&gt;为 input 添加 change 事件，在事件处理程序中，通过事件对象 e 获取到当前文本框的值（&lt;code class=\"language-plaintext highlighter-rouge\"&gt;即用户当前输入的值&lt;/code&gt;）&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;调用 setState 方法，将文本框的值作为 state 状态的最新值&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;代码落地&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1234567891011121314151617181920212223242526272829&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"kd\"&gt;class&lt;/span&gt; &lt;span class=\"nx\"&gt;InputComponent&lt;/span&gt; &lt;span class=\"kd\"&gt;extends&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;Component&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 声明组件状态&lt;/span&gt;  &lt;span class=\"nx\"&gt;state&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"na\"&gt;message&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;this is message&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 声明事件回调函数&lt;/span&gt;  &lt;span class=\"nx\"&gt;changeHandler&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;e&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;setState&lt;/span&gt;&lt;span class=\"p\"&gt;({&lt;/span&gt; &lt;span class=\"na\"&gt;message&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"nx\"&gt;e&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;target&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;value&lt;/span&gt; &lt;span class=\"p\"&gt;})&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"nx\"&gt;render&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;        &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"cm\"&gt;/* 绑定value 绑定事件*/&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;        &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;input&lt;/span&gt; &lt;span class=\"na\"&gt;value&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;message&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt; &lt;span class=\"na\"&gt;onChange&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;changeHandler&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt; &lt;span class=\"na\"&gt;className&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"s\"&gt;\"App\"&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;InputComponent&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=\"2-非受控表单组件\"&gt;&lt;span class=\"mr-2\"&gt;2. 非受控表单组件&lt;/span&gt;&lt;a href=\"#2-非受控表单组件\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;什么是非受控组件？&lt;/p&gt;  &lt;p&gt;非受控组件就是通过手动操作 dom 的方式获取文本框的值，文本框的状态不受 react 组件的 state 中的状态控制，直接通过原生 dom 获取输入框的值&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;实现步骤&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;导入&lt;code class=\"language-plaintext highlighter-rouge\"&gt;createRef&lt;/code&gt; 函数&lt;/li&gt;  &lt;li&gt;调用 createRef 函数，创建一个 ref 对象，存储到名为&lt;code class=\"language-plaintext highlighter-rouge\"&gt;msgRef&lt;/code&gt;的实例属性中&lt;/li&gt;  &lt;li&gt;为 input 添加 ref 属性，值为&lt;code class=\"language-plaintext highlighter-rouge\"&gt;msgRef&lt;/code&gt;&lt;/li&gt;  &lt;li&gt;在按钮的事件处理程序中，通过&lt;code class=\"language-plaintext highlighter-rouge\"&gt;msgRef.current&lt;/code&gt;即可拿到 input 对应的 dom 元素，而其中&lt;code class=\"language-plaintext highlighter-rouge\"&gt;msgRef.current.value&lt;/code&gt;拿到的就是文本框的值&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;代码落地&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1234567891011121314151617181920212223242526272829&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"nx\"&gt;createRef&lt;/span&gt; &lt;span class=\"p\"&gt;}&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"kd\"&gt;class&lt;/span&gt; &lt;span class=\"nx\"&gt;InputComponent&lt;/span&gt; &lt;span class=\"kd\"&gt;extends&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;Component&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 使用createRef产生一个存放dom的对象容器&lt;/span&gt;  &lt;span class=\"nx\"&gt;msgRef&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;createRef&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt;  &lt;span class=\"nx\"&gt;changeHandler&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;msgRef&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;current&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;value&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"nx\"&gt;render&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;        &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"cm\"&gt;/* ref绑定 获取真实dom */&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;        &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;input&lt;/span&gt; &lt;span class=\"na\"&gt;ref&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;msgRef&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;        &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt; &lt;span class=\"na\"&gt;onClick&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;changeHandler&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;click&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt; &lt;span class=\"na\"&gt;className&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"s\"&gt;\"App\"&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;InputComponent&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=\"阶段小练习-1\"&gt;&lt;span class=\"mr-2\"&gt;阶段小练习&lt;/span&gt;&lt;a href=\"#阶段小练习-1\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/jsx-demo.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;p&gt;练习说明&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;    &lt;p&gt;拉取项目模板到本地，安装依赖，run 起来项目&lt;/p&gt;    &lt;p&gt;https://gitee.com/react-course-series/react-component-demo&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;完成 tab 点击切换激活状态交互&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;完成发表评论功能&lt;/p&gt;    &lt;p&gt;注意：生成独立无二的 id 可以使用 uuid 包 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;yarn add uuid&lt;/code&gt;&lt;/p&gt;    &lt;div class=\"language-js highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"JavaScript\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"nx\"&gt;v4&lt;/span&gt; &lt;span class=\"k\"&gt;as&lt;/span&gt; &lt;span class=\"nx\"&gt;uuid&lt;/span&gt; &lt;span class=\"p\"&gt;}&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;uuid&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"nx\"&gt;uuid&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"c1\"&gt;// 得到一个独一无二的id&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;完成删除评论功能&lt;/p&gt;  &lt;/li&gt;&lt;/ol&gt;&lt;h1 id=\"react-组件通信\"&gt;React 组件通信&lt;/h1&gt;&lt;h2 id=\"组件通信的意义\"&gt;&lt;span class=\"mr-2\"&gt;组件通信的意义&lt;/span&gt;&lt;a href=\"#组件通信的意义\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 了解为什么需要组件通信&lt;/p&gt;&lt;p&gt;组件是独立且封闭的单元，默认情况下组件&lt;strong&gt;只能使用自己的数据（state）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;组件化开发的过程中，完整的功能会拆分多个组件，在这个过程中不可避免的需要互相传递一些数据&lt;/p&gt;&lt;p&gt;为了能让各组件之间可以进行互相沟通，数据传递，这个过程就是组件通信&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;父子关系 - &lt;strong&gt;最重要的&lt;/strong&gt;&lt;/li&gt;  &lt;li&gt;兄弟关系 - 自定义事件模式产生技术方法 eventBus / 通过共同的父组件通信&lt;/li&gt;  &lt;li&gt;其它关系 - &lt;strong&gt;mobx / redux / 基于 hook 的方案&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=\"父传子实现\"&gt;&lt;span class=\"mr-2\"&gt;父传子实现&lt;/span&gt;&lt;a href=\"#父传子实现\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 实现父子通信中的父传子，把父组件中的数据传给子组件&lt;/p&gt;&lt;p&gt;&lt;strong&gt;实现步骤&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;    &lt;p&gt;父组件提供要传递的数据 - &lt;code class=\"language-plaintext highlighter-rouge\"&gt;state&lt;/code&gt;&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;给子组件标签&lt;code class=\"language-plaintext highlighter-rouge\"&gt;添加属性&lt;/code&gt;值为 state 中的数据&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;子组件中通过 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;props&lt;/code&gt; 接收父组件中传过来的数据&lt;/p&gt;    &lt;ol&gt;      &lt;li&gt;类组件使用 this.props 获取 props 对象&lt;/li&gt;      &lt;li&gt;函数式组件直接通过参数获取 props 对象&lt;/li&gt;    &lt;/ol&gt;  &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/props-1.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1234567891011121314151617181920212223242526272829303132333435363738394041&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"c1\"&gt;// 函数式子组件&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;FSon&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;props&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;props&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      子组件1      &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;props&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;msg&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"c1\"&gt;// 类子组件&lt;/span&gt;&lt;span class=\"kd\"&gt;class&lt;/span&gt; &lt;span class=\"nx\"&gt;CSon&lt;/span&gt; &lt;span class=\"kd\"&gt;extends&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;Component&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"nx\"&gt;render&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;        子组件2        &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;props&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;msg&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"c1\"&gt;// 父组件&lt;/span&gt;&lt;span class=\"kd\"&gt;class&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt; &lt;span class=\"kd\"&gt;extends&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;Component&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"nx\"&gt;state&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"na\"&gt;message&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;this is message&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"nx\"&gt;render&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;        &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;父组件&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;        &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;FSon&lt;/span&gt; &lt;span class=\"na\"&gt;msg&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;message&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;        &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;CSon&lt;/span&gt; &lt;span class=\"na\"&gt;msg&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;message&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=\"props-说明\"&gt;&lt;span class=\"mr-2\"&gt;props 说明&lt;/span&gt;&lt;a href=\"#props-说明\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 知道 props 传递时的一些注意事项&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1. props 是只读对象（readonly）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;根据单项数据流的要求，子组件只能读取 props 中的数据，不能进行修改&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2. props 可以传递任意数据&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;数字、字符串、布尔值、数组、对象、&lt;code class=\"language-plaintext highlighter-rouge\"&gt;函数、JSX&lt;/code&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910111213141516171819202122&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"kd\"&gt;class&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt; &lt;span class=\"kd\"&gt;extends&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;Component&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"nx\"&gt;state&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"na\"&gt;message&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;this is message&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"nx\"&gt;render&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;        &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;父组件&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;        &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;FSon&lt;/span&gt;          &lt;span class=\"na\"&gt;msg&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;message&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;          &lt;span class=\"na\"&gt;age&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"mi\"&gt;20&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;          &lt;span class=\"na\"&gt;isMan&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;          &lt;span class=\"na\"&gt;cb&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;            &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"mi\"&gt;1&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;          &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;          &lt;span class=\"na\"&gt;child&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;span&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;this is child&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;span&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;        &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;        &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;CSon&lt;/span&gt; &lt;span class=\"na\"&gt;msg&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;message&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/props-2.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;h2 id=\"子传父实现\"&gt;&lt;span class=\"mr-2\"&gt;子传父实现&lt;/span&gt;&lt;a href=\"#子传父实现\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 实现父子通信中的子传父&lt;/p&gt;&lt;p&gt;&lt;strong&gt;口诀：&lt;/strong&gt; 父组件给子组件传递回调函数，子组件调用&lt;/p&gt;&lt;p&gt;&lt;strong&gt;实现步骤&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;父组件提供一个回调函数 - 用于接收数据&lt;/li&gt;  &lt;li&gt;将函数作为属性的值，传给子组件&lt;/li&gt;  &lt;li&gt;子组件通过 props 调用 回调函数&lt;/li&gt;  &lt;li&gt;将子组件中的数据作为参数传递给回调函数&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/props-4.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;123456789101112131415161718192021222324252627282930313233343536373839404142&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"c1\"&gt;// 子组件&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;Son&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;props&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;handleClick&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"c1\"&gt;// 调用父组件传递过来的回调函数 并注入参数&lt;/span&gt;    &lt;span class=\"nx\"&gt;props&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;changeMsg&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;this is newMessage&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;props&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;msg&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt; &lt;span class=\"na\"&gt;onClick&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;handleClick&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;change&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"kd\"&gt;class&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt; &lt;span class=\"kd\"&gt;extends&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;Component&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"nx\"&gt;state&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"na\"&gt;message&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;this is message&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 提供回调函数&lt;/span&gt;  &lt;span class=\"nx\"&gt;changeMessage&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;newMsg&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;子组件传过来的数据:&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;newMsg&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;    &lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;setState&lt;/span&gt;&lt;span class=\"p\"&gt;({&lt;/span&gt;      &lt;span class=\"na\"&gt;message&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"nx\"&gt;newMsg&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;    &lt;span class=\"p\"&gt;})&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"nx\"&gt;render&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;        &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;父组件&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;        &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;Son&lt;/span&gt;          &lt;span class=\"na\"&gt;msg&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;message&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;          &lt;span class=\"c1\"&gt;// 传递给子组件&lt;/span&gt;          &lt;span class=\"na\"&gt;changeMsg&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;changeMessage&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;        &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=\"兄弟组件通信\"&gt;&lt;span class=\"mr-2\"&gt;兄弟组件通信&lt;/span&gt;&lt;a href=\"#兄弟组件通信\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 实现兄弟组件之间的通信&lt;/p&gt;&lt;p&gt;&lt;strong&gt;核心思路：&lt;/strong&gt; 通过状态提升机制，利用共同的父组件实现兄弟通信&lt;/p&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/props-5.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;实现步骤&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;    &lt;p&gt;将共享状态提升到最近的公共父组件中，由公共父组件管理这个状态&lt;/p&gt;    &lt;ul&gt;      &lt;li&gt;        &lt;p&gt;提供共享状态&lt;/p&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;p&gt;提供操作共享状态的方法&lt;/p&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;要接收数据状态的子组件通过 props 接收数据&lt;/li&gt;  &lt;li&gt;要传递数据状态的子组件通过 props 接收方法，调用方法传递数据&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"c1\"&gt;// 子组件A&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;SonA&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;props&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      SonA      &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;props&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;msg&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"c1\"&gt;// 子组件B&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;SonB&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;props&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      SonB      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt; &lt;span class=\"na\"&gt;onClick&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"nx\"&gt;props&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;changeMsg&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;new message&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;changeMsg&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"c1\"&gt;// 父组件&lt;/span&gt;&lt;span class=\"kd\"&gt;class&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt; &lt;span class=\"kd\"&gt;extends&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;Component&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 父组件提供状态数据&lt;/span&gt;  &lt;span class=\"nx\"&gt;state&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"na\"&gt;message&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;this is message&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 父组件提供修改数据的方法&lt;/span&gt;  &lt;span class=\"nx\"&gt;changeMsg&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;newMsg&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;setState&lt;/span&gt;&lt;span class=\"p\"&gt;({&lt;/span&gt;      &lt;span class=\"na\"&gt;message&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"nx\"&gt;newMsg&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;    &lt;span class=\"p\"&gt;})&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"nx\"&gt;render&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&amp;gt;&lt;/span&gt;        &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"cm\"&gt;/* 接收数据的组件 */&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;        &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;SonA&lt;/span&gt; &lt;span class=\"na\"&gt;msg&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;message&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;        &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"cm\"&gt;/* 修改数据的组件 */&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;        &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;SonB&lt;/span&gt; &lt;span class=\"na\"&gt;changeMsg&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;changeMsg&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=\"跨组件通信-context\"&gt;&lt;span class=\"mr-2\"&gt;跨组件通信 Context&lt;/span&gt;&lt;a href=\"#跨组件通信-context\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 了解 Context 机制解决的问题和使用步骤&lt;/p&gt;&lt;p&gt;&lt;strong&gt;问题场景&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/context.png\" data-proofer-ignore&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;上图是一个 react 形成的嵌套组件树，如果我们想从 App 组件向任意一个下层组件传递数据，该怎么办呢？目前我们能采取的方式就是一层一层的 props 往下传，显然很繁琐&lt;/p&gt;  &lt;p&gt;那么，Context 提供了一个&lt;strong&gt;无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;实现步骤&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;    &lt;p&gt;创建 Context 对象 导出 Provider 和 Consumer 对象&lt;/p&gt;    &lt;div class=\"language-js highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"JavaScript\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"nx\"&gt;Provider&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;Consumer&lt;/span&gt; &lt;span class=\"p\"&gt;}&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;createContext&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;使用 Provider 包裹根组件提供数据&lt;/p&gt;    &lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;Provider&lt;/span&gt; &lt;span class=\"na\"&gt;value&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;message&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"cm\"&gt;/* 根组件 */&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nc\"&gt;Provider&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;需要用到数据的组件使用 Consumer 包裹获取数据&lt;/p&gt;    &lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;123&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;Consumer&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;value&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"cm\"&gt;/* 基于 context 值进行渲染*/&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nc\"&gt;Consumer&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910111213141516171819202122232425262728293031&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"nx\"&gt;createContext&lt;/span&gt; &lt;span class=\"p\"&gt;}&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"c1\"&gt;// 1. 创建Context对象&lt;/span&gt;&lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"nx\"&gt;Provider&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;Consumer&lt;/span&gt; &lt;span class=\"p\"&gt;}&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;createContext&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt;&lt;span class=\"c1\"&gt;// 3. 消费数据&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;ComC&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;Consumer&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;value&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;value&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nc\"&gt;Consumer&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;ComA&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;ComC&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"c1\"&gt;// 2. 提供数据&lt;/span&gt;&lt;span class=\"kd\"&gt;class&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt; &lt;span class=\"kd\"&gt;extends&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;Component&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"nx\"&gt;state&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"na\"&gt;message&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;this is message&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"nx\"&gt;render&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;Provider&lt;/span&gt; &lt;span class=\"na\"&gt;value&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;message&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;        &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt; &lt;span class=\"na\"&gt;className&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"s\"&gt;\"app\"&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;          &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;ComA&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;        &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nc\"&gt;Provider&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=\"阶段小练习-2\"&gt;&lt;span class=\"mr-2\"&gt;阶段小练习&lt;/span&gt;&lt;a href=\"#阶段小练习-2\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;要求：App 为父组件用来提供列表数据 ，ListItem 为子组件用来渲染列表数据&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/props-3.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;div class=\"language-js highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"JavaScript\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;123456&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"c1\"&gt;// 列表数据&lt;/span&gt;&lt;span class=\"p\"&gt;;[&lt;/span&gt;  &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"na\"&gt;id&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mi\"&gt;1&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"na\"&gt;name&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;超级好吃的棒棒糖&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"na\"&gt;price&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mf\"&gt;18.8&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"na\"&gt;info&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;开业大酬宾，全场8折&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt; &lt;span class=\"p\"&gt;},&lt;/span&gt;  &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"na\"&gt;id&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mi\"&gt;2&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"na\"&gt;name&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;超级好吃的大鸡腿&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"na\"&gt;price&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mf\"&gt;34.2&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"na\"&gt;info&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;开业大酬宾，全场8折&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt; &lt;span class=\"p\"&gt;},&lt;/span&gt;  &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"na\"&gt;id&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mi\"&gt;3&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"na\"&gt;name&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;超级无敌的冰激凌&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"na\"&gt;price&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mf\"&gt;14.2&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"na\"&gt;info&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;开业大酬宾，全场8折&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt; &lt;span class=\"p\"&gt;},&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;完整代码&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"c1\"&gt;// 子组件&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;ListItem&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;props&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"nx\"&gt;name&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;price&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;info&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;id&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;delHandler&lt;/span&gt; &lt;span class=\"p\"&gt;}&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;props&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;h3&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;name&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;h3&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;p&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;price&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;p&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;p&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;info&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;p&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt; &lt;span class=\"na\"&gt;onClick&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"nx\"&gt;delHandler&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;id&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;删除&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"c1\"&gt;// 父组件&lt;/span&gt;&lt;span class=\"kd\"&gt;class&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt; &lt;span class=\"kd\"&gt;extends&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;Component&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"nx\"&gt;state&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"na\"&gt;list&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;      &lt;span class=\"p\"&gt;{&lt;/span&gt;        &lt;span class=\"na\"&gt;id&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mi\"&gt;1&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;        &lt;span class=\"na\"&gt;name&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;超级好吃的棒棒糖&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;        &lt;span class=\"na\"&gt;price&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mf\"&gt;18.8&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;        &lt;span class=\"na\"&gt;info&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;开业大酬宾，全场8折&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;      &lt;span class=\"p\"&gt;},&lt;/span&gt;      &lt;span class=\"p\"&gt;{&lt;/span&gt;        &lt;span class=\"na\"&gt;id&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mi\"&gt;2&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;        &lt;span class=\"na\"&gt;name&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;超级好吃的大鸡腿&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;        &lt;span class=\"na\"&gt;price&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mf\"&gt;34.2&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;        &lt;span class=\"na\"&gt;info&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;开业大酬宾，全场8折&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;      &lt;span class=\"p\"&gt;},&lt;/span&gt;      &lt;span class=\"p\"&gt;{&lt;/span&gt;        &lt;span class=\"na\"&gt;id&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mi\"&gt;3&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;        &lt;span class=\"na\"&gt;name&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;超级无敌的冰激凌&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;        &lt;span class=\"na\"&gt;price&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mf\"&gt;14.2&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;        &lt;span class=\"na\"&gt;info&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;开业大酬宾，全场8折&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;      &lt;span class=\"p\"&gt;},&lt;/span&gt;    &lt;span class=\"p\"&gt;],&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"nx\"&gt;delHandler&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;id&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;setState&lt;/span&gt;&lt;span class=\"p\"&gt;({&lt;/span&gt;      &lt;span class=\"na\"&gt;list&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;list&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;filter&lt;/span&gt;&lt;span class=\"p\"&gt;((&lt;/span&gt;&lt;span class=\"nx\"&gt;item&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"nx\"&gt;item&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;id&lt;/span&gt; &lt;span class=\"o\"&gt;!==&lt;/span&gt; &lt;span class=\"nx\"&gt;id&lt;/span&gt;&lt;span class=\"p\"&gt;),&lt;/span&gt;    &lt;span class=\"p\"&gt;})&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"nx\"&gt;render&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&amp;gt;&lt;/span&gt;        &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;state&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;list&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;map&lt;/span&gt;&lt;span class=\"p\"&gt;((&lt;/span&gt;&lt;span class=\"nx\"&gt;item&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;          &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;ListItem&lt;/span&gt; &lt;span class=\"na\"&gt;key&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;item&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;id&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt; &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"p\"&gt;...&lt;/span&gt;&lt;span class=\"nx\"&gt;item&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt; &lt;span class=\"na\"&gt;delHandler&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;delHandler&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;        &lt;span class=\"p\"&gt;))&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h1 id=\"react-组件进阶\"&gt;React 组件进阶&lt;/h1&gt;&lt;h2 id=\"children-属性\"&gt;&lt;span class=\"mr-2\"&gt;children 属性&lt;/span&gt;&lt;a href=\"#children-属性\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 掌握 props 中 children 属性的用法&lt;/p&gt;&lt;p&gt;&lt;strong&gt;children 属性是什么&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;表示该组件的子节点，只要组件内部有子节点，props 中就有该属性&lt;/p&gt;&lt;p&gt;&lt;strong&gt;children 可以是什么&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;普通文本&lt;/li&gt;  &lt;li&gt;普通标签元素&lt;/li&gt;  &lt;li&gt;函数&lt;/li&gt;  &lt;li&gt;JSX&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=\"props-校验-场景和使用\"&gt;&lt;span class=\"mr-2\"&gt;props 校验-场景和使用&lt;/span&gt;&lt;a href=\"#props-校验-场景和使用\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 掌握组件 props 的校验写法，增加组件的健壮性&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;对于组件来说，props 是由外部传入的，我们其实无法保证组件使用者传入了什么格式的数据，如果传入的数据格式不对，就有可能会导致组件内部错误，有一个点很关键 - &lt;strong&gt;组件的使用者可能报错了也不知道为什么&lt;/strong&gt;，看下面的例子&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/props-rule.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;p&gt;面对这样的问题，如何解决？ &lt;strong&gt;props 校验&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;实现步骤&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;安装属性校验包：&lt;code class=\"language-plaintext highlighter-rouge\"&gt;yarn add prop-types&lt;/code&gt;&lt;/li&gt;  &lt;li&gt;导入&lt;code class=\"language-plaintext highlighter-rouge\"&gt;prop-types&lt;/code&gt; 包&lt;/li&gt;  &lt;li&gt;使用 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;组件名.propTypes = {}&lt;/code&gt; 给组件添加校验规则&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;核心代码&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1234567891011&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"nx\"&gt;PropTypes&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;prop-types&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"nx\"&gt;List&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;props&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"nx\"&gt;arr&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;props&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;colors&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"nx\"&gt;lis&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;arr&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;map&lt;/span&gt;&lt;span class=\"p\"&gt;((&lt;/span&gt;&lt;span class=\"nx\"&gt;item&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;index&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;li&lt;/span&gt; &lt;span class=\"na\"&gt;key&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;index&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;item&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;name&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;li&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;)&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;ul&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;lis&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;ul&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"nx\"&gt;List&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;propTypes&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"na\"&gt;colors&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"nx\"&gt;PropTypes&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;array&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=\"props-校验-规则说明\"&gt;&lt;span class=\"mr-2\"&gt;props 校验-规则说明&lt;/span&gt;&lt;a href=\"#props-校验-规则说明\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 掌握 props 常见的规则&lt;/p&gt;&lt;p&gt;&lt;strong&gt;四种常见结构&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;常见类型：array、bool、func、number、object、string&lt;/li&gt;  &lt;li&gt;React 元素类型：element&lt;/li&gt;  &lt;li&gt;必填项：isRequired&lt;/li&gt;  &lt;li&gt;特定的结构对象：shape({})&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;核心代码&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-js highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"JavaScript\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;123456789&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"c1\"&gt;// 常见类型&lt;/span&gt;&lt;span class=\"nx\"&gt;optionalFunc&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"nx\"&gt;PropTypes&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;func&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"c1\"&gt;// 必填 只需要在类型后面串联一个isRequired&lt;/span&gt;&lt;span class=\"nx\"&gt;requiredFunc&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"nx\"&gt;PropTypes&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;func&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;isRequired&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;&lt;span class=\"c1\"&gt;// 特定结构的对象&lt;/span&gt;&lt;span class=\"nx\"&gt;optionalObjectWithShape&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"nx\"&gt;PropTypes&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;shape&lt;/span&gt;&lt;span class=\"p\"&gt;({&lt;/span&gt;\t&lt;span class=\"na\"&gt;color&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"nx\"&gt;PropTypes&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;string&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;\t&lt;span class=\"na\"&gt;fontSize&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"nx\"&gt;PropTypes&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;number&lt;/span&gt;&lt;span class=\"p\"&gt;})&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;官网文档更多阅读：https://reactjs.org/docs/typechecking-with-proptypes.html&lt;/p&gt;&lt;h2 id=\"props-校验-默认值\"&gt;&lt;span class=\"mr-2\"&gt;props 校验-默认值&lt;/span&gt;&lt;a href=\"#props-校验-默认值\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 掌握如何给组件的 props 提供默认值&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;通过 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;defaultProps&lt;/code&gt; 可以给组件的 props 设置默认值，在未传入 props 的时候生效&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=\"1-函数组件\"&gt;&lt;span class=\"mr-2\"&gt;1. 函数组件&lt;/span&gt;&lt;a href=\"#1-函数组件\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;直接使用函数参数默认值&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;123456&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;List&lt;/span&gt;&lt;span class=\"p\"&gt;({&lt;/span&gt; &lt;span class=\"nx\"&gt;pageSize&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"mi\"&gt;10&lt;/span&gt; &lt;span class=\"p\"&gt;})&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;此处展示props的默认值：&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;pageSize&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"c1\"&gt;// 不传入pageSize属性&lt;/span&gt;&lt;span class=\"p\"&gt;;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;List&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=\"2-类组件\"&gt;&lt;span class=\"mr-2\"&gt;2. 类组件&lt;/span&gt;&lt;a href=\"#2-类组件\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;使用类静态属性声明默认值，&lt;code class=\"language-plaintext highlighter-rouge\"&gt;static defaultProps = {}&lt;/code&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"kd\"&gt;class&lt;/span&gt; &lt;span class=\"nx\"&gt;List&lt;/span&gt; &lt;span class=\"kd\"&gt;extends&lt;/span&gt; &lt;span class=\"nx\"&gt;Component&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"kd\"&gt;static&lt;/span&gt; &lt;span class=\"nx\"&gt;defaultProps&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"na\"&gt;pageSize&lt;/span&gt;&lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"mi\"&gt;10&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"nx\"&gt;render&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;此处展示props的默认值：&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"k\"&gt;this&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;props&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;pageSize&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;List&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=\"生命周期---概述\"&gt;&lt;span class=\"mr-2\"&gt;生命周期 - 概述&lt;/span&gt;&lt;a href=\"#生命周期---概述\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 能够说出组件生命周期一共几个阶段&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;组件的生命周期是指组件从被创建到挂载到页面中运行起来，再到组件不用时卸载的过程，注意，只有类组件才有生命周期（类组件 实例化 函数组件 不需要实例化）&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/life.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=\"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\"&gt;http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/&lt;/a&gt;&lt;/p&gt;&lt;h2 id=\"生命周期---挂载阶段\"&gt;&lt;span class=\"mr-2\"&gt;生命周期 - 挂载阶段&lt;/span&gt;&lt;a href=\"#生命周期---挂载阶段\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 能够说出在组件挂载阶段执行的钩子函数和执行时机&lt;/p&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/life1.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;div class=\"table-wrapper\"&gt;&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;钩子 函数&lt;/th&gt;      &lt;th&gt;触发时机&lt;/th&gt;      &lt;th&gt;作用&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;constructor&lt;/td&gt;      &lt;td&gt;创建组件时，最先执行，初始化的时候只执行一次&lt;/td&gt;      &lt;td&gt;1. 初始化 state 2. 创建 Ref 3. 使用 bind 解决 this 指向问题等&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;render&lt;/td&gt;      &lt;td&gt;每次组件渲染都会触发&lt;/td&gt;      &lt;td&gt;渲染 UI（&lt;strong&gt;注意： 不能在里面调用 setState()&lt;/strong&gt; ）&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;componentDidMount&lt;/td&gt;      &lt;td&gt;组件挂载（完成 DOM 渲染）后执行，初始化的时候执行一次&lt;/td&gt;      &lt;td&gt;1. 发送网络请求 2.DOM 操作&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;h2 id=\"生命周期---更新阶段\"&gt;&lt;span class=\"mr-2\"&gt;生命周期 - 更新阶段&lt;/span&gt;&lt;a href=\"#生命周期---更新阶段\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 能够说出组件的更新阶段的钩子函数以及执行时机&lt;/p&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/life2.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;div class=\"table-wrapper\"&gt;&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;钩子函数&lt;/th&gt;      &lt;th&gt;触发时机&lt;/th&gt;      &lt;th&gt;作用&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;render&lt;/td&gt;      &lt;td&gt;每次组件渲染都会触发&lt;/td&gt;      &lt;td&gt;渲染 UI（与 挂载阶段 是同一个 render）&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;componentDidUpdate&lt;/td&gt;      &lt;td&gt;组件更新后（DOM 渲染完毕）&lt;/td&gt;      &lt;td&gt;DOM 操作，可以获取到更新后的 DOM 内容，&lt;strong&gt;不要直接调用 setState&lt;/strong&gt;&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;h2 id=\"生命周期---卸载阶段\"&gt;&lt;span class=\"mr-2\"&gt;生命周期 - 卸载阶段&lt;/span&gt;&lt;a href=\"#生命周期---卸载阶段\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;目标任务:&lt;/code&gt; 能够说出组件的销毁阶段的钩子函数以及执行时机&lt;/p&gt;&lt;div class=\"table-wrapper\"&gt;&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;钩子函数&lt;/th&gt;      &lt;th&gt;触发时机&lt;/th&gt;      &lt;th&gt;作用&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;componentWillUnmount&lt;/td&gt;      &lt;td&gt;组件卸载（从页面中消失）&lt;/td&gt;      &lt;td&gt;执行清理工作（比如：清理定时器等）&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;h2 id=\"阶段小练习---todomvc\"&gt;&lt;span class=\"mr-2\"&gt;阶段小练习 - todoMVC&lt;/span&gt;&lt;a href=\"#阶段小练习---todomvc\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;案例仓库地址：https://gitee.com/react-course-series/react-todo-mvc&lt;/p&gt;&lt;p&gt;&lt;strong&gt;项目演示步骤：&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;    &lt;p&gt;克隆项目到本地&lt;/p&gt;    &lt;div class=\"language-bash highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Shell\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;git clone  https://gitee.com/react-course-series/react-todo-mvc.git&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;安装必要依赖&lt;/p&gt;    &lt;div class=\"language-bash highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Shell\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;yarn&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;开启 mock 接口服务，&lt;strong&gt;保持窗口不关闭&lt;/strong&gt; ！！！！！&lt;/p&gt;    &lt;div class=\"language-bash highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Shell\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"c\"&gt;# 启动mock服务&lt;/span&gt;yarn mock-serve&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;&lt;strong&gt;另起一个 bash 窗口&lt;/strong&gt;开启前端服务&lt;/p&gt;    &lt;div class=\"language-bash highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Shell\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;yarn start&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;浏览器输入 localhost:3000 演示效果&lt;/p&gt;  &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;项目开发步骤：&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;    &lt;p&gt;切换到 todo-test 分支&lt;/p&gt;    &lt;div class=\"language-bash highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Shell\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;git checkout todo-test&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;打开 app.js&lt;/p&gt;    &lt;p&gt;已有基础样板代码，在这个基础上编写业务逻辑即可&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;接口文档&lt;/p&gt;  &lt;/li&gt;&lt;/ol&gt;&lt;div class=\"table-wrapper\"&gt;&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;接口作用&lt;/th&gt;      &lt;th&gt;接口地址&lt;/th&gt;      &lt;th&gt;接口方法&lt;/th&gt;      &lt;th&gt;接口参数&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;获取列表&lt;/td&gt;      &lt;td&gt;http://localhost:3001/data&lt;/td&gt;      &lt;td&gt;GET&lt;/td&gt;      &lt;td&gt;无&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;删除&lt;/td&gt;      &lt;td&gt;http://localhost:3001/data/:id&lt;/td&gt;      &lt;td&gt;DELETE&lt;/td&gt;      &lt;td&gt;id&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;搜索&lt;/td&gt;      &lt;td&gt;http://localhost:3001/data/?q=keyword&lt;/td&gt;      &lt;td&gt;GET&lt;/td&gt;      &lt;td&gt;name（以 name 字段搜索）&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;实现功能&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"table-wrapper\"&gt;&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;功能&lt;/th&gt;      &lt;th&gt;核心思路&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;表格数据渲染&lt;/td&gt;      &lt;td&gt;elementPlus el-table 组件使用&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;删除功能&lt;/td&gt;      &lt;td&gt;获取当前 id 调用接口&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;搜索功能&lt;/td&gt;      &lt;td&gt;用的依旧是列表接口，多传一个 name 参数&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;清除搜索功能&lt;/td&gt;      &lt;td&gt;清空搜索参数 重新获取列表&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;h1 id=\"hooks-基础\"&gt;Hooks 基础&lt;/h1&gt;&lt;h2 id=\"hooks-概念理解\"&gt;&lt;span class=\"mr-2\"&gt;Hooks 概念理解&lt;/span&gt;&lt;a href=\"#hooks-概念理解\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;本节任务:&lt;/code&gt; 能够理解 hooks 的概念及解决的问题&lt;/p&gt;&lt;h3 id=\"1-什么是-hooks\"&gt;&lt;span class=\"mr-2\"&gt;1. 什么是 hooks&lt;/span&gt;&lt;a href=\"#1-什么是-hooks\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Hooks 的本质：&lt;strong&gt;一套能够使函数组件更强大，更灵活的“钩子”&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;React 体系里组件分为 类组件 和 函数组件&lt;/p&gt;&lt;p&gt;经过多年的实战，函数组件是一个更加匹配 React 的设计理念 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;UI = f(data)&lt;/code&gt;，也更有利于逻辑拆分与重用的组件表达形式，而先前的函数组件是不可以有自己的状态的，为了能让函数组件可以拥有自己的状态，所以从 react v16.8 开始，Hooks 应运而生&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注意点：&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;有了 hooks 之后，为了兼容老版本，class 类组件并没有被移除，俩者都可以使用&lt;/li&gt;  &lt;li&gt;有了 hooks 之后，不能在把函数成为无状态组件了，因为 hooks 为函数组件提供了状态&lt;/li&gt;  &lt;li&gt;hooks 只能在函数组件中使用&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=\"2-hooks-解决了什么问题\"&gt;&lt;span class=\"mr-2\"&gt;2. Hooks 解决了什么问题&lt;/span&gt;&lt;a href=\"#2-hooks-解决了什么问题\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Hooks 的出现解决了俩个问题 1. 组件的状态逻辑复用 2.class 组件自身的问题&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;    &lt;p&gt;组件的逻辑复用&lt;/p&gt;    &lt;p&gt;在 hooks 出现之前，react 先后尝试了 mixins 混入，HOC 高阶组件，render-props 等模式&lt;/p&gt;    &lt;p&gt;但是都有各自的问题，比如 mixin 的数据来源不清晰，高阶组件的嵌套问题等等&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;class 组件自身的问题&lt;/p&gt;    &lt;p&gt;class 组件就像一个厚重的‘战舰’ 一样，大而全，提供了很多东西，有不可忽视的学习成本，比如各种生命周期，this 指向问题等等，而我们更多时候需要的是一个轻快灵活的’快艇’&lt;/p&gt;  &lt;/li&gt;&lt;/ol&gt;&lt;h2 id=\"usestate\"&gt;&lt;span class=\"mr-2\"&gt;useState&lt;/span&gt;&lt;a href=\"#usestate\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=\"1-基础使用\"&gt;&lt;span class=\"mr-2\"&gt;1. 基础使用&lt;/span&gt;&lt;a href=\"#1-基础使用\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;本节任务:&lt;/code&gt; 能够学会 useState 的基础用法&lt;/p&gt;&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ useState 为函数组件提供状态（state）&lt;/p&gt;&lt;p&gt;&lt;strong&gt;使用步骤&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;导入 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;useState&lt;/code&gt; 函数&lt;/li&gt;  &lt;li&gt;调用 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;useState&lt;/code&gt; 函数，并传入状态的初始值&lt;/li&gt;  &lt;li&gt;从&lt;code class=\"language-plaintext highlighter-rouge\"&gt;useState&lt;/code&gt;函数的返回值中，拿到状态和修改状态的方法&lt;/li&gt;  &lt;li&gt;在 JSX 中展示状态&lt;/li&gt;  &lt;li&gt;调用修改状态的方法更新状态&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910111213141516&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt; &lt;span class=\"p\"&gt;}&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 参数：状态初始值比如,传入 0 表示该状态的初始值为 0&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 返回值：数组,包含两个值：1 状态值（state） 2 修改该状态的函数（setState）&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;setCount&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"mi\"&gt;0&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;      &lt;span class=\"na\"&gt;onClick&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;        &lt;span class=\"nx\"&gt;setCount&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt; &lt;span class=\"o\"&gt;+&lt;/span&gt; &lt;span class=\"mi\"&gt;1&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;      &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=\"2-状态的读取和修改\"&gt;&lt;span class=\"mr-2\"&gt;2. 状态的读取和修改&lt;/span&gt;&lt;a href=\"#2-状态的读取和修改\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;本节任务:&lt;/code&gt; 能够理解 useState 下状态的读取和修改&lt;/p&gt;&lt;p&gt;&lt;strong&gt;读取状态&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ 该方式提供的状态，是函数内部的局部变量，可以在函数内的任意位置使用&lt;/p&gt;&lt;p&gt;&lt;strong&gt;修改状态&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;setCount 是一个函数，参数表示&lt;code class=\"language-plaintext highlighter-rouge\"&gt;最新的状态值&lt;/code&gt;&lt;/li&gt;  &lt;li&gt;调用该函数后，将使用新值替换旧值&lt;/li&gt;  &lt;li&gt;修改状态后，由于状态发生变化，会引起视图变化&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ 修改状态的时候，一定要使用新的状态替换旧的状态，不能直接修改旧的状态，尤其是引用类型&lt;/p&gt;&lt;h3 id=\"3-组件的更新过程\"&gt;&lt;span class=\"mr-2\"&gt;3. 组件的更新过程&lt;/span&gt;&lt;a href=\"#3-组件的更新过程\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;本节任务:&lt;/code&gt; 能够理解使用 hook 之后组件的更新情况&lt;/p&gt;&lt;p&gt;函数组件使用 &lt;strong&gt;useState&lt;/strong&gt; hook 后的执行过程，以及状态值的变化&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;组件第一次渲染&lt;/p&gt;    &lt;ol&gt;      &lt;li&gt;从头开始执行该组件中的代码逻辑&lt;/li&gt;      &lt;li&gt;调用 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;useState(0)&lt;/code&gt; 将传入的参数作为状态初始值，即：0&lt;/li&gt;      &lt;li&gt;渲染组件，此时，获取到的状态 count 值为： 0&lt;/li&gt;    &lt;/ol&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;组件第二次渲染&lt;/p&gt;    &lt;ol&gt;      &lt;li&gt;点击按钮，调用 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;setCount(count + 1)&lt;/code&gt; 修改状态，因为状态发生改变，所以，该组件会重新渲染&lt;/li&gt;      &lt;li&gt;组件重新渲染时，会再次执行该组件中的代码逻辑&lt;/li&gt;      &lt;li&gt;再次调用 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;useState(0)&lt;/code&gt;，此时 &lt;strong&gt;React 内部会拿到最新的状态值而非初始值&lt;/strong&gt;，比如，该案例中最新的状态值为 1&lt;/li&gt;      &lt;li&gt;再次渲染组件，此时，获取到的状态 count 值为：1&lt;/li&gt;    &lt;/ol&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;注意：&lt;strong&gt;useState 的初始值(参数)只会在组件第一次渲染时生效&lt;/strong&gt;。也就是说，以后的每次渲染，useState 获取到都是最新的状态值，React 组件会记住每次最新的状态值&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910111213141516&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt; &lt;span class=\"p\"&gt;}&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;setCount&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"mi\"&gt;0&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 在这里可以进行打印测试&lt;/span&gt;  &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;      &lt;span class=\"na\"&gt;onClick&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;        &lt;span class=\"nx\"&gt;setCount&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt; &lt;span class=\"o\"&gt;+&lt;/span&gt; &lt;span class=\"mi\"&gt;1&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;      &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=\"4-使用规则\"&gt;&lt;span class=\"mr-2\"&gt;4. 使用规则&lt;/span&gt;&lt;a href=\"#4-使用规则\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;本节任务:&lt;/code&gt; 能够记住 useState 的使用规则&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;    &lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;useState&lt;/code&gt; 函数可以执行多次，每次执行互相独立，每调用一次为函数组件提供一个状态&lt;/p&gt;    &lt;div class=\"language-js highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"JavaScript\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;123456&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;List&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 以字符串为初始值&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;name&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;setName&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;cp&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 以数组为初始值&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;list&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;setList&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt;&lt;span class=\"p\"&gt;([])&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;useState&lt;/code&gt; 注意事项&lt;/p&gt;    &lt;ol&gt;      &lt;li&gt;        &lt;p&gt;只能出现在函数组件中&lt;/p&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;p&gt;不能嵌套在 if/for/其它函数中（react 按照 hooks 的调用顺序识别每一个 hook）&lt;/p&gt;        &lt;div class=\"language-js highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"JavaScript\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;123456789&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"kd\"&gt;let&lt;/span&gt; &lt;span class=\"nx\"&gt;num&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"mi\"&gt;1&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;List&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"nx\"&gt;num&lt;/span&gt;&lt;span class=\"o\"&gt;++&lt;/span&gt;  &lt;span class=\"k\"&gt;if&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;num&lt;/span&gt; &lt;span class=\"o\"&gt;/&lt;/span&gt; &lt;span class=\"mi\"&gt;2&lt;/span&gt; &lt;span class=\"o\"&gt;===&lt;/span&gt; &lt;span class=\"mi\"&gt;0&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;name&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;setName&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;cp&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;list&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;setList&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt;&lt;span class=\"p\"&gt;([])&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"c1\"&gt;// 俩个hook的顺序不是固定的，这是不可以的！！！&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;        &lt;/div&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;p&gt;可以通过开发者工具查看 hooks 状态&lt;/p&gt;      &lt;/li&gt;    &lt;/ol&gt;  &lt;/li&gt;&lt;/ol&gt;&lt;h2 id=\"useeffect\"&gt;&lt;span class=\"mr-2\"&gt;useEffect&lt;/span&gt;&lt;a href=\"#useeffect\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=\"1-理解函数副作用\"&gt;&lt;span class=\"mr-2\"&gt;1. 理解函数副作用&lt;/span&gt;&lt;a href=\"#1-理解函数副作用\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;本节任务:&lt;/code&gt; 能够理解副作用的概念&lt;/p&gt;&lt;p&gt;&lt;strong&gt;什么是副作用&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ 副作用是相对于主作用来说的，一个函数除了主作用，其他的作用就是副作用。对于 React 组件来说，&lt;strong&gt;主作用就是根据数据（state/props）渲染 UI&lt;/strong&gt;，除此之外都是副作用（比如，手动修改 DOM）&lt;/p&gt;&lt;p&gt;&lt;strong&gt;常见的副作用&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;数据请求 ajax 发送&lt;/li&gt;  &lt;li&gt;手动修改 dom&lt;/li&gt;  &lt;li&gt;localstorage 操作&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;useEffect 函数的作用就是为 react 函数组件提供副作用处理的！&lt;/p&gt;&lt;h3 id=\"2-基础使用\"&gt;&lt;span class=\"mr-2\"&gt;2. 基础使用&lt;/span&gt;&lt;a href=\"#2-基础使用\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;本节任务:&lt;/code&gt; 能够学会 useEffect 的基础用法并且掌握默认的执行执行时机&lt;/p&gt;&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ 为 react 函数组件提供副作用处理&lt;/p&gt;&lt;p&gt;&lt;strong&gt;使用步骤&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;导入 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;useEffect&lt;/code&gt; 函数&lt;/li&gt;  &lt;li&gt;调用 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;useEffect&lt;/code&gt; 函数，并传入回调函数&lt;/li&gt;  &lt;li&gt;在回调函数中编写副作用处理（dom 操作）&lt;/li&gt;  &lt;li&gt;修改数据状态&lt;/li&gt;  &lt;li&gt;检测副作用是否生效&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1234567891011121314151617181920&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"nx\"&gt;useEffect&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt; &lt;span class=\"p\"&gt;}&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;setCount&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"mi\"&gt;0&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"nx\"&gt;useEffect&lt;/span&gt;&lt;span class=\"p\"&gt;(()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"c1\"&gt;// dom操作&lt;/span&gt;    &lt;span class=\"nb\"&gt;document&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;title&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"s2\"&gt;`当前已点击了&lt;/span&gt;&lt;span class=\"p\"&gt;${&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"s2\"&gt;次`&lt;/span&gt;  &lt;span class=\"p\"&gt;})&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;      &lt;span class=\"na\"&gt;onClick&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;        &lt;span class=\"nx\"&gt;setCount&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt; &lt;span class=\"o\"&gt;+&lt;/span&gt; &lt;span class=\"mi\"&gt;1&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;      &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=\"3-依赖项控制执行时机\"&gt;&lt;span class=\"mr-2\"&gt;3. 依赖项控制执行时机&lt;/span&gt;&lt;a href=\"#3-依赖项控制执行时机\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;本节任务:&lt;/code&gt; 能够学会使用依赖项控制副作用的执行时机&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1. 不添加依赖项&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;组件首次渲染执行一次，以及不管是哪个状态更改引起组件更新时都会重新执行&lt;/p&gt;  &lt;ol&gt;    &lt;li&gt;组件初始渲染&lt;/li&gt;    &lt;li&gt;组件更新 （不管是哪个状态引起的更新）&lt;/li&gt;  &lt;/ol&gt;&lt;/blockquote&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;123&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"nx\"&gt;useEffect&lt;/span&gt;&lt;span class=\"p\"&gt;(()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;副作用执行了&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;})&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2. 添加空数组&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;组件只在首次渲染时执行一次&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;123&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"nx\"&gt;useEffect&lt;/span&gt;&lt;span class=\"p\"&gt;(()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;副作用执行了&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;},&lt;/span&gt; &lt;span class=\"p\"&gt;[])&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;3. 添加特定依赖项&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;副作用函数在首次渲染时执行，在依赖项发生变化时重新执行&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910111213141516171819202122232425&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;setCount&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"mi\"&gt;0&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;name&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;setName&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;zs&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"nx\"&gt;useEffect&lt;/span&gt;&lt;span class=\"p\"&gt;(()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;副作用执行了&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;},&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt;&lt;span class=\"p\"&gt;])&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;        &lt;span class=\"na\"&gt;onClick&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;          &lt;span class=\"nx\"&gt;setCount&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt; &lt;span class=\"o\"&gt;+&lt;/span&gt; &lt;span class=\"mi\"&gt;1&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;        &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;        &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;        &lt;span class=\"na\"&gt;onClick&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;          &lt;span class=\"nx\"&gt;setName&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;cp&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;        &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;        &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;name&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;useEffect 回调函数中用到的数据（比如，count）就是依赖数据，就应该出现在依赖项数组中，如果不添加依赖项就会有 bug 出现&lt;/p&gt;&lt;h2 id=\"阶段小练习---自定义-hook\"&gt;&lt;span class=\"mr-2\"&gt;阶段小练习 - 自定义 hook&lt;/span&gt;&lt;a href=\"#阶段小练习---自定义-hook\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;需求描述&lt;/strong&gt;：自定义一个 hook 函数，实现获取滚动距离 Y&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;const [y] = useWindowScroll()&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=\"language-js highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"JavaScript\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt; &lt;span class=\"p\"&gt;}&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;useWindowScroll&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;y&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;setY&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"mi\"&gt;0&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"nb\"&gt;window&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;addEventListener&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;scroll&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"nx\"&gt;h&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nb\"&gt;document&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;documentElement&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;scrollTop&lt;/span&gt;    &lt;span class=\"nx\"&gt;setY&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;h&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;})&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;y&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;需求描述：&lt;/strong&gt; 自定义 hook 函数，可以自动同步到本地 LocalStorage&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;const [message, setMessage] = useLocalStorage(key，defaultValue)&lt;/code&gt;&lt;/p&gt;  &lt;ol&gt;    &lt;li&gt;message 可以通过自定义传入默认初始值&lt;/li&gt;    &lt;li&gt;每次修改 message 数据的时候 都会自动往本地同步一份&lt;/li&gt;  &lt;/ol&gt;&lt;/blockquote&gt;&lt;div class=\"language-js highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"JavaScript\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"nx\"&gt;useEffect&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt; &lt;span class=\"p\"&gt;}&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;useLocalStorage&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;key&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;defaultValue&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;message&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;setMessage&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;defaultValue&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 每次只要message变化 就会自动同步到本地ls&lt;/span&gt;  &lt;span class=\"nx\"&gt;useEffect&lt;/span&gt;&lt;span class=\"p\"&gt;(()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"nb\"&gt;window&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;localStorage&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;setItem&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;key&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;message&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;},&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;message&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;key&lt;/span&gt;&lt;span class=\"p\"&gt;])&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;message&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;setMessage&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h1 id=\"hooks-进阶\"&gt;Hooks 进阶&lt;/h1&gt;&lt;h2 id=\"usestate---回调函数的参数\"&gt;&lt;span class=\"mr-2\"&gt;useState - 回调函数的参数&lt;/span&gt;&lt;a href=\"#usestate---回调函数的参数\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;本节任务:&lt;/code&gt; 能够理解 useState 回调函数作为参数的使用场景&lt;/p&gt;&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;参数只会在组件的初始渲染中起作用，后续渲染时会被忽略。如果初始 state 需要通过计算才能获得，则可以传入一个函数，在函数中计算并返回初始的 state，此函数只在初始渲染时被调用&lt;/p&gt;&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;name&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;setName&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt;&lt;span class=\"p\"&gt;(()&lt;/span&gt;&lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt;&lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"c1\"&gt;// 编写计算逻辑    return '计算之后的初始值'})&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;语法规则&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;回调函数 return 出去的值将作为 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;name&lt;/code&gt; 的初始值&lt;/li&gt;  &lt;li&gt;回调函数中的逻辑只会在组件初始化的时候执行一次&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;语法选择&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;如果就是初始化一个普通的数据 直接使用 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;useState(普通数据)&lt;/code&gt; 即可&lt;/li&gt;  &lt;li&gt;如果要初始化的数据无法直接得到需要通过计算才能获取到，使用&lt;code class=\"language-plaintext highlighter-rouge\"&gt;useState(()=&amp;gt;{})&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;来个需求&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/main/client/react/base/state01.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1234567891011121314151617181920212223&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt; &lt;span class=\"p\"&gt;}&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;Counter&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;props&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;setCount&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt;&lt;span class=\"p\"&gt;(()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"nx\"&gt;props&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt;  &lt;span class=\"p\"&gt;})&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt; &lt;span class=\"na\"&gt;onClick&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"nx\"&gt;setCount&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt; &lt;span class=\"o\"&gt;+&lt;/span&gt; &lt;span class=\"mi\"&gt;1&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;count&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;Counter&lt;/span&gt; &lt;span class=\"na\"&gt;count&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"mi\"&gt;10&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;Counter&lt;/span&gt; &lt;span class=\"na\"&gt;count&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"mi\"&gt;20&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=\"useeffect---清理副作用\"&gt;&lt;span class=\"mr-2\"&gt;useEffect - 清理副作用&lt;/span&gt;&lt;a href=\"#useeffect---清理副作用\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;本节任务:&lt;/code&gt; 能够掌握清理 useEffect 的方法&lt;/p&gt;&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在组件被销毁时，如果有些副作用操作需要被清理，就可以使用此语法，比如常见的定时器&lt;/p&gt;&lt;p&gt;&lt;strong&gt;语法及规则&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-js highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"JavaScript\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"nx\"&gt;useEffect&lt;/span&gt;&lt;span class=\"p\"&gt;(()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;副作用函数执行了&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 副作用函数的执行时机为: 在下一次副作用函数执行之前执行&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;清理副作用的函数执行了&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;    &lt;span class=\"c1\"&gt;// 在这里写清理副作用的代码&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;})&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;定时器小案例&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;添加副作用函数前：组件虽然已经不显示了，但是定时器依旧在运行&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;123456789101112131415161718192021&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"nx\"&gt;useEffect&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt; &lt;span class=\"p\"&gt;}&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;Foo&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"nx\"&gt;useEffect&lt;/span&gt;&lt;span class=\"p\"&gt;(()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"nx\"&gt;setInterval&lt;/span&gt;&lt;span class=\"p\"&gt;(()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;      &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;副作用函数执行了&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;    &lt;span class=\"p\"&gt;},&lt;/span&gt; &lt;span class=\"mi\"&gt;1000&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;})&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;Foo&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;flag&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;setFlag&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt; &lt;span class=\"na\"&gt;onClick&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"nx\"&gt;setFlag&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"kc\"&gt;false&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;click&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;flag&lt;/span&gt; &lt;span class=\"p\"&gt;?&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;Foo&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"kc\"&gt;null&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;添加清理副作用函数后：一旦组件被销毁，定时器也被清理&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910111213141516171819202122232425&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"nx\"&gt;useEffect&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt; &lt;span class=\"p\"&gt;}&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;Foo&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"nx\"&gt;useEffect&lt;/span&gt;&lt;span class=\"p\"&gt;(()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"nx\"&gt;timerId&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;setInterval&lt;/span&gt;&lt;span class=\"p\"&gt;(()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;      &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;副作用函数执行了&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;    &lt;span class=\"p\"&gt;},&lt;/span&gt; &lt;span class=\"mi\"&gt;1000&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;    &lt;span class=\"c1\"&gt;// 添加清理副租用函数&lt;/span&gt;    &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;      &lt;span class=\"nx\"&gt;clearInterval&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;timerId&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;    &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"p\"&gt;})&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;Foo&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"nx\"&gt;flag&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;setFlag&lt;/span&gt;&lt;span class=\"p\"&gt;]&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;useState&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"kc\"&gt;true&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt; &lt;span class=\"na\"&gt;onClick&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"nx\"&gt;setFlag&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"kc\"&gt;false&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;click&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;button&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;flag&lt;/span&gt; &lt;span class=\"p\"&gt;?&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;Foo&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;:&lt;/span&gt; &lt;span class=\"kc\"&gt;null&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=\"useeffect---发送网络请求\"&gt;&lt;span class=\"mr-2\"&gt;useEffect - 发送网络请求&lt;/span&gt;&lt;a href=\"#useeffect---发送网络请求\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;本节任务:&lt;/code&gt; 能够掌握使用 useEffect hook 发送网络请求&lt;/p&gt;&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如何在 useEffect 中发送网络请求，并且封装同步 async await 操作&lt;/p&gt;&lt;p&gt;&lt;strong&gt;语法要求&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;不可以直接在 useEffect 的回调函数外层直接包裹 await ，因为&lt;strong&gt;异步会导致清理函数无法立即返回&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-js highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"JavaScript\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1234&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"nx\"&gt;useEffect&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"k\"&gt;async&lt;/span&gt; &lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"nx\"&gt;res&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"k\"&gt;await&lt;/span&gt; &lt;span class=\"nx\"&gt;axios&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"kd\"&gt;get&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;http://geek.itheima.net/v1_0/channels&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;res&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;},&lt;/span&gt; &lt;span class=\"p\"&gt;[])&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;正确写法&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在内部单独定义一个函数，然后把这个函数包装成同步&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"nx\"&gt;useEffect&lt;/span&gt;&lt;span class=\"p\"&gt;(()&lt;/span&gt;&lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt;&lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;async&lt;/span&gt; &lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;fetchData&lt;/span&gt;&lt;span class=\"p\"&gt;(){&lt;/span&gt;       &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"nx\"&gt;res&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"k\"&gt;await&lt;/span&gt; &lt;span class=\"nx\"&gt;axios&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"kd\"&gt;get&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;http://geek.itheima.net/v1_0/channels&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;                            &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;res&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;    &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;},[])&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=\"useref\"&gt;&lt;span class=\"mr-2\"&gt;useRef&lt;/span&gt;&lt;a href=\"#useref\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;本节任务:&lt;/code&gt; 能够掌握使用 useRef 获取真实 dom 或组件实例的方法&lt;/p&gt;&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在函数组件中获取真实的 dom 元素对象或者是组件对象&lt;/p&gt;&lt;p&gt;&lt;strong&gt;使用步骤&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;导入 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;useRef&lt;/code&gt; 函数&lt;/li&gt;  &lt;li&gt;执行 &lt;code class=\"language-plaintext highlighter-rouge\"&gt;useRef&lt;/code&gt; 函数并传入 null，返回值为一个对象 内部有一个 current 属性存放拿到的 dom 对象（组件实例）&lt;/li&gt;  &lt;li&gt;通过 ref 绑定 要获取的元素或者组件&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;获取 dom&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910111213&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"nx\"&gt;useEffect&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;useRef&lt;/span&gt; &lt;span class=\"p\"&gt;}&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"nx\"&gt;h1Ref&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;useRef&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"kc\"&gt;null&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"nx\"&gt;useEffect&lt;/span&gt;&lt;span class=\"p\"&gt;(()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;h1Ref&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;},&lt;/span&gt; &lt;span class=\"p\"&gt;[])&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;h1&lt;/span&gt; &lt;span class=\"na\"&gt;ref&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;h1Ref&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;this is h1&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;h1&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;获取组件实例&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;函数组件由于没有实例，不能使用 ref 获取，如果想获取组件实例，必须是类组件&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;Foo.js&lt;/code&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12345678910&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"kd\"&gt;class&lt;/span&gt; &lt;span class=\"nx\"&gt;Foo&lt;/span&gt; &lt;span class=\"kd\"&gt;extends&lt;/span&gt; &lt;span class=\"nx\"&gt;React&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;Component&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"nx\"&gt;sayHi&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;say hi&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;  &lt;span class=\"nx\"&gt;render&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;Foo&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;Foo&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;App.js&lt;/code&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;123456789101112131415&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"nx\"&gt;useEffect&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;useRef&lt;/span&gt; &lt;span class=\"p\"&gt;}&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"nx\"&gt;Foo&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;./Foo&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"nx\"&gt;h1Foo&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;useRef&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"kc\"&gt;null&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"nx\"&gt;useEffect&lt;/span&gt;&lt;span class=\"p\"&gt;(()&lt;/span&gt; &lt;span class=\"o\"&gt;=&amp;gt;&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;    &lt;span class=\"nx\"&gt;console&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nx\"&gt;log&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;h1Foo&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"p\"&gt;},&lt;/span&gt; &lt;span class=\"p\"&gt;[])&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt; &lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;Foo&lt;/span&gt; &lt;span class=\"na\"&gt;ref&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;h1Foo&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=\"usecontext\"&gt;&lt;span class=\"mr-2\"&gt;useContext&lt;/span&gt;&lt;a href=\"#usecontext\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code class=\"language-plaintext highlighter-rouge\"&gt;本节任务:&lt;/code&gt; 能够掌握 hooks 下的 context 使用方式&lt;/p&gt;&lt;p&gt;&lt;img data-src=\"https://raw.githubusercontent.com/cotes2020/chirpy-images/mainD:/react课程全系列/课程讲义及资源/课程讲义/1.React基础课//client/react/base/context.png\" alt=\"\" data-proofer-ignore&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;实现步骤&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;使用&lt;code class=\"language-plaintext highlighter-rouge\"&gt;createContext&lt;/code&gt; 创建 Context 对象&lt;/li&gt;  &lt;li&gt;在顶层组件通过&lt;code class=\"language-plaintext highlighter-rouge\"&gt;Provider&lt;/code&gt; 提供数据&lt;/li&gt;  &lt;li&gt;在底层组件通过&lt;code class=\"language-plaintext highlighter-rouge\"&gt;useContext&lt;/code&gt;函数获取数据&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"language-jsx highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Jsx\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;123456789101112131415161718192021222324252627282930&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;import&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"nx\"&gt;createContext&lt;/span&gt;&lt;span class=\"p\"&gt;,&lt;/span&gt; &lt;span class=\"nx\"&gt;useContext&lt;/span&gt; &lt;span class=\"p\"&gt;}&lt;/span&gt; &lt;span class=\"k\"&gt;from&lt;/span&gt; &lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;react&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"c1\"&gt;// 创建Context对象&lt;/span&gt;&lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"nx\"&gt;Context&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;createContext&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;Foo&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      Foo &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;Bar&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;Bar&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"c1\"&gt;// 底层组件通过useContext函数获取数据&lt;/span&gt;  &lt;span class=\"kd\"&gt;const&lt;/span&gt; &lt;span class=\"nx\"&gt;name&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"nx\"&gt;useContext&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"nx\"&gt;Context&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;Bar &lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"nx\"&gt;name&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"kd\"&gt;function&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;span class=\"p\"&gt;()&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt;  &lt;span class=\"k\"&gt;return&lt;/span&gt; &lt;span class=\"p\"&gt;(&lt;/span&gt;    &lt;span class=\"c1\"&gt;// 顶层组件通过Provider 提供数据&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;Context&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nc\"&gt;Provider&lt;/span&gt; &lt;span class=\"na\"&gt;value&lt;/span&gt;&lt;span class=\"p\"&gt;=&lt;/span&gt;&lt;span class=\"si\"&gt;{&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"s1\"&gt;this is name&lt;/span&gt;&lt;span class=\"dl\"&gt;'&lt;/span&gt;&lt;span class=\"si\"&gt;}&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;        &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;&lt;span class=\"nc\"&gt;Foo&lt;/span&gt; &lt;span class=\"p\"&gt;/&amp;gt;&lt;/span&gt;      &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nt\"&gt;div&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;    &lt;span class=\"p\"&gt;&amp;lt;/&lt;/span&gt;&lt;span class=\"nc\"&gt;Context&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nc\"&gt;Provider&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;&lt;/span&gt;  &lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;span class=\"p\"&gt;}&lt;/span&gt;&lt;span class=\"k\"&gt;export&lt;/span&gt; &lt;span class=\"k\"&gt;default&lt;/span&gt; &lt;span class=\"nx\"&gt;App&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=\"阶段小练习-todomvc-hook-版\"&gt;&lt;span class=\"mr-2\"&gt;阶段小练习-todoMvc-hook 版&lt;/span&gt;&lt;a href=\"#阶段小练习-todomvc-hook-版\" class=\"anchor text-muted\"&gt;&lt;i class=\"fas fa-hashtag\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;案例仓库地址：https://gitee.com/react-course-series/react-tomvc-hook&lt;/p&gt;&lt;p&gt;&lt;strong&gt;项目演示步骤：&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;    &lt;p&gt;克隆项目到本地&lt;/p&gt;    &lt;div class=\"language-bash highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Shell\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;git clone  https://gitee.com/react-course-series/react-tomvc-hook.git&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;安装必要依赖&lt;/p&gt;    &lt;div class=\"language-bash highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Shell\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;yarn&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;开启 mock 接口服务，&lt;strong&gt;保持窗口不关闭&lt;/strong&gt; ！！！！！&lt;/p&gt;    &lt;div class=\"language-bash highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Shell\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;12&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;&lt;span class=\"c\"&gt;# 启动mock服务&lt;/span&gt;yarn mock-serve&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;&lt;strong&gt;另起一个 bash 窗口&lt;/strong&gt;开启前端服务&lt;/p&gt;    &lt;div class=\"language-bash highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Shell\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;yarn start&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;浏览器输入 localhost:3000 演示效果&lt;/p&gt;  &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;项目开发步骤：&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;    &lt;p&gt;切换到 todo-test 分支&lt;/p&gt;    &lt;div class=\"language-bash highlighter-rouge\"&gt;&lt;div class=\"code-header\"&gt;        &lt;span data-label-text=\"Shell\"&gt;&lt;i class=\"fas fa-code small\"&gt;&lt;/i&gt;&lt;/span&gt;      &lt;button aria-label=\"copy\" data-title-succeed=\"已复制！\"&gt;&lt;i class=\"far fa-clipboard\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=\"highlight\"&gt;&lt;code&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"rouge-gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"rouge-code\"&gt;&lt;pre&gt;git checkout todo-test&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;打开 app.js&lt;/p&gt;    &lt;p&gt;已有基础样板代码，在这个基础上编写业务逻辑即可&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;接口文档&lt;/p&gt;  &lt;/li&gt;&lt;/ol&gt;&lt;div class=\"table-wrapper\"&gt;&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;接口作用&lt;/th&gt;      &lt;th&gt;接口地址&lt;/th&gt;      &lt;th&gt;接口方法&lt;/th&gt;      &lt;th&gt;接口参数&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;获取列表&lt;/td&gt;      &lt;td&gt;http://localhost:3001/data&lt;/td&gt;      &lt;td&gt;GET&lt;/td&gt;      &lt;td&gt;无&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;删除&lt;/td&gt;      &lt;td&gt;http://localhost:3001/data/:id&lt;/td&gt;      &lt;td&gt;DELETE&lt;/td&gt;      &lt;td&gt;id&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;搜索&lt;/td&gt;      &lt;td&gt;http://localhost:3001/data/?q=keyword&lt;/td&gt;      &lt;td&gt;GET&lt;/td&gt;      &lt;td&gt;name（以 name 字段搜索）&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;实现功能&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"table-wrapper\"&gt;&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;功能&lt;/th&gt;      &lt;th&gt;核心思路&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;表格数据渲染&lt;/td&gt;      &lt;td&gt;elementPlus el-table 组件使用&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;删除功能&lt;/td&gt;      &lt;td&gt;获取当前 id 调用接口&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;搜索功能&lt;/td&gt;      &lt;td&gt;用的依旧是列表接口，多传一个 name 参数&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;清除搜索功能&lt;/td&gt;      &lt;td&gt;清空搜索参数 重新获取列表&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\"post-tail-wrapper text-muted\"&gt;  &lt;!-- categories --&gt;    &lt;div class=\"post-meta mb-3\"&gt;    &lt;i class=\"far fa-folder-open fa-fw mr-1\"&gt;&lt;/i&gt;          &lt;a href='/blog.github.io/categories/client/'&gt;Client&lt;/a&gt;  &lt;/div&gt;    &lt;!-- tags --&gt;    &lt;div class=\"post-tags\"&gt;    &lt;i class=\"fa fa-tags fa-fw mr-1\"&gt;&lt;/i&gt;            &lt;a href=\"/blog.github.io/tags/react/\"          class=\"post-tag no-text-decoration\" &gt;React&lt;/a&gt;        &lt;/div&gt;    &lt;div class=\"post-tail-bottom    d-flex justify-content-between align-items-center mt-3 pt-5 pb-2\"&gt;    &lt;div class=\"license-wrapper\"&gt;                      本文由作者按照         &lt;a href=\"https://creativecommons.org/licenses/by/4.0/\"&gt;          CC BY 4.0        &lt;/a&gt;         进行授权          &lt;/div&gt;    &lt;!-- Post sharing snippet--&gt;&lt;div class=\"share-wrapper\"&gt;  &lt;span class=\"share-label text-muted mr-1\"&gt;分享&lt;/span&gt;  &lt;span class=\"share-icons\"&gt;                              &lt;a href=\"https://twitter.com/intent/tweet?text=React+%E5%9F%BA%E7%A1%80+-+Cc&amp;url=http%3A%2F%2Flocalhost%3A4000%2Fblog.github.io%2Fposts%2FreactBase%2F\" data-toggle=\"tooltip\" data-placement=\"top\"          title=\"Twitter\" target=\"_blank\" rel=\"noopener\" aria-label=\"Twitter\"&gt;          &lt;i class=\"fa-fw fab fa-twitter\"&gt;&lt;/i&gt;        &lt;/a&gt;                  &lt;a href=\"https://www.facebook.com/sharer/sharer.php?title=React+%E5%9F%BA%E7%A1%80+-+Cc&amp;u=http%3A%2F%2Flocalhost%3A4000%2Fblog.github.io%2Fposts%2FreactBase%2F\" data-toggle=\"tooltip\" data-placement=\"top\"          title=\"Facebook\" target=\"_blank\" rel=\"noopener\" aria-label=\"Facebook\"&gt;          &lt;i class=\"fa-fw fab fa-facebook-square\"&gt;&lt;/i&gt;        &lt;/a&gt;                  &lt;a href=\"https://t.me/share/url?url=http%3A%2F%2Flocalhost%3A4000%2Fblog.github.io%2Fposts%2FreactBase%2F&amp;text=React+%E5%9F%BA%E7%A1%80+-+Cc\" data-toggle=\"tooltip\" data-placement=\"top\"          title=\"Telegram\" target=\"_blank\" rel=\"noopener\" aria-label=\"Telegram\"&gt;          &lt;i class=\"fa-fw fab fa-telegram\"&gt;&lt;/i&gt;        &lt;/a&gt;        &lt;i id=\"copy-link\" class=\"fa-fw fas fa-link small\"        data-toggle=\"tooltip\" data-placement=\"top\"        title=\"分享链接\"        data-title-succeed=\"链接已复制！\"&gt;    &lt;/i&gt;  &lt;/span&gt;&lt;/div&gt;  &lt;/div&gt;&lt;!-- .post-tail-bottom --&gt;&lt;/div&gt;&lt;!-- div.post-tail-wrapper --&gt;                  &lt;/div&gt;  &lt;/div&gt; &lt;!-- #core-wrapper --&gt;  &lt;!-- pannel --&gt;  &lt;div id=\"panel-wrapper\" class=\"col-xl-3 pl-2 text-muted\"&gt;    &lt;div class=\"access\"&gtlt;div id=\"access-tags\"&gt;    &lt;div class=\"panel-heading\"&gt;热门标签&lt;/div&gt;    &lt;div class=\"d-flex flex-wrap mt-3 mb-1 mr-3\"&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/golang/\"&gt;golang&lt;/a&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/gobase/\"&gt;GoBase&lt;/a&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/goutils/\"&gt;GoUtils&lt;/a&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/goadvanced/\"&gt;GoAdvanced&lt;/a&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/network/\"&gt;network&lt;/a&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/docker/\"&gt;Docker&lt;/a&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/goweb/\"&gt;GoWeb&lt;/a&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/kubernetes/\"&gt;Kubernetes&lt;/a&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/mysql/\"&gt;Mysql&lt;/a&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/selfstudy/\"&gt;SelfStudy&lt;/a&gt;        &lt;/div&gt;  &lt;/div&gt;    &lt;/div&gt;                &lt;!-- BS-toc.js will be loaded at medium priority --&gt;&lt;script src=\"https://cdn.jsdelivr.net/gh/afeld/bootstrap-toc@1.0.1/dist/bootstrap-toc.min.js\"&gt;&lt;/script&gt;&lt;div id=\"toc-wrapper\" class=\"pl-0 pr-4 mb-5\"&gt;  &lt;div class=\"panel-heading pl-3 pt-2 mb-2\"&gt;文章内容&lt;/div&gt;  &lt;nav id=\"toc\" data-toggle=\"toc\"&gt;&lt;/nav&gt;&lt;/div&gt;      &lt;/div&gt;&lt;/div&gt;&lt;!-- tail --&gt;&lt;div class=\"row\"&gt;  &lt;div class=\"col-12 col-lg-11 col-xl-8\"&gt;    &lt;div id=\"tail-wrapper\" class=\"pl-1 pr-1 pl-sm-2 pr-sm-2 pl-md-4 pr-md-4\"&gt;                      &lt;!-- Recommend the other 3 posts according to the tags and categories of the current post, if the number is not enough, use the other latest posts to supplement.--&gt;&lt;!-- The total size of related posts  --&gt;&lt;!-- An random integer that bigger than 0  --&gt;&lt;!-- Equals to TAG_SCORE / {max_categories_hierarchy}  --&gtlt;!-- Fill with the other newlest posts  --&gt;  &lt;div id=\"related-posts\" class=\"mt-5 mb-2 mb-sm-4\"&gt;    &lt;h3 class=\"pt-2 mt-1 mb-4 ml-1\"      data-toc-skip&gt;相关文章&lt;/h3&gt;    &lt;div class=\"card-deck mb-4\"&gt;                      &lt;div class=\"card\"&gt;        &lt;a href=\"/blog.github.io/posts/reactProject/\"&gt;          &lt;div class=\"card-body\"&gt;            &lt;!--  Date format snippet  See: ${JS_ROOT}/utils/locale-dateime.js--&gt;&lt;em class=\"small\"    data-ts=\"1644764316\"    data-df=\"YYYY-MM-DD\"    &gt;  2022-02-13&lt;/em&gt;            &lt;h3 class=\"pt-0 mt-1 mb-3\" data-toc-skip&gt;React Project&lt;/h3&gt;            &lt;div class=\"text-muted small\"&gt;              &lt;p&gt;                                项目准备1. 项目介绍本节目标: 了解项目的定位和功能  项目功能演示          登录、退出      首页      内容（文章）管理：文章列表、发布文章、修改文章        技术          React 官方脚手架 create-react-app      react hooks      状态管理：mobx      UI 组件...              &lt;/p&gt;            &lt;/div&gt;          &lt;/div&gt;        &lt;/a&gt;      &lt;/div&gt;                      &lt;div class=\"card\"&gt;        &lt;a href=\"/blog.github.io/posts/createVue/\"&gt;          &lt;div class=\"card-body\"&gt;            &lt;!--  Date format snippet  See: ${JS_ROOT}/utils/locale-dateime.js--&gt;&lt;em class=\"small\"    data-ts=\"1539269916\"    data-df=\"YYYY-MM-DD\"    &gt;  2018-10-11&lt;/em&gt;            &lt;h3 class=\"pt-0 mt-1 mb-3\" data-toc-skip&gt;Vue 创建项目&lt;/h3&gt;            &lt;div class=\"text-muted small\"&gt;              &lt;p&gt;                                检查安装环境  nodenode 下载  cnpm          npm install cnpm -g –registry=https://registry.npm.taobao.org        npm      D:\\file\\vue\\vue&amp;amp;gt;node -v  v10.16.3      D:\\file\\vue\\vue&amp;amp;gt;npm 0v  ^...              &lt;/p&gt;            &lt;/div&gt;          &lt;/div&gt;        &lt;/a&gt;      &lt;/div&gt;                      &lt;div class=\"card\"&gt;        &lt;a href=\"/blog.github.io/posts/vue/\"&gt;          &lt;div class=\"card-body\"&gt;            &lt;!--  Date format snippet  See: ${JS_ROOT}/utils/locale-dateime.js--&gt;&lt;em class=\"small\"    data-ts=\"1539356316\"    data-df=\"YYYY-MM-DD\"    &gt;  2018-10-12&lt;/em&gt;            &lt;h3 class=\"pt-0 mt-1 mb-3\" data-toc-skip&gt;Vue&lt;/h3&gt;            &lt;div class=\"text-muted small\"&gt;              &lt;p&gt;                                vue学习网址https://developer.aliyun.com/mirror/NPM?from=tnpm脚手架#全局安装vue的命令行工具npm install -g @vue/cli#验证Vue是否安装成功vue -V#通过脚手架命令行方式创建vue项目vue create vue-demo#通过vue提供的界面来创建vue项目vue ui#启动...              &lt;/p&gt;            &lt;/div&gt;          &lt;/div&gt;        &lt;/a&gt;      &lt;/div&gt;        &lt;/div&gt; &lt;!-- .card-deck --&gt;  &lt;/div&gt; &lt;!-- #related-posts --&gt;                      &lt;!--  Navigation buttons at the bottom of the post.--&gt;&lt;div class=\"post-navigation d-flex justify-content-between\"&gt;    &lt;a href=\"/blog.github.io/posts/InternetPrinciples/\" class=\"btn btn-outline-primary\"    prompt=\"上一篇\"&gt;    &lt;p&gt;InternetPrinciples（04735）&lt;/p&gt;  &lt;/a&gt;      &lt;a href=\"/blog.github.io/posts/reactProject/\" class=\"btn btn-outline-primary\"    prompt=\"下一篇\"&gt;    &lt;p&gt;React Project&lt;/p&gt;  &lt;/a&gt;  &lt;/div&gt;                      &lt;!--  The comments switcher --&gt;          &lt;/div&gt;  &lt;/div&gt;&lt;/div&gt; &lt;!-- .row --&gt;        &lt;!--  The Footer--&gt;&lt;footer class=\"d-flex w-100 justify-content-center\"&gt;  &lt;div class=\"d-flex justify-content-between align-items-center text-muted\"&gt;    &lt;div class=\"footer-left\"&gt;      &lt;p class=\"mb-0\"&gt;        © 2022        &lt;a href=\"https://Cc360428.gitee.io/cc/\"&gt;Cc&lt;/a&gt;.                &lt;span data-toggle=\"tooltip\" data-placement=\"top\" title=\"除非另有说明，本网站上的博客文章均由作者按照知识共享署名 4.0 国际 (CC BY 4.0) 许可协议进行授权。\"&gt;保留部分权利。&lt;/span&gt;              &lt;/p&gt;    &lt;/div&gt;    &lt;div class=\"footer-right\"&gt;      &lt;!-- &lt;p class=\"mb-0\"&gt;                        本站由         &lt;a href=\"https://jekyllrb.com\" target=\"_blank\" rel=\"noopener\"&gt;Jekyll&lt;/a&gt;         生成，采用         &lt;a href=\"https://github.com/cotes2020/jekyll-theme-chirpy\" target=\"_blank\" rel=\"noopener\"&gt;Chirpy&lt;/a&gt;         主题。      &lt;/p&gt; --&gt;    &lt;/div&gt;  &lt;/div&gt; &lt;!-- div.d-flex --&gt;&lt;/footer&gt;      &lt;/div&gt;      &lt;!--  The Search results--&gt;&lt;div id=\"search-result-wrapper\" class=\"d-flex justify-content-center unloaded\"&gt;  &lt;div class=\"col-12 col-sm-11 post-content\"&gt;    &lt;div id=\"search-hints\"&gtlt;div id=\"access-tags\"&gt;    &lt;div class=\"panel-heading\"&gt;热门标签&lt;/div&gt;    &lt;div class=\"d-flex flex-wrap mt-3 mb-1 mr-3\"&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/golang/\"&gt;golang&lt;/a&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/gobase/\"&gt;GoBase&lt;/a&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/goutils/\"&gt;GoUtils&lt;/a&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/goadvanced/\"&gt;GoAdvanced&lt;/a&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/network/\"&gt;network&lt;/a&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/docker/\"&gt;Docker&lt;/a&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/goweb/\"&gt;GoWeb&lt;/a&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/kubernetes/\"&gt;Kubernetes&lt;/a&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/mysql/\"&gt;Mysql&lt;/a&gt;                &lt;a class=\"post-tag\" href=\"/blog.github.io/tags/selfstudy/\"&gt;SelfStudy&lt;/a&gt;        &lt;/div&gt;  &lt;/div&gt;    &lt;/div&gt;    &lt;div id=\"search-results\" class=\"d-flex flex-wrap justify-content-center text-muted mt-3\"&gt;&lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;    &lt;/div&gt; &lt;!-- #main-wrapper --&gt;        &lt;div id=\"mask\"&gt;&lt;/div&gt;    &lt;a id=\"back-to-top\" href=\"#\" aria-label=\"back-to-top\" class=\"btn btn-lg btn-box-shadow\" role=\"button\"&gt;      &lt;i class=\"fas fa-angle-up\"&gt;&lt;/i&gt;    &lt;/a&gt;    &lt;!--  Jekyll Simple Search loader  See: &lt;https://github.com/christian-fei/Simple-Jekyll-Search&gt;--&gt;&lt;script src=\"https://cdn.jsdelivr.net/npm/simple-jekyll-search@1.10.0/dest/simple-jekyll-search.min.js\"&gt;&lt;/script&gt;&lt;script&gt;SimpleJekyllSearch({  searchInput: document.getElementById('search-input'),  resultsContainer: document.getElementById('search-results'),  json: '/blog.github.io/assets/js/data/search.json',  searchResultTemplate: '&lt;div class=\"pl-1 pr-1 pl-sm-2 pr-sm-2 pl-lg-4 pr-lg-4 pl-xl-0 pr-xl-0\"&gt;  &lt;a href=\"{url}\"&gt;{title}&lt;/a&gt;  &lt;div class=\"post-meta d-flex flex-column flex-sm-row text-muted mt-1 mb-1\"&gt;    {categories}    {tags}  &lt;/div&gt;  &lt;p&gt;{snippet}&lt;/p&gt;&lt;/div&gt;',  noResultsText: '&lt;p class=\"mt-5\"&gt;搜索结果为空&lt;/p&gt;',  templateMiddleware: function(prop, value, template) {    if (prop === 'categories') {      if (value === '') {        return `${value}`;      } else {        return `&lt;div class=\"mr-sm-4\"&gt;&lt;i class=\"far fa-folder fa-fw\"&gt;&lt;/i&gt;${value}&lt;/div&gt;`;      }    }    if (prop === 'tags') {      if (value === '') {        return `${value}`;      } else {        return `&lt;div&gt;&lt;i class=\"fa fa-tag fa-fw\"&gt;&lt;/i&gt;${value}&lt;/div&gt;`;      }    }  }});&lt;/script&gt;    &lt;!--  JS selector for site.--&gt;&lt;!-- layout specified --&gt;    &lt;!-- image lazy-loading &amp; popup &amp; clipboard --&gt;                                          &lt;script src=\"https://cdn.jsdelivr.net/combine/npm/magnific-popup@1/dist/jquery.magnific-popup.min.js,npm/lozad/dist/lozad.min.js,npm/clipboard@2/dist/clipboard.min.js\"&gt;&lt;/script&gt;                                                        &lt;script src=\"https://cdn.jsdelivr.net/combine/npm/dayjs@1/dayjs.min.js,npm/dayjs@1/locale/zh.min.js,npm/dayjs@1/plugin/relativeTime.min.js,npm/dayjs@1/plugin/localizedFormat.min.js\"&gt;&lt;/script&gt;&lt;script defer src=\"/blog.github.io/assets/js/dist/post.min.js\"&gt;&lt;/script&gt;&lt;!-- commons --&gt;&lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4/dist/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;    &gt;      &lt;Form.Item        label=\"内容\"        name=\"content\"        rules={[{ required: true, message: \"请输入文章内容\" }]}      &gt;        &lt;ReactQuill          className=\"publish-quill\"          theme=\"snow\"          placeholder=\"请输入文章内容\"        /&gt;      &lt;/Form.Item&gt;    &lt;/Form&gt;  );};pages/Publish/index.scss.publish-quill {  .ql-editor {    min-height: 300px;  }}3. 频道数据获取本节目标: 实现频道数据的获取和渲染实现步骤  使用 useState 初始化数据和修改数据的方法  在 useEffect 中调用接口并保存数据  使用数据渲染对应模块代码实现// 频道列表const [channels, setChannels] = useState([]);useEffect(() =&gt; {  async function fetchChannels() {    const res = await http.get(\"/channels\");    setChannels(res.data.channels);  }  fetchChannels();}, []);// 模板渲染return (  &lt;Form.Item    label=\"频道\"    name=\"channel_id\"    rules={[{ required: true, message: \"请选择文章频道\" }]}  &gt;    &lt;Select placeholder=\"请选择文章频道\" style=&gt;      {channels.map((item) =&gt; (        &lt;Option key={item.id} value={item.id}&gt;          {item.name}        &lt;/Option&gt;      ))}    &lt;/Select&gt;  &lt;/Form.Item&gt;);4. 上传封面实现本节目标: 能够实现上传图片实现步骤  为 Upload 组件添加 action 属性，指定封面图片上传接口地址  创建状态 fileList 存储已上传封面图片地址，并设置为 Upload 组件的 fileList 属性值  为 Upload 添加 onChange 属性，监听封面图片上传、删除等操作  在 change 事件中拿到当前图片数据，并存储到状态 fileList 中代码实现import { useState } from \"react\";const Publish = () =&gt; {  const [fileList, setFileList] = useState([]);  // 上传成功回调  const onUploadChange = (info) =&gt; {    const fileList = info.fileList.map((file) =&gt; {      if (file.response) {        return {          url: file.response.data.url,        };      }      return file;    });    setFileList(fileList);  };  return (    &lt;Upload      name=\"image\"      listType=\"picture-card\"      className=\"avatar-uploader\"      showUploadList      action=\"http://geek.itheima.net/v1_0/upload\"      fileList={fileList}      onChange={onUploadChange}    &gt;      &lt;div style=&gt;        &lt;PlusOutlined /&gt;      &lt;/div&gt;    &lt;/Upload&gt;  );};5.切换图片 Type本节目标: 实现点击切换图片类型实现步骤  创建状态 maxCount  给 Radio 添加 onChange 监听单图、三图、无图的切换事件  在切换事件中修改 maxCount 值  只在 maxCount 不为零时展示 Upload 组件代码实现pages/Publish/index.jsconst Publish = () =&gt; {  const [imgCount, setImgCount] = useState(1);  const changeType = (e) =&gt; {    const count = e.target.value;    setImgCount(count);  };  return (    // ...    &lt;Form.Item label=\"封面\"&gt;      &lt;Form.Item name=\"type\"&gt;        &lt;Radio.Group onChange={changeType}&gt;          &lt;Radio value={1}&gt;单图&lt;/Radio&gt;          &lt;Radio value={3}&gt;三图&lt;/Radio&gt;          &lt;Radio value={0}&gt;无图&lt;/Radio&gt;        &lt;/Radio.Group&gt;      &lt;/Form.Item&gt;      {maxCount &gt; 0 &amp;&amp; (        &lt;Upload          name=\"image\"          listType=\"picture-card\"          className=\"avatar-uploader\"          showUploadList          action=\"http://geek.itheima.net/v1_0/upload\"        &gt;          &lt;div style=&gt;            &lt;PlusOutlined /&gt;          &lt;/div&gt;        &lt;/Upload&gt;      )}    &lt;/Form.Item&gt;  );};6. 控制最大上传数量本节目标: 控制 Upload 组件的最大上传数量和是否支持多张图片实现步骤  修改 Upload 组件的 maxCount（最大数量）属性控制最大上传数量  控制multiple （支持多图选择）属性 控制是否支持选择多张图片代码实现pages/Publish/index.jsconst Publish = () =&gt; {  return (    // ...    &lt;Form.Item label=\"封面\"&gt;      &lt;Form.Item name=\"type\"&gt;        &lt;Radio.Group onChange={changeType}&gt;          &lt;Radio value={1}&gt;单图&lt;/Radio&gt;          &lt;Radio value={3}&gt;三图&lt;/Radio&gt;          &lt;Radio value={0}&gt;无图&lt;/Radio&gt;        &lt;/Radio.Group&gt;      &lt;/Form.Item&gt;      {maxCount &gt; 0 &amp;&amp; (        &lt;Upload          name=\"image\"          listType=\"picture-card\"          className=\"avatar-uploader\"          showUploadList          action=\"http://geek.itheima.net/v1_0/upload\"          maxCount={maxCount}          multiple={maxCount &gt; 1}        &gt;          &lt;div style=&gt;            &lt;PlusOutlined /&gt;          &lt;/div&gt;        &lt;/Upload&gt;      )}    &lt;/Form.Item&gt;  );};7. 暂存图片列表实现本节目标: 能够实现暂存已经上传的图片列表，能够在切换图片类型的时候完成切换问题描述如果当前为三图模式，已经完成了上传，选择单图只显示一张，再切换到三图继续显示三张，该如何实现？实现思路在上传完毕之后通过 ref 存储所有图片，需要几张就显示几张，其实也就是把 ref 当仓库，用多少拿多少实现步骤 （特别注意 useState 异步更新的巨坑）  通过 useRef 创建一个暂存仓库，在上传完毕图片的时候把图片列表存入  如果是单图模式，就从仓库里取第一张图，以数组的形式存入 fileList  如果是三图模式，就把仓库里所有的图片，以数组的形式存入 fileList代码实现const Publish = () =&gt; {  // 1. 声明一个暂存仓库  const fileListRef = useRef([]);  // 2. 上传图片时，将所有图片存储到 ref 中  const onUploadChange = (info) =&gt; {    // ...    fileListRef.current = imgUrls;  };  // 3. 切换图片类型  const changeType = (e) =&gt; {    // 使用原始数据作为判断条件    const count = e.target.value;    setMaxCount(count);    if (count === 1) {      // 单图，只展示第一张      const firstImg = fileListRef.current[0];      setFileList(!firstImg ? [] : [firstImg]);    } else if (count === 3) {      // 三图，展示所有图片      setFileList(fileListRef.current);    }  };};8. 发布文章实现本节目标: 能够在表单提交时组装表单数据并调用接口发布文章实现步骤      给 Form 表单添加 onFinish 用来获取表单提交数据        在事件处理程序中，拿到表单数据按照接口需要格式化数据        调用接口实现文章发布，其中的接口数据格式为:    {   channel_id: 1   content: \"&lt;p&gt;测试&lt;/p&gt;\"   cover: {      type: 1,      images: [\"http://geek.itheima.net/uploads/1647066600515.png\"]   },   type: 1   title: \"测试文章\"}      代码实现const Publish = () =&gt; {  const onFinish = async (values) =&gt; {    // 数据的二次处理 重点是处理cover字段    const { channel_id, content, title, type } = values;    const params = {      channel_id,      content,      title,      type,      cover: {        type: type,        images: fileList.map((item) =&gt; item.response.data.url),      },    };    await http.post(\"/mp/articles?draft=false\", params);  };};9. 编辑文章-文案适配本节目标: 能够在编辑文章时展示数据实现步骤  通过路由参数拿到文章 id  根据文章 id 是否存在判断是否为编辑状态  如果是编辑状态，展示编辑时的文案信息代码实现import { useSearchParams } from 'react-router-dom'const Publish = () =&gt; {  const [params] = useSearchParams()  const articleId = params.get('id')  return (    &lt;Card      title={        &lt;Breadcrumb separator=\"&gt;\"&gt;          &lt;Breadcrumb.Item&gt;            &lt;Link to=\"/home\"&gt;首页&lt;/Link&gt;          &lt;/Breadcrumb.Item&gt;          &lt;Breadcrumb.Item&gt;            {articleId ? '修改文章' : '发布文章'}          &lt;/Breadcrumb.Item&gt;        &lt;/Breadcrumb&gt;      }    &gt;      // ...      &lt;Button size=\"large\" type=\"primary\" htmlType=\"submit\"&gt;        {articleId ? '修改文章' : '发布文章'}      &lt;/Button&gt;  )}10.编辑文章-数据获取本节目标: 使用 id 获取文章详情  判断文章 id 是否存在，如果存在就根据 id 获取文章详情数据useEffect(() =&gt; {  async function getArticle() {    const res = await http.get(`/mp/articles/${articleId}`);  }  if (articleId) {    // 拉取数据回显    getArticle();  }}, [articleId]);11. 编辑文章-回显 Form本节目标: 完成 Form 组件的回填操作  调用 Form 组件的实例对象方法 setFieldsValueuseEffect(() =&gt; {  async function getArticle() {    const res = await http.get(`/mp/articles/${articleId}`);    const { cover, ...formValue } = res.data;    // 动态设置表单数据    form.setFieldsValue({ ...formValue, type: cover.type });  }  if (articleId) {    // 拉取数据回显    getArticle();  }}, [articleId]);12. 编辑文章-回显 Upload 相关  1.Upload 回显列表 fileList 2. 暂存列表 cacheImgList 3. 图片数量 imgCount  核心要点：fileList 和暂存列表要求格式统一表单的赋值回显需要调用setFieldsValue方法，其中图片上传 upload 组件的回显依赖的数据格式如下：[  { url: 'http://geek.itheima.net/uploads/1647066120170.png' }  ...]代码实现useEffect(() =&gt; {  async function getArticle() {    const res = await http.get(`/mp/articles/${articleId}`);    const { cover, ...formValue } = res.data;    // 动态设置表单数据    form.setFieldsValue({ ...formValue, type: cover.type });    // 格式化封面图片数据    const imageList = cover.images.map((url) =&gt; ({ url }));    setFileList(imageList);    setMaxCount(cover.type);    fileListRef.current = imageList;  }  if (articleId) {    // 拉取数据回显    getArticle();  }}, [articleId]);11. 编辑保存本节目标: 能够在编辑文章时对文章进行修改代码实现// 提交表单const onFinish = async (values) =&gt; {  const { type, ...rest } = values;  const data = {    ...rest,    // 注意：接口会按照上传图片数量来决定单图 或 三图    cover: {      type,      images: fileList.map((item) =&gt; item.url),    },  };  if (articleId) {    // 编辑    await http.put(`/mp/articles/${data.id}?draft=false`, data);  } else {    // 新增    await http.post(\"/mp/articles?draft=false\", data);  }};项目打包1. 项目打包本节目标: 能够通过命令对项目进行打包使用步骤  在项目根目录下打开终端，输入打包命令：yarn build  等待打包完成，打包生成的内容被放在根下的 build 文件夹中2. 项目本地预览本节目标: 能够在本地预览打包后的项目使用步骤  全局安装本地服务包 npm i -g serve 该包提供了 serve 命令，用来启动本地服务  在项目根目录中执行命令 serve -s ./build 在 build 目录中开启服务器  在浏览器中访问：http://localhost:3000/ 预览项目3. 打包体积分析本节目标: 能够分析项目打包体积分析说明通过分析打包体积，才能知道项目中的哪部分内容体积过大，才能知道如何来优化使用步骤  安装分析打包体积的包：yarn add source-map-explorer  在 package.json 中的 scripts 标签中，添加分析打包体积的命令  对项目打包：yarn build（如果已经打过包，可省略这一步）  运行分析命令：yarn analyze  通过浏览器打开的页面，分析图表中的包体积核心代码：package.json 中：\"scripts\": {  \"analyze\": \"source-map-explorer 'build/static/js/*.js'\",}4. 优化-配置 CDN本节目标: 能够对第三方包使用 CDN 优化分析说明：通过 craco 来修改 webpack 配置，从而实现 CDN 优化核心代码craco.config.jsconst path = require(\"path\");const { whenProd, getPlugin, pluginByName } = require(\"@craco/craco\");module.exports = {  // webpack 配置  webpack: {    // 配置CDN    configure: (webpackConfig) =&gt; {      let cdn = {        js: [],        css: [],      };      // 只有生产环境才配置      whenProd(() =&gt; {        webpackConfig.externals = {          react: \"React\",          \"react-dom\": \"ReactDOM\",        };        cdn = {          js: [            \"https://cdn.bootcdn.net/ajax/libs/react/17.0.2/umd/react.production.min.js\",            \"https://cdn.bootcdn.net/ajax/libs/react-dom/17.0.2/umd/react-dom.production.min.js\",          ],          css: [],        };      });      const { isFound, match } = getPlugin(        webpackConfig,        pluginByName(\"HtmlWebpackPlugin\")      );      if (isFound) {        // 找到了HtmlWebpackPlugin的插件        match.userOptions.cdn = cdn;      }      return webpackConfig;    },  },};public/index.html &lt;body&gt;  &lt;div id=\"root\"&gt;&lt;/div&gt;  &lt;!-- 加载第三发包的 CDN 链接 --&gt;  &lt;% htmlWebpackPlugin.userOptions.cdn.js.forEach(cdnURL =&gt; { %&gt;  &lt;script src=\"&lt;%= cdnURL %&gt;\"&gt;&lt;/script&gt;  &lt;% }) %&gt;&lt;/body&gt;5. 优化-路由懒加载本节目标: 能够对路由进行懒加载实现代码分隔使用步骤  在 App 组件中，导入 Suspense 组件  在 路由 Router 内部，使用 Suspense 组件包裹组件内容  为 Suspense 组件提供 fallback 属性，指定 loading 占位内容  导入 lazy 函数，并修改为懒加载方式导入路由组件代码实现App.jsimport { Routes, Route } from \"react-router-dom\";import { HistoryRouter, history } from \"./utils/history\";import { AuthRoute } from \"./components/AuthRoute\";// 导入必要组件import { lazy, Suspense } from \"react\";// 按需导入路由组件const Login = lazy(() =&gt; import(\"./pages/Login\"));const Layout = lazy(() =&gt; import(\"./pages/Layout\"));const Home = lazy(() =&gt; import(\"./pages/Home\"));const Article = lazy(() =&gt; import(\"./pages/Article\"));const Publish = lazy(() =&gt; import(\"./pages/Publish\"));function App() {  return (    &lt;HistoryRouter history={history}&gt;      &lt;Suspense        fallback={          &lt;div            style=          &gt;            loading...          &lt;/div&gt;        }      &gt;        &lt;Routes&gt;          {/* 需要鉴权的路由 */}          &lt;Route            path=\"/\"            element={              &lt;AuthRoute&gt;                &lt;Layout /&gt;              &lt;/AuthRoute&gt;            }          &gt;            {/* 二级路由默认页面 */}            &lt;Route index element={&lt;Home /&gt;} /&gt;            &lt;Route path=\"article\" element={&lt;Article /&gt;} /&gt;            &lt;Route path=\"publish\" element={&lt;Publish /&gt;} /&gt;          &lt;/Route&gt;          {/* 不需要鉴权的路由 */}          &lt;Route path=\"/login\" element={&lt;Login /&gt;} /&gt;        &lt;/Routes&gt;      &lt;/Suspense&gt;    &lt;/HistoryRouter&gt;  );}export default App;查看效果我们可以在打包之后，通过切换路由，监控 network 面板资源的请求情况，验证是否分隔成功"
  },
  
  {
    "title": "React 基础",
    "url": "/blog.github.io/posts/reactBase/",
    "categories": "Client",
    "tags": "React",
    "date": "2022-02-12 22:58:36 +0800",
    





    "snippet": "React 基础React 介绍目标任务: 了解什么是 React 以及它的特点React 是什么​ 一个专注于构建用户界面的 JavaScript 库，和 vue 和 angular 并称前端三大框架，不夸张的说，react 引领了很多新思想，世界范围内是最流行的 js 前端框架，最近发布了 18 版本，加入了很多新特性​ React 英文文档（https://reactjs.org/）​ React 中文文档 （https://zh-hans.reactjs.org/）​ React 新文档 （https://beta.reactjs.org/）（开发中….）React 有什么特点      声明式 UI（JSX）    写 UI 就和写普通的 HTML 一样，抛弃命令式的繁琐实现            组件化    组件是 react 中最重要的内容，组件可以通过搭积木的方式拼成一个完整的页面，通过组件的抽象可以增加复用能力和提高可维护性        一次学习，矿平台编写    react 既可以开发 web 应用也可以使用同样的语法开发原生应用（react-native），比如安卓和 ios 应用，甚至可以使用 react 开发 VR 应用，想象力空间十足，react 更像是一个 元框架 为各种领域赋能  环境初始化目标任务: 能够独立使用 React 脚手架创建一个 react 项目1. 使用脚手架创建项目      打开命令行窗口        执行命令    npx create-react-app react-basic        说明：          npx create-react-app 是固定命令，create-react-app是 React 脚手架的名称      react-basic 表示项目名称，可以自定义，保持语义化      npx 命令会帮助我们临时安装 create-react-app 包，然后初始化项目完成之后会自自动删掉，所以不需要全局安装 create-react-app            启动项目    yarn startornpm start      2. 项目目录说明调整      目录说明                  src 目录是我们写代码进行项目开发的目录                    package.json 中俩个核心库：react 、react-dom                  目录调整          删除 src 目录下自带的所有文件，只保留 app.js 根组件和 index.js      创建 index.js 文件作为项目的入口文件，在这个文件中书写 react 代码即可            入口文件说明    import React from 'react'import ReactDOM from 'react-dom'import './index.css'// 引入根组件Appimport App from './App'// 通过调用ReactDOM的render方法渲染App根组件到id为root的dom节点上ReactDOM.render(  &lt;React.StrictMode&gt;    &lt;App /&gt;  &lt;/React.StrictMode&gt;,  document.getElementById('root'))      JSX 基础1. JSX 介绍目标任务: 能够理解什么是 JSX，JSX 的底层是什么概念：JSX 是 JavaScript XML（HTML）的缩写，表示在 JS 代码中书写 HTML 结构作用：在 React 中创建 HTML 结构（页面 UI 结构）优势：  采用类似于 HTML 的语法，降低学习成本，会 HTML 就会 JSX  充分利用 JS 自身的可编程能力创建 HTML 结构注意：JSX 并不是标准的 JS 语法，是 JS 的语法扩展，浏览器默认是不识别的，脚手架中内置的 @babel/plugin-transform-react-jsx 包，用来解析该语法2. JSX 中使用 js 表达式目标任务: 能够在 JSX 中使用表达式语法{ JS 表达式 }const name = '柴柴'&lt;h1&gt;你好，我叫{name}&lt;/h1&gt;   //    &lt;h1&gt;你好,我叫柴柴&lt;/h1&gt;可以使用的表达式  字符串、数值、布尔值、null、undefined、object（ [] / {} ）  1 + 2、’abc’.split(‘’)、[‘a’, ‘b’].join(‘-‘)  fn()特别注意​ if 语句/ switch-case 语句/ 变量声明语句，这些叫做语句，不是表达式，不能出现在 {} 中！！3. JSX 列表渲染目标任务: 能够在 JSX 中实现列表渲染  页面的构建离不开重复的列表结构，比如歌曲列表，商品列表等，我们知道 vue 中用的是 v-for，react 这边如何实现呢？实现：使用数组的map 方法案例：// 来个列表const songs = [  { id: 1, name: '痴心绝对' },  { id: 2, name: '像我这样的人' },  { id: 3, name: '南山南' },]function App() {  return (    &lt;div className=\"App\"&gt;      &lt;ul&gt;        {songs.map((item) =&gt; (          &lt;li&gt;{item.name}&lt;/li&gt;        ))}      &lt;/ul&gt;    &lt;/div&gt;  )}export default App注意点：需要为遍历项添加 key 属性  key 在 HTML 结构中是看不到的，是 React 内部用来进行性能优化时使用  key 在当前列表中要唯一的字符串或者数值（String/Number）  如果列表中有像 id 这种的唯一值，就用 id 来作为 key 值  如果列表中没有像 id 这种的唯一值，就可以使用 index（下标）来作为 key 值4. JSX 条件渲染目标任务: 能够在 JSX 中实现条件渲染作用：根据是否满足条件生成 HTML 结构，比如 Loading 效果实现：可以使用 三元运算符 或 逻辑与(&amp;&amp;)运算符案例：// 来个布尔值const flag = truefunction App() {  return (    &lt;div className=\"App\"&gt;      {/* 条件渲染字符串 */}      {flag ? 'react真有趣' : 'vue真有趣'}      {/* 条件渲染标签/组件 */}      {flag ? &lt;span&gt;this is span&lt;/span&gt; : null}    &lt;/div&gt;  )}export default App5. JSX 样式处理目标任务: 能够在 JSX 中实现 css 样式处理      行内样式 - style    function App() {  return (    &lt;div className=\"App\"&gt;      &lt;div style=&gt;this is a div&lt;/div&gt;    &lt;/div&gt;  )}export default App            行内样式 - style - 更优写法    const styleObj = {  color: red,}function App() {  return (    &lt;div className=\"App\"&gt;      &lt;div style={styleObj}&gt;this is a div&lt;/div&gt;    &lt;/div&gt;  )}export default App            类名 - className（推荐）    app.css    .title {  font-size: 30px;  color: blue;}        app.js    import './app.css'function App() {  return (    &lt;div className=\"App\"&gt;      &lt;div className=\"title\"&gt;this is a div&lt;/div&gt;    &lt;/div&gt;  )}export default App            类名 - className - 动态类名控制    import './app.css'const showTitle = truefunction App() {  return (    &lt;div className=\"App\"&gt;      &lt;div className={showTitle ? 'title' : ''}&gt;this is a div&lt;/div&gt;    &lt;/div&gt;  )}export default App      6. JSX 注意事项目标任务: 掌握 JSX 在实际应用时的注意事项  JSX 必须有一个根节点，如果没有根节点，可以使用&lt;&gt;&lt;/&gt;（幽灵节点）替代  所有标签必须形成闭合，成对闭合或者自闭合都可以  JSX 中的语法更加贴近 JS 语法，属性名采用驼峰命名法 class -&gt; className for -&gt; htmlFor  JSX 支持多行（换行），如果需要换行，需使用() 包裹，防止 bug 出现格式化配置目标任务: 基于 vscode 配置格式化工具，提高开发效率      安装 vsCode prettier 插件        修改配置文件 setting.json    {  \"git.enableSmartCommit\": true,  // 修改注释颜色  \"editor.tokenColorCustomizations\": {    \"comments\": {      \"fontStyle\": \"bold\",      \"foreground\": \"#82e0aa\"    }  },  // 配置文件类型识别  \"files.associations\": {    \"*.js\": \"javascript\",    \"*.json\": \"jsonc\",    \"*.cjson\": \"jsonc\",    \"*.wxss\": \"css\",    \"*.wxs\": \"javascript\"  },  \"extensions.ignoreRecommendations\": false,  \"files.exclude\": {    \"**/.DS_Store\": true,    \"**/.git\": true,    \"**/.hg\": true,    \"**/.svn\": true,    \"**/CVS\": true,    \"**/node_modules\": false,    \"**/tmp\": true  },  // \"javascript.implicitProjectConfig.experimentalDecorators\": true,  \"explorer.confirmDragAndDrop\": false,  \"typescript.updateImportsOnFileMove.enabled\": \"prompt\",  \"git.confirmSync\": false,  \"editor.tabSize\": 2,  \"editor.fontWeight\": \"500\",  \"[json]\": {},  \"editor.tabCompletion\": \"on\",  \"vsicons.projectDetection.autoReload\": true,  \"editor.fontFamily\": \"Monaco, 'Courier New', monospace, Meslo LG M for Powerline\",  \"[html]\": {    \"editor.defaultFormatter\": \"vscode.html-language-features\"  },  \"editor.fontSize\": 16,  \"debug.console.fontSize\": 14,  \"vsicons.dontShowNewVersionMessage\": true,  \"editor.minimap.enabled\": true,  \"emmet.extensionsPath\": [\"\"],  // vue eslint start 保存时自动格式化代码  \"editor.formatOnSave\": true,  // eslint配置项，保存时自动修复错误  \"editor.codeActionsOnSave\": {    \"source.fixAll\": true  },  \"vetur.ignoreProjectWarning\": true,  // 让vetur使用vs自带的js格式化工具  // uni-app和vue 项目使用  \"vetur.format.defaultFormatter.js\": \"vscode-typescript\",  \"javascript.format.semicolons\": \"remove\",  // // 指定 *.vue 文件的格式化工具为vetur  \"[vue]\": {    \"editor.defaultFormatter\": \"octref.vetur\"  },  // // 指定 *.js 文件的格式化工具为vscode自带  \"[javascript]\": {    \"editor.defaultFormatter\": \"vscode.typescript-language-features\"  },  // // 默认使用prettier格式化支持的文件  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",  \"prettier.jsxBracketSameLine\": true,  // 函数前面加个空格  \"javascript.format.insertSpaceBeforeFunctionParenthesis\": true,  \"prettier.singleQuote\": true,  \"prettier.semi\": false,  // eslint end  // react  // 当按tab键的时候，会自动提示  \"emmet.triggerExpansionOnTab\": true,  \"emmet.showAbbreviationSuggestions\": true,  \"emmet.includeLanguages\": {    // jsx的提示    \"javascript\": \"javascriptreact\",    \"vue-html\": \"html\",    \"vue\": \"html\",    \"wxml\": \"html\"  },  // end  \"[jsonc]\": {    \"editor.defaultFormatter\": \"vscode.json-language-features\"  },  // @路径提示  \"path-intellisense.mappings\": {    \"@\": \"${workspaceRoot}/src\"  },  \"security.workspace.trust.untrustedFiles\": \"open\",  \"git.ignoreMissingGitWarning\": true,  \"window.zoomLevel\": 1}      阶段小练习练习说明      拉取准备好的项目模块到本地 ，安装依赖，run 起来项目    https://gitee.com/react-course-series/react-jsx-demo        按照图示，完成 评论数据渲染 tab内容渲染 评论列表点赞和点踩 三个视图渲染  React 组件基础组件概念函数组件目标任务: 能够独立使用函数完成 react 组件的创建和渲染概念  使用 JS 的函数（或箭头函数）创建的组件，就叫做函数组件组件定义与渲染// 定义函数组件function HelloFn() {  return &lt;div&gt;这是我的第一个函数组件!&lt;/div&gt;}// 定义类组件function App() {  return (    &lt;div className=\"App\"&gt;      {/* 渲染函数组件 */}      &lt;HelloFn /&gt;      &lt;HelloFn&gt;&lt;/HelloFn&gt;    &lt;/div&gt;  )}export default App约定说明  组件的名称必须首字母大写，react 内部会根据这个来判断是组件还是普通的 HTML 标签      函数组件必须有返回值，表示该组件的 UI 结构；如果不需要渲染任何内容，则返回 null    组件就像 HTML 标签一样可以被渲染到页面中。组件表示的是一段结构内容，对于函数组件来说，渲染的内容是函数的返回值就是对应的内容  使用函数名称作为组件标签名称，可以成对出现也可以自闭合类组件目标任务: 能够独立完成类组件的创建和渲染  使用 ES6 的 class 创建的组件，叫做类（class）组件组件定义与渲染// 引入Reactimport React from 'react'// 定义类组件class HelloC extends React.Component {  render() {    return &lt;div&gt;这是我的第一个类组件!&lt;/div&gt;  }}function App() {  return (    &lt;div className=\"App\"&gt;      {/* 渲染类组件 */}      &lt;HelloC /&gt;      &lt;HelloC&gt;&lt;/HelloC&gt;    &lt;/div&gt;  )}export default App约定说明      类名称也必须以大写字母开头        类组件应该继承 React.Component 父类，从而使用父类中提供的方法或属性        类组件必须提供 render 方法render 方法必须有返回值，表示该组件的 UI 结构  事件绑定目标任务: 能够独立绑定任何事件并能获取到事件对象 e1. 如何绑定事件      语法    on + 事件名称 = { 事件处理程序 } ，比如：&lt;div onClick={()=&gt;{}}&gt;&lt;/div&gt;        注意点    react 事件采用驼峰命名法，比如：onMouseEnter、onFocus        样例    // 函数组件function HelloFn() {  // 定义事件回调函数  const clickHandler = () =&gt; {    console.log('事件被触发了')  }  return (    // 绑定事件    &lt;button onClick={clickHandler}&gt;click me!&lt;/button&gt;  )}// 类组件class HelloC extends React.Component {  // 定义事件回调函数  clickHandler = () =&gt; {    console.log('事件被触发了')  }  render() {    return (      // 绑定事件      &lt;button onClick={this.clickHandler}&gt;click me!&lt;/button&gt;    )  }}      2. 获取事件对象      通过事件处理程序的参数获取事件对象 e    // 函数组件function HelloFn() {  // 定义事件回调函数  const clickHandler = (e) =&gt; {    e.preventDefault()    console.log('事件被触发了', e)  }  return (    // 绑定事件    &lt;a href=\"http://www.baidu.com/\" onClick={clickHandler}&gt;      百度    &lt;/a&gt;  )}      组件状态目标任务: 能够为组件添加状态和修改状态的值  一个前提：在 react hook 出来之前，函数式组件是没有自己的状态的，所以我们统一通过类组件来讲解1. 初始化状态      通过 class 的实例属性 state 来初始化        state 的值是一个对象结构，表示一个组件可以有多个数据状态    class Counter extends React.Component {  // 初始化状态  state = {    count: 0,  }  render() {    return &lt;button&gt;计数器&lt;/button&gt;  }}      2. 读取状态      通过 this.state 来获取状态    class Counter extends React.Component {  // 初始化状态  state = {    count: 0,  }  render() {    // 读取状态    return &lt;button&gt;计数器{this.state.count}&lt;/button&gt;  }}      3. 修改状态      语法    this.setState({ 要修改的部分数据 })        setState 方法作用          修改 state 中的数据状态      更新 UI            思想    ​ 数据驱动视图，也就是只要修改数据状态，那么页面就会自动刷新，无需手动操作 dom        注意事项    ​ 不要直接修改 state 中的值，必须通过 setState 方法进行修改  class Counter extends React.Component {  // 定义数据  state = {    count: 0,  }  // 定义修改数据的方法  setCount = () =&gt; {    this.setState({      count: this.state.count + 1,    })  }  // 使用数据 并绑定事件  render() {    return &lt;button onClick={this.setCount}&gt;{this.state.count}&lt;/button&gt;  }}this 问题说明这里我们作为了解内容，随着 js 标准的发展，主流的写法已经变成了 class fields，无需考虑太多 this 问题React 的状态不可变目标任务: 能够理解不可变的意义并且知道在实际开发中如何修改状态概念：不要直接修改状态的值，而是基于当前状态创建新的状态值1. 错误的直接修改state = {  count: 0,  list: [1, 2, 3],  person: {    name: 'jack',    age: 18,  },}// 直接修改简单类型Numberthis.state.count++++this.state.countthis.state.count += 1this.state.count = 1// 直接修改数组this.state.list.push(123)this.state.list.spice(1, 1)// 直接修改对象this.state.person.name = 'rose'2. 基于当前状态创建新值this.setState({    count: this.state.count + 1    list: [...this.state.list, 4],    person: {       ...this.state.person,       // 覆盖原来的属性 就可以达到修改对象中属性的目的       name: 'rose'    }})表单处理目标任务: 能够使用受控组件的方式获取文本框的值使用 React 处理表单元素，一般有俩种方式：      受控组件 （推荐使用）        非受控组件 （了解）  1. 受控表单组件  什么是受控组件？ input框自己的状态被React组件状态控制  React 组件的状态的地方是在 state 中，input 表单元素也有自己的状态是在 value 中，React 将 state 与表单元素的值（value）绑定到一起，由 state 的值来控制表单元素的值，从而保证单一数据源特性实现步骤以获取文本框的值为例，受控组件的使用步骤如下：  在组件的 state 中声明一个组件的状态数据  将状态数据设置为 input 标签元素的 value 属性的值      为 input 添加 change 事件，在事件处理程序中，通过事件对象 e 获取到当前文本框的值（即用户当前输入的值）    调用 setState 方法，将文本框的值作为 state 状态的最新值代码落地import React from 'react'class InputComponent extends React.Component {  // 声明组件状态  state = {    message: 'this is message',  }  // 声明事件回调函数  changeHandler = (e) =&gt; {    this.setState({ message: e.target.value })  }  render() {    return (      &lt;div&gt;        {/* 绑定value 绑定事件*/}        &lt;input value={this.state.message} onChange={this.changeHandler} /&gt;      &lt;/div&gt;    )  }}function App() {  return (    &lt;div className=\"App\"&gt;      &lt;InputComponent /&gt;    &lt;/div&gt;  )}export default App2. 非受控表单组件  什么是非受控组件？  非受控组件就是通过手动操作 dom 的方式获取文本框的值，文本框的状态不受 react 组件的 state 中的状态控制，直接通过原生 dom 获取输入框的值实现步骤  导入createRef 函数  调用 createRef 函数，创建一个 ref 对象，存储到名为msgRef的实例属性中  为 input 添加 ref 属性，值为msgRef  在按钮的事件处理程序中，通过msgRef.current即可拿到 input 对应的 dom 元素，而其中msgRef.current.value拿到的就是文本框的值代码落地import React, { createRef } from 'react'class InputComponent extends React.Component {  // 使用createRef产生一个存放dom的对象容器  msgRef = createRef()  changeHandler = () =&gt; {    console.log(this.msgRef.current.value)  }  render() {    return (      &lt;div&gt;        {/* ref绑定 获取真实dom */}        &lt;input ref={this.msgRef} /&gt;        &lt;button onClick={this.changeHandler}&gt;click&lt;/button&gt;      &lt;/div&gt;    )  }}function App() {  return (    &lt;div className=\"App\"&gt;      &lt;InputComponent /&gt;    &lt;/div&gt;  )}export default App阶段小练习练习说明      拉取项目模板到本地，安装依赖，run 起来项目    https://gitee.com/react-course-series/react-component-demo        完成 tab 点击切换激活状态交互        完成发表评论功能    注意：生成独立无二的 id 可以使用 uuid 包 yarn add uuid    import { v4 as uuid } from 'uuid'uuid() // 得到一个独一无二的id            完成删除评论功能  React 组件通信组件通信的意义目标任务: 了解为什么需要组件通信组件是独立且封闭的单元，默认情况下组件只能使用自己的数据（state）组件化开发的过程中，完整的功能会拆分多个组件，在这个过程中不可避免的需要互相传递一些数据为了能让各组件之间可以进行互相沟通，数据传递，这个过程就是组件通信  父子关系 - 最重要的  兄弟关系 - 自定义事件模式产生技术方法 eventBus / 通过共同的父组件通信  其它关系 - mobx / redux / 基于 hook 的方案父传子实现目标任务: 实现父子通信中的父传子，把父组件中的数据传给子组件实现步骤      父组件提供要传递的数据 - state        给子组件标签添加属性值为 state 中的数据        子组件中通过 props 接收父组件中传过来的数据          类组件使用 this.props 获取 props 对象      函数式组件直接通过参数获取 props 对象      代码实现import React from 'react'// 函数式子组件function FSon(props) {  console.log(props)  return (    &lt;div&gt;      子组件1      {props.msg}    &lt;/div&gt;  )}// 类子组件class CSon extends React.Component {  render() {    return (      &lt;div&gt;        子组件2        {this.props.msg}      &lt;/div&gt;    )  }}// 父组件class App extends React.Component {  state = {    message: 'this is message',  }  render() {    return (      &lt;div&gt;        &lt;div&gt;父组件&lt;/div&gt;        &lt;FSon msg={this.state.message} /&gt;        &lt;CSon msg={this.state.message} /&gt;      &lt;/div&gt;    )  }}export default Appprops 说明目标任务: 知道 props 传递时的一些注意事项1. props 是只读对象（readonly）根据单项数据流的要求，子组件只能读取 props 中的数据，不能进行修改2. props 可以传递任意数据数字、字符串、布尔值、数组、对象、函数、JSXclass App extends React.Component {  state = {    message: 'this is message',  }  render() {    return (      &lt;div&gt;        &lt;div&gt;父组件&lt;/div&gt;        &lt;FSon          msg={this.state.message}          age={20}          isMan={true}          cb={() =&gt; {            console.log(1)          }}          child={&lt;span&gt;this is child&lt;/span&gt;}        /&gt;        &lt;CSon msg={this.state.message} /&gt;      &lt;/div&gt;    )  }}子传父实现目标任务: 实现父子通信中的子传父口诀： 父组件给子组件传递回调函数，子组件调用实现步骤  父组件提供一个回调函数 - 用于接收数据  将函数作为属性的值，传给子组件  子组件通过 props 调用 回调函数  将子组件中的数据作为参数传递给回调函数代码实现import React from 'react'// 子组件function Son(props) {  function handleClick() {    // 调用父组件传递过来的回调函数 并注入参数    props.changeMsg('this is newMessage')  }  return (    &lt;div&gt;      {props.msg}      &lt;button onClick={handleClick}&gt;change&lt;/button&gt;    &lt;/div&gt;  )}class App extends React.Component {  state = {    message: 'this is message',  }  // 提供回调函数  changeMessage = (newMsg) =&gt; {    console.log('子组件传过来的数据:', newMsg)    this.setState({      message: newMsg,    })  }  render() {    return (      &lt;div&gt;        &lt;div&gt;父组件&lt;/div&gt;        &lt;Son          msg={this.state.message}          // 传递给子组件          changeMsg={this.changeMessage}        /&gt;      &lt;/div&gt;    )  }}export default App兄弟组件通信目标任务: 实现兄弟组件之间的通信核心思路： 通过状态提升机制，利用共同的父组件实现兄弟通信实现步骤      将共享状态提升到最近的公共父组件中，由公共父组件管理这个状态                  提供共享状态                    提供操作共享状态的方法              要接收数据状态的子组件通过 props 接收数据  要传递数据状态的子组件通过 props 接收方法，调用方法传递数据代码实现import React from 'react'// 子组件Afunction SonA(props) {  return (    &lt;div&gt;      SonA      {props.msg}    &lt;/div&gt;  )}// 子组件Bfunction SonB(props) {  return (    &lt;div&gt;      SonB      &lt;button onClick={() =&gt; props.changeMsg('new message')}&gt;changeMsg&lt;/button&gt;    &lt;/div&gt;  )}// 父组件class App extends React.Component {  // 父组件提供状态数据  state = {    message: 'this is message',  }  // 父组件提供修改数据的方法  changeMsg = (newMsg) =&gt; {    this.setState({      message: newMsg,    })  }  render() {    return (      &lt;&gt;        {/* 接收数据的组件 */}        &lt;SonA msg={this.state.message} /&gt;        {/* 修改数据的组件 */}        &lt;SonB changeMsg={this.changeMsg} /&gt;      &lt;/&gt;    )  }}export default App跨组件通信 Context目标任务: 了解 Context 机制解决的问题和使用步骤问题场景  上图是一个 react 形成的嵌套组件树，如果我们想从 App 组件向任意一个下层组件传递数据，该怎么办呢？目前我们能采取的方式就是一层一层的 props 往下传，显然很繁琐  那么，Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法实现步骤      创建 Context 对象 导出 Provider 和 Consumer 对象    const { Provider, Consumer } = createContext()            使用 Provider 包裹根组件提供数据    &lt;Provider value={this.state.message}&gt;{/* 根组件 */}&lt;/Provider&gt;            需要用到数据的组件使用 Consumer 包裹获取数据    &lt;Consumer &gt;    {value =&gt; /* 基于 context 值进行渲染*/}&lt;/Consumer&gt;      代码实现import React, { createContext } from 'react'// 1. 创建Context对象const { Provider, Consumer } = createContext()// 3. 消费数据function ComC() {  return &lt;Consumer&gt;{(value) =&gt; &lt;div&gt;{value}&lt;/div&gt;}&lt;/Consumer&gt;}function ComA() {  return &lt;ComC /&gt;}// 2. 提供数据class App extends React.Component {  state = {    message: 'this is message',  }  render() {    return (      &lt;Provider value={this.state.message}&gt;        &lt;div className=\"app\"&gt;          &lt;ComA /&gt;        &lt;/div&gt;      &lt;/Provider&gt;    )  }}export default App阶段小练习  要求：App 为父组件用来提供列表数据 ，ListItem 为子组件用来渲染列表数据// 列表数据;[  { id: 1, name: '超级好吃的棒棒糖', price: 18.8, info: '开业大酬宾，全场8折' },  { id: 2, name: '超级好吃的大鸡腿', price: 34.2, info: '开业大酬宾，全场8折' },  { id: 3, name: '超级无敌的冰激凌', price: 14.2, info: '开业大酬宾，全场8折' },]完整代码import React from 'react'// 子组件function ListItem(props) {  const { name, price, info, id, delHandler } = props  return (    &lt;div&gt;      &lt;h3&gt;{name}&lt;/h3&gt;      &lt;p&gt;{price}&lt;/p&gt;      &lt;p&gt;{info}&lt;/p&gt;      &lt;button onClick={() =&gt; delHandler(id)}&gt;删除&lt;/button&gt;    &lt;/div&gt;  )}// 父组件class App extends React.Component {  state = {    list: [      {        id: 1,        name: '超级好吃的棒棒糖',        price: 18.8,        info: '开业大酬宾，全场8折',      },      {        id: 2,        name: '超级好吃的大鸡腿',        price: 34.2,        info: '开业大酬宾，全场8折',      },      {        id: 3,        name: '超级无敌的冰激凌',        price: 14.2,        info: '开业大酬宾，全场8折',      },    ],  }  delHandler = (id) =&gt; {    this.setState({      list: this.state.list.filter((item) =&gt; item.id !== id),    })  }  render() {    return (      &lt;&gt;        {this.state.list.map((item) =&gt; (          &lt;ListItem key={item.id} {...item} delHandler={this.delHandler} /&gt;        ))}      &lt;/&gt;    )  }}export default AppReact 组件进阶children 属性目标任务: 掌握 props 中 children 属性的用法children 属性是什么表示该组件的子节点，只要组件内部有子节点，props 中就有该属性children 可以是什么  普通文本  普通标签元素  函数  JSXprops 校验-场景和使用目标任务: 掌握组件 props 的校验写法，增加组件的健壮性  对于组件来说，props 是由外部传入的，我们其实无法保证组件使用者传入了什么格式的数据，如果传入的数据格式不对，就有可能会导致组件内部错误，有一个点很关键 - 组件的使用者可能报错了也不知道为什么，看下面的例子面对这样的问题，如何解决？ props 校验实现步骤  安装属性校验包：yarn add prop-types  导入prop-types 包  使用 组件名.propTypes = {} 给组件添加校验规则核心代码import PropTypes from 'prop-types'const List = (props) =&gt; {  const arr = props.colors  const lis = arr.map((item, index) =&gt; &lt;li key={index}&gt;{item.name}&lt;/li&gt;)  return &lt;ul&gt;{lis}&lt;/ul&gt;}List.propTypes = {  colors: PropTypes.array,}props 校验-规则说明目标任务: 掌握 props 常见的规则四种常见结构  常见类型：array、bool、func、number、object、string  React 元素类型：element  必填项：isRequired  特定的结构对象：shape({})核心代码// 常见类型optionalFunc: PropTypes.func,// 必填 只需要在类型后面串联一个isRequiredrequiredFunc: PropTypes.func.isRequired,// 特定结构的对象optionalObjectWithShape: PropTypes.shape({\tcolor: PropTypes.string,\tfontSize: PropTypes.number})官网文档更多阅读：https://reactjs.org/docs/typechecking-with-proptypes.htmlprops 校验-默认值目标任务: 掌握如何给组件的 props 提供默认值  通过 defaultProps 可以给组件的 props 设置默认值，在未传入 props 的时候生效1. 函数组件直接使用函数参数默认值function List({ pageSize = 10 }) {  return &lt;div&gt;此处展示props的默认值：{pageSize}&lt;/div&gt;}// 不传入pageSize属性;&lt;List /&gt;2. 类组件使用类静态属性声明默认值，static defaultProps = {}class List extends Component {  static defaultProps = {    pageSize: 10,  }  render() {    return &lt;div&gt;此处展示props的默认值：{this.props.pageSize}&lt;/div&gt;  }};&lt;List /&gt;生命周期 - 概述目标任务: 能够说出组件生命周期一共几个阶段  组件的生命周期是指组件从被创建到挂载到页面中运行起来，再到组件不用时卸载的过程，注意，只有类组件才有生命周期（类组件 实例化 函数组件 不需要实例化）http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/生命周期 - 挂载阶段目标任务: 能够说出在组件挂载阶段执行的钩子函数和执行时机            钩子 函数      触发时机      作用                  constructor      创建组件时，最先执行，初始化的时候只执行一次      1. 初始化 state 2. 创建 Ref 3. 使用 bind 解决 this 指向问题等              render      每次组件渲染都会触发      渲染 UI（注意： 不能在里面调用 setState() ）              componentDidMount      组件挂载（完成 DOM 渲染）后执行，初始化的时候执行一次      1. 发送网络请求 2.DOM 操作      生命周期 - 更新阶段目标任务: 能够说出组件的更新阶段的钩子函数以及执行时机            钩子函数      触发时机      作用                  render      每次组件渲染都会触发      渲染 UI（与 挂载阶段 是同一个 render）              componentDidUpdate      组件更新后（DOM 渲染完毕）      DOM 操作，可以获取到更新后的 DOM 内容，不要直接调用 setState      生命周期 - 卸载阶段目标任务: 能够说出组件的销毁阶段的钩子函数以及执行时机            钩子函数      触发时机      作用                  componentWillUnmount      组件卸载（从页面中消失）      执行清理工作（比如：清理定时器等）      阶段小练习 - todoMVC案例仓库地址：https://gitee.com/react-course-series/react-todo-mvc项目演示步骤：      克隆项目到本地    git clone  https://gitee.com/react-course-series/react-todo-mvc.git            安装必要依赖    yarn            开启 mock 接口服务，保持窗口不关闭 ！！！！！    # 启动mock服务yarn mock-serve            另起一个 bash 窗口开启前端服务    yarn start            浏览器输入 localhost:3000 演示效果  项目开发步骤：      切换到 todo-test 分支    git checkout todo-test            打开 app.js    已有基础样板代码，在这个基础上编写业务逻辑即可        接口文档              接口作用      接口地址      接口方法      接口参数                  获取列表      http://localhost:3001/data      GET      无              删除      http://localhost:3001/data/:id      DELETE      id              搜索      http://localhost:3001/data/?q=keyword      GET      name（以 name 字段搜索）      实现功能            功能      核心思路                  表格数据渲染      elementPlus el-table 组件使用              删除功能      获取当前 id 调用接口              搜索功能      用的依旧是列表接口，多传一个 name 参数              清除搜索功能      清空搜索参数 重新获取列表      Hooks 基础Hooks 概念理解本节任务: 能够理解 hooks 的概念及解决的问题1. 什么是 hooks  Hooks 的本质：一套能够使函数组件更强大，更灵活的“钩子”React 体系里组件分为 类组件 和 函数组件经过多年的实战，函数组件是一个更加匹配 React 的设计理念 UI = f(data)，也更有利于逻辑拆分与重用的组件表达形式，而先前的函数组件是不可以有自己的状态的，为了能让函数组件可以拥有自己的状态，所以从 react v16.8 开始，Hooks 应运而生注意点：  有了 hooks 之后，为了兼容老版本，class 类组件并没有被移除，俩者都可以使用  有了 hooks 之后，不能在把函数成为无状态组件了，因为 hooks 为函数组件提供了状态  hooks 只能在函数组件中使用2. Hooks 解决了什么问题Hooks 的出现解决了俩个问题 1. 组件的状态逻辑复用 2.class 组件自身的问题      组件的逻辑复用    在 hooks 出现之前，react 先后尝试了 mixins 混入，HOC 高阶组件，render-props 等模式    但是都有各自的问题，比如 mixin 的数据来源不清晰，高阶组件的嵌套问题等等        class 组件自身的问题    class 组件就像一个厚重的‘战舰’ 一样，大而全，提供了很多东西，有不可忽视的学习成本，比如各种生命周期，this 指向问题等等，而我们更多时候需要的是一个轻快灵活的’快艇’  useState1. 基础使用本节任务: 能够学会 useState 的基础用法作用​ useState 为函数组件提供状态（state）使用步骤  导入 useState 函数  调用 useState 函数，并传入状态的初始值  从useState函数的返回值中，拿到状态和修改状态的方法  在 JSX 中展示状态  调用修改状态的方法更新状态代码实现import { useState } from 'react'function App() {  // 参数：状态初始值比如,传入 0 表示该状态的初始值为 0  // 返回值：数组,包含两个值：1 状态值（state） 2 修改该状态的函数（setState）  const [count, setCount] = useState(0)  return (    &lt;button      onClick={() =&gt; {        setCount(count + 1)      }}&gt;      {count}    &lt;/button&gt;  )}export default App2. 状态的读取和修改本节任务: 能够理解 useState 下状态的读取和修改读取状态​ 该方式提供的状态，是函数内部的局部变量，可以在函数内的任意位置使用修改状态  setCount 是一个函数，参数表示最新的状态值  调用该函数后，将使用新值替换旧值  修改状态后，由于状态发生变化，会引起视图变化注意事项​ 修改状态的时候，一定要使用新的状态替换旧的状态，不能直接修改旧的状态，尤其是引用类型3. 组件的更新过程本节任务: 能够理解使用 hook 之后组件的更新情况函数组件使用 useState hook 后的执行过程，以及状态值的变化      组件第一次渲染          从头开始执行该组件中的代码逻辑      调用 useState(0) 将传入的参数作为状态初始值，即：0      渲染组件，此时，获取到的状态 count 值为： 0            组件第二次渲染          点击按钮，调用 setCount(count + 1) 修改状态，因为状态发生改变，所以，该组件会重新渲染      组件重新渲染时，会再次执行该组件中的代码逻辑      再次调用 useState(0)，此时 React 内部会拿到最新的状态值而非初始值，比如，该案例中最新的状态值为 1      再次渲染组件，此时，获取到的状态 count 值为：1      注意：useState 的初始值(参数)只会在组件第一次渲染时生效。也就是说，以后的每次渲染，useState 获取到都是最新的状态值，React 组件会记住每次最新的状态值import { useState } from 'react'function App() {  const [count, setCount] = useState(0)  // 在这里可以进行打印测试  console.log(count)  return (    &lt;button      onClick={() =&gt; {        setCount(count + 1)      }}&gt;      {count}    &lt;/button&gt;  )}export default App4. 使用规则本节任务: 能够记住 useState 的使用规则      useState 函数可以执行多次，每次执行互相独立，每调用一次为函数组件提供一个状态    function List() {  // 以字符串为初始值  const [name, setName] = useState('cp')  // 以数组为初始值  const [list, setList] = useState([])}            useState 注意事项                  只能出现在函数组件中                    不能嵌套在 if/for/其它函数中（react 按照 hooks 的调用顺序识别每一个 hook）        let num = 1function List() {  num++  if (num / 2 === 0) {    const [name, setName] = useState('cp')  }  const [list, setList] = useState([])}// 俩个hook的顺序不是固定的，这是不可以的！！！                            可以通过开发者工具查看 hooks 状态            useEffect1. 理解函数副作用本节任务: 能够理解副作用的概念什么是副作用​ 副作用是相对于主作用来说的，一个函数除了主作用，其他的作用就是副作用。对于 React 组件来说，主作用就是根据数据（state/props）渲染 UI，除此之外都是副作用（比如，手动修改 DOM）常见的副作用  数据请求 ajax 发送  手动修改 dom  localstorage 操作useEffect 函数的作用就是为 react 函数组件提供副作用处理的！2. 基础使用本节任务: 能够学会 useEffect 的基础用法并且掌握默认的执行执行时机作用​ 为 react 函数组件提供副作用处理使用步骤  导入 useEffect 函数  调用 useEffect 函数，并传入回调函数  在回调函数中编写副作用处理（dom 操作）  修改数据状态  检测副作用是否生效代码实现import { useEffect, useState } from 'react'function App() {  const [count, setCount] = useState(0)  useEffect(() =&gt; {    // dom操作    document.title = `当前已点击了${count}次`  })  return (    &lt;button      onClick={() =&gt; {        setCount(count + 1)      }}&gt;      {count}    &lt;/button&gt;  )}export default App3. 依赖项控制执行时机本节任务: 能够学会使用依赖项控制副作用的执行时机1. 不添加依赖项  组件首次渲染执行一次，以及不管是哪个状态更改引起组件更新时都会重新执行      组件初始渲染    组件更新 （不管是哪个状态引起的更新）  useEffect(() =&gt; {  console.log('副作用执行了')})2. 添加空数组  组件只在首次渲染时执行一次useEffect(() =&gt; {  console.log('副作用执行了')}, [])3. 添加特定依赖项  副作用函数在首次渲染时执行，在依赖项发生变化时重新执行function App() {  const [count, setCount] = useState(0)  const [name, setName] = useState('zs')  useEffect(() =&gt; {    console.log('副作用执行了')  }, [count])  return (    &lt;&gt;      &lt;button        onClick={() =&gt; {          setCount(count + 1)        }}&gt;        {count}      &lt;/button&gt;      &lt;button        onClick={() =&gt; {          setName('cp')        }}&gt;        {name}      &lt;/button&gt;    &lt;/&gt;  )}注意事项useEffect 回调函数中用到的数据（比如，count）就是依赖数据，就应该出现在依赖项数组中，如果不添加依赖项就会有 bug 出现阶段小练习 - 自定义 hook需求描述：自定义一个 hook 函数，实现获取滚动距离 Y  const [y] = useWindowScroll()import { useState } from 'react'export function useWindowScroll() {  const [y, setY] = useState(0)  window.addEventListener('scroll', () =&gt; {    const h = document.documentElement.scrollTop    setY(h)  })  return [y]}需求描述： 自定义 hook 函数，可以自动同步到本地 LocalStorage  const [message, setMessage] = useLocalStorage(key，defaultValue)      message 可以通过自定义传入默认初始值    每次修改 message 数据的时候 都会自动往本地同步一份  import { useEffect, useState } from 'react'export function useLocalStorage(key, defaultValue) {  const [message, setMessage] = useState(defaultValue)  // 每次只要message变化 就会自动同步到本地ls  useEffect(() =&gt; {    window.localStorage.setItem(key, message)  }, [message, key])  return [message, setMessage]}Hooks 进阶useState - 回调函数的参数本节任务: 能够理解 useState 回调函数作为参数的使用场景使用场景参数只会在组件的初始渲染中起作用，后续渲染时会被忽略。如果初始 state 需要通过计算才能获得，则可以传入一个函数，在函数中计算并返回初始的 state，此函数只在初始渲染时被调用语法const [name, setName] = useState(()=&gt;{    // 编写计算逻辑    return '计算之后的初始值'})语法规则  回调函数 return 出去的值将作为 name 的初始值  回调函数中的逻辑只会在组件初始化的时候执行一次语法选择  如果就是初始化一个普通的数据 直接使用 useState(普通数据) 即可  如果要初始化的数据无法直接得到需要通过计算才能获取到，使用useState(()=&gt;{})来个需求import { useState } from 'react'function Counter(props) {  const [count, setCount] = useState(() =&gt; {    return props.count  })  return (    &lt;div&gt;      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;{count}&lt;/button&gt;    &lt;/div&gt;  )}function App() {  return (    &lt;&gt;      &lt;Counter count={10} /&gt;      &lt;Counter count={20} /&gt;    &lt;/&gt;  )}export default AppuseEffect - 清理副作用本节任务: 能够掌握清理 useEffect 的方法使用场景在组件被销毁时，如果有些副作用操作需要被清理，就可以使用此语法，比如常见的定时器语法及规则useEffect(() =&gt; {  console.log('副作用函数执行了')  // 副作用函数的执行时机为: 在下一次副作用函数执行之前执行  return () =&gt; {    console.log('清理副作用的函数执行了')    // 在这里写清理副作用的代码  }})定时器小案例  添加副作用函数前：组件虽然已经不显示了，但是定时器依旧在运行import { useEffect, useState } from 'react'function Foo() {  useEffect(() =&gt; {    setInterval(() =&gt; {      console.log('副作用函数执行了')    }, 1000)  })  return &lt;div&gt;Foo&lt;/div&gt;}function App() {  const [flag, setFlag] = useState(true)  return (    &lt;&gt;      &lt;button onClick={() =&gt; setFlag(false)}&gt;click&lt;/button&gt;      {flag ? &lt;Foo /&gt; : null}    &lt;/&gt;  )}export default App  添加清理副作用函数后：一旦组件被销毁，定时器也被清理import { useEffect, useState } from 'react'function Foo() {  useEffect(() =&gt; {    const timerId = setInterval(() =&gt; {      console.log('副作用函数执行了')    }, 1000)    // 添加清理副租用函数    return () =&gt; {      clearInterval(timerId)    }  })  return &lt;div&gt;Foo&lt;/div&gt;}function App() {  const [flag, setFlag] = useState(true)  return (    &lt;&gt;      &lt;button onClick={() =&gt; setFlag(false)}&gt;click&lt;/button&gt;      {flag ? &lt;Foo /&gt; : null}    &lt;/&gt;  )}export default AppuseEffect - 发送网络请求本节任务: 能够掌握使用 useEffect hook 发送网络请求使用场景如何在 useEffect 中发送网络请求，并且封装同步 async await 操作语法要求不可以直接在 useEffect 的回调函数外层直接包裹 await ，因为异步会导致清理函数无法立即返回useEffect(async () =&gt; {  const res = await axios.get('http://geek.itheima.net/v1_0/channels')  console.log(res)}, [])正确写法在内部单独定义一个函数，然后把这个函数包装成同步useEffect(()=&gt;{    async function fetchData(){       const res = await axios.get('http://geek.itheima.net/v1_0/channels')                            console.log(res)    }},[])useRef本节任务: 能够掌握使用 useRef 获取真实 dom 或组件实例的方法使用场景在函数组件中获取真实的 dom 元素对象或者是组件对象使用步骤  导入 useRef 函数  执行 useRef 函数并传入 null，返回值为一个对象 内部有一个 current 属性存放拿到的 dom 对象（组件实例）  通过 ref 绑定 要获取的元素或者组件获取 domimport { useEffect, useRef } from 'react'function App() {  const h1Ref = useRef(null)  useEffect(() =&gt; {    console.log(h1Ref)  }, [])  return (    &lt;div&gt;      &lt;h1 ref={h1Ref}&gt;this is h1&lt;/h1&gt;    &lt;/div&gt;  )}export default App获取组件实例  函数组件由于没有实例，不能使用 ref 获取，如果想获取组件实例，必须是类组件Foo.jsclass Foo extends React.Component {  sayHi = () =&gt; {    console.log('say hi')  }  render() {    return &lt;div&gt;Foo&lt;/div&gt;  }}export default FooApp.jsimport { useEffect, useRef } from 'react'import Foo from './Foo'function App() {  const h1Foo = useRef(null)  useEffect(() =&gt; {    console.log(h1Foo)  }, [])  return (    &lt;div&gt;      {' '}      &lt;Foo ref={h1Foo} /&gt;    &lt;/div&gt;  )}export default AppuseContext本节任务: 能够掌握 hooks 下的 context 使用方式实现步骤  使用createContext 创建 Context 对象  在顶层组件通过Provider 提供数据  在底层组件通过useContext函数获取数据代码实现import { createContext, useContext } from 'react'// 创建Context对象const Context = createContext()function Foo() {  return (    &lt;div&gt;      Foo &lt;Bar /&gt;    &lt;/div&gt;  )}function Bar() {  // 底层组件通过useContext函数获取数据  const name = useContext(Context)  return &lt;div&gt;Bar {name}&lt;/div&gt;}function App() {  return (    // 顶层组件通过Provider 提供数据    &lt;Context.Provider value={'this is name'}&gt;      &lt;div&gt;        &lt;Foo /&gt;      &lt;/div&gt;    &lt;/Context.Provider&gt;  )}export default App阶段小练习-todoMvc-hook 版案例仓库地址：https://gitee.com/react-course-series/react-tomvc-hook项目演示步骤：      克隆项目到本地    git clone  https://gitee.com/react-course-series/react-tomvc-hook.git            安装必要依赖    yarn            开启 mock 接口服务，保持窗口不关闭 ！！！！！    # 启动mock服务yarn mock-serve            另起一个 bash 窗口开启前端服务    yarn start            浏览器输入 localhost:3000 演示效果  项目开发步骤：      切换到 todo-test 分支    git checkout todo-test            打开 app.js    已有基础样板代码，在这个基础上编写业务逻辑即可        接口文档              接口作用      接口地址      接口方法      接口参数                  获取列表      http://localhost:3001/data      GET      无              删除      http://localhost:3001/data/:id      DELETE      id              搜索      http://localhost:3001/data/?q=keyword      GET      name（以 name 字段搜索）      实现功能            功能      核心思路                  表格数据渲染      elementPlus el-table 组件使用              删除功能      获取当前 id 调用接口              搜索功能      用的依旧是列表接口，多传一个 name 参数              清除搜索功能      清空搜索参数 重新获取列表      "
  },
  
  {
    "title": "InternetPrinciples（04735）",
    "url": "/blog.github.io/posts/InternetPrinciples/",
    "categories": "ComputerBasics",
    "tags": "network, SelfStudy",
    "date": "2021-03-20 13:57:01 +0800",
    





    "snippet": "第一章 计算机概述1 计算机网络基本概念网络协议- 网络通讯实体之间的在数据交换过程中需要遵循的规则或约定- 三要素    - 语法（syntax）    - 语义（semantics）    - 时序（timing） #### 网络功能（核心功能：资源共享）- 硬件资源共享- 软件资源共享- 信息资源共享 #### 网络分类- 按覆盖范围分类    - 个域网：PAN 1-10m     - 局域网：LAN 10m-1km     - 城域网：MAN 5-50km     - 广域网：WAN 几十到几千米- 按拓扑结构分类    - 星形拓扑结构：易监管，故障诊断隔离；中央结点网络瓶颈，一旦故障全网瘫痪；受限中央结点    - 总线型拓扑结构：所需电缆数少，易于扩展；通信范围受限，故障诊断与隔离难，容易发生冲突    - 环形拓扑结构：所需电缆短，可以使用光纤，易于避免冲突；某结点故障全网瘫痪，加入新结点撤出比较麻烦，存在等待时间    - 网状拓扑结构：可靠性高，一条或多态线路故障，网络仍然可联通；结构复杂，造假成本高，选路协议复杂    - 树形拓扑结构：易于扩展，故障隔离容易；对根结点可靠性高，根结点故障，导致大范围无法通讯    - 混合拓扑结构：**大多数实际网络拓扑属于混合网络（Internet）**；易扩展，构建不同规模，可根据需求选网络结构；网络结构复杂，管理维护复杂- 按交换方式分类    - 电路交换    - 报文交换    - 分组交换- 按网络用户分类    - 公用网    - 私有网 ### 2 计算机网络结构 - 网络边缘：计算机、服务器、智能手机、智能传感器...... - 网络接入- 电话拨号揭露- 非对称数字用户线路ADSL- 混合光纤同轴HFC揭露- 局域网- 移动网络接入 - 网络核心:分组交换网络设备构成，主机之间数据中继与转发 ### 3 数据交换技术 - 概念：实现在大规模网路核心上进行数据传输的技术基础 - 电路交换：最早出现的一种交换方式（电话网络最早、最大的电路）- 优点：实时性高、时延和时延抖动小。- 缺点：突发数据传输，信道利用率低，传输速率单一 - 交换网络：1. 建立店里2. 传输数据3. 拆除电路 - 报文交换：储存-转发交换方式- 什么是报文：发送方把要发送的信息附加上发送/接收主机的地址和控制信息- 优点：信道利用率高- 缺点：时延长，可能会报文过多而丢弃报文 - 分组交换：包交换，存储-转发交换方式- 将待传输的数据（报文）分割成较小的独立的数据块 ### 4 计算机网络性能 - 速率与带宽- 速率：网络单位时间内传送的**数据量**，用以描述网络传输数据的`快慢`;bit/s（位每秒）- 带宽    - 通信和信号处理领域，指的是信号的频带宽度，即信号成分的最高频率与最低频率之差。单位：Hz（赫兹）    - 计算机网络领域，指的是一条链路或者信道的数据传输能力，也就是最高数据速率，单位：bit/s（位每秒） - 时延：跳步的时间总和即为一个分组从源主机到达目的主机的时延- 数据从网络中的一个结点（主机或者交换设备）到达另一个结点所需要的时间- 在分组交换网络中：通常将连接两个结点的直接链路称为一个“跳步”，简称“跳”- 公式    - 结点处理时延：`$dc$`;此类延时较小，往往忽略    - 排队时延：`$dq$`;排队时延不确定    - 传输时延：`$dt=L/R$`;分组在输出链路发送时，从发送第一位开始，到发送完最后一位需要的时间        - L：分组长度`bit`        - R：链路带宽`bit/s`    - 传播时延：`$dp=D/V$`信号从发送端出来，经过一段物理链路到达接收端需要的时间。        - L：物理链路长度`m`        - R：信号传播速度`m/s`    - **一个分组经过一个跳步需要的时间**：`$dh=dc+dq+dt+dp$`；一般只需要计算`$dt+dp$` - 时延带宽积：物理链路的传播时延与链路带宽的乘积，记为G- 公式：`$G=传播时延*链路带宽$` `G=dp*R`    - 传播时延的单位：s    - 带宽的单位： bit/s    - 时延带宽积的单位：bit - 丢包率：丢失分组和发送分组之比。反映网络的拥塞程度- `$Ns$`：发送分组数- `$Nr$`：接收分组数- 公式：`$\\eta= \\frac{Ns-Nr}{Ns}$` - 吞出量：在单位时间内源主机通过网络向目的主机实际送达的数据量，记为Thr；对于分组交换网络，源主机到目的主机的吞吐量在理想情况下约等于瓶颈链路的带宽，即等于链路的带宽中的最小值 - 例题：设主机A和主机B由一条带宽为R=108bit/s、长度为D=100m的链路互连，信号传播速率为V=250000km/s。如果主机A从t=0时刻开始向主机B发送长度为 L=1024bit的分组。1. 主机A和主机B间的链路传输时延dt:    答案：`$dt=L/R=1024bit÷108bit/s=1.024×10-5s$`2. 主机A发送该分组的传播时延dp。    答案：`$dp=D/V=100m÷250000km/s=100÷250000×103m/s=4×10-7s$`3. 该分组从主机A到主机B的延迟T。（忽略结点处理时延和排队时延）    答案：`$T=dt+dp=1.024×10-5s+4×10-7s=1.064×10-5s$`4. 在t=dt时刻，分组的第一位在何处。（说明原因）    答案：`分组的第一位已到达主机B，因为：dt&gt;dp`5. 主机A与主机B间链路的时延带宽积G    答案：`$G=dp×R=4×10-7s×108bit/s=40bit$` ### 5 计算机网络体系结构 - 概念- 用户之间进行信息交换    - 硬件：主机、链路、交换设备    - 协议- 协议最典型的划分方式，采用**分层**方式组织协议- 分层核心思路是上层功能建立在下层更能基础上，每一层内均要遵守一定的通信规则-**协议**- 计算机网络体系结构：计算机网络划分的层次以及各层协议的集合；这种分层体系结构是按照`功能划分`的，不是按照实现方式划分的 - OSI 参考模型：国际化标准组织（ISO）；开放系统互连（open system interconnection）- 含义：端到端层：传输层、会话层、表示层、应用层    - 数据：（PDU：协议数据单元）在垂直的层次中自上而下地逐层传递至物理层    - 实通信：物理层的两个端点进行物理通信    - 虚拟通信：对等层不直接进行通信    - 中间系统（路由器）：通常只实现物理层、数据链路层和网络层功能    - 结点到结点层：物理层、数据链路层、网络层。- 七层概述（**高-&gt;低**）    - 7-&gt;应用层：**提供网络服务**（文件传送、电子邮件、P2P等）**报文**    - 6-&gt;表示层：处理应用实体之间**交换数据的语法**。    - 5-&gt;会话层：用户与用户之间的连接。建立会话时核实双方身份、费用、**对话控制与管理**等    - 4-&gt;传输层：第一个端到端的层次。**复用/分解**，端到端的可靠数据传输、连接控制、流量控制、拥塞机制等；**数据段或报文段**    - 3-&gt;网络层：数据转发与路由；**分组或包**    - 2-&gt;数据链路层：有效的差错控制；**帧**     - 1-&gt;物理层：无结构的**比特流**传输；**比特流或位流**- 主要功能    - 1-3：完成数据交换和数据传输，称为网络低层    - 4：底层于高层之间**传输层**衔接    - 5-6：完成信息处理服务的功能，称为网络高层 - TCP/IP参考模型- 最大、最重要的计算机网络—`因特网`的体系结构可以采用TCP/IP参考模型描述- 4-&gt;应用层、 **报文** 、OSI（应用层、表示层、会话层）：Internet常见的网络应用（WWW、HTTP、FTP、邮件【SMTP、POP3】）；面向链接服务（TCP）、面向无连接服务（UDP）- 3-&gt;传输层、 **段** 、OSI（传输层）：应用层将用户数据按照特定的应用层协议封装好，接下来由传输层的协议负责把这些数据传输到接收方主机上对等的应用程序。TCP协议、UDP协议- 2-&gt;网络互连层、 **数据报**、 OSI（网络层）：**核心**；解决把数据分组发往目的网络或主机的问题。路由选择，IP、ICMP、IGMP、BGP、OSPF、RIP协议等- 1-&gt;网络接口层、 **帧**、 OSI（数据链路层、物理层）：没有真正描述这一层的实现。具体的实现方法将随着网络类型的不同而不同 - 五层参考模型：结合`OSI`和`TCP/IP` 提出总和理论需求和实际网络的五层参考模型- 应用层 **报文**- 传输层 **段**- 网络层 **数据报**- 链路层 **帧**- 物理层 **比特流** ### 6 计算机网络与因特网发展简史 - 分组交换技术提出因特网 - 历史- 1967年发布第一个ARPAnet 第一分组交换分组交换计算机网络 **分组交换网之父**- 1969年第 ARPAnet建成有四个分组交换机互连网络- 1972年第 ARPAnet发展到15个交换结点- 20世纪70年代早期与中期，除了ARPAnet之外，还诞生许多其他的分组交换网络（ALOHAnet、Telenet）；发展三个因特网核心网络协议：TCP、UDP、IP- 20世纪70年代末， ARPAnet已连接大约200台主机。因特网已现雏形- 20世纪80年代，因特网连接的主机数量达到100000台- 20世纪90年代，因特网祖先ARPAnet已不复存在- 20世纪90年代后五年，因特网快速发展与变革的时期，企业和高校、甚至个人开始接入因特网- 2000年开始，因特网进入爆发式发展期 ## 第二章 网络应用 ### 1 计算机网络应用体系结构 - 客户端/服务器（C/S）结构网络应用- 最典型、最基本的网络应用- 网络应用通信的双方分为服务器程序和客户程序- 特征    - 通信只在客户和服务器之间进行，用户与用户之间不进行直接通信    - 主动发起通信的一方是客户程序，被动接受通信的一方是服务器    - 服务器程序先运行，做好接受通信的准备 - P2P（peer to peer）- 通信双方没有传统意义上的客户服务器之分，地位对等，通信双方都具备客户与服务器的特征- 文件分发、文件共享、视频流服务等应用中，P2P表现出优越的性能 - 混合结构网络应用- C/S应用和P2P应用相结合- 既有中心服务器的存在，也有对等端间的直接通信 ### 2 网络应用通讯基础原理 - 网络应用的基本通讯过层：运行在不同主机上的应用进程间以`C/S`方式进行通信 - C/S方式：服务器端运行的是服务器进程，被动等待客户请求服务；客户端运行的是客户进程，主动发起通信，请求服务器进程提供服务 - 应用进程之间遵循应用层协议交换应用层报文。还需要通过层间接口（应用编程接口API）将报文传递给相邻的传输层 - 典型的网络应用编程接口是**套接字**（Socket） - 对于一个传输层协议，需要为与其接口的每个套接字分配一个编号，标识该套接字，该编号称为端口号（IP+端口号） - Internet传输层只提供两类服务：（TCP、UDP） ### 3 域名系统（DNS） - 概念- 域名系统（domain naming system）- 域名解析原理：为了实现域名解析，域名系统会建立**分布式数据库**，储存`域名与IP地址`的映射关系    - `主机域名：www.baidu.com` -&gt;域名解析-&gt; `IP地址：220.181.38.251` - 层次化域名空间- 域名的命名方式：层次树状结构命名方式，每个域名有不同的级别的域名构成，各个层级域名之间用点分隔- `www.sina.com.cn`    - www：三级域名    - sina：二级域名    - com：通用顶级域名    - cn：国家顶级域名- 顶级域名分类    - 1）国家顶级域名：`cn，us，uk`等    - 2）通用顶级域名：`com，org，gov，edu`等    - 3）基础结构域名：只有一个（`arpa`，反向域名解析） - 域名服务器：以**区**为管理范围单位- 本地（默认）域名服务器：在主机网络地址配置是，都会配置用于保存被查询域名信息- 根据保存的域名信息在解析过程中的作用分类    - 根域名服务：最重要的域名服务器，全球13个a～m（保存所有顶级域名服务器的域名和IP地址）    - 顶级域名服务（TLD服务）：负责管理在该顶级域名服务器（cn）注册的所有二级域名    - 权威域名服务：保存该区中的所有主机的域名和IP地址的映射    - 中间域名服务：不是以上三种的域名服务器 - 域名解析过程- 递归解析：主机进行域名查询时，本地域名服务器没有被查询域名信息，则本地域名服务器代理主机查询根域名服务器- 迭代解析：主机进行域名查询时，本地域名服务器没有被查询域名信息，则先求助于根域名服务器- 总结：无论是递归还是迭代，本地服务器不能直接响应解析结果，都需要从`根域名服务器`开始查询 ### 4 万维网应用 - 万维网应用：web应用- 主要包括：浏览器、web服务器、超文本传输协议HTTP    - 浏览器：Web应用的客户软件、客户代理。    - Web服务器：服务器软件、存储管理供用户请求浏览的Web页面（Web文档）    - 超文本传输协议（HTTP）：客户和服务器间的交互基于的协议- 统一资源定位符号（universal resource locator，URL）    - URL地址：存放对象的主机域名（或IP地址）＋对象的路径名；URL寻址方式确保万维网上的每一个web页面或者对象都有一个唯一的标识符 - HTTP：超文本传输协议（Hyper Text transfer protocol，HTTP）- 概述    - Web应用的应用层协议，定义浏览器如何向Web服务器发送请求，以及Web服务器如何进行响应    - HTTP/1.0和HTTP/1.1- HTTP链接    - HTTP基于传输层的TCP传输报文。浏览器在向服务器发送请求之前，首先建立TCP连接，然后才发送HTTP请求报文，接收HTTP响应报文（C/S）    - RTT （Round Trip Time）： 作为一个时间单位来使用（HTTP客户进程向服务器请求建立连接：从客户发送连接请求，到客户收到服务器连接确认，用时一个往返时间）- 使用TCP策略不同    - 非之久链接的HTTP（tcp用一次就断开了）        - 非持久连接（一条连接）（8个RTT）        - 并行连接（多条连接）（4个RTT）    - 持久连接的HTTP（TCP不断开）        - 非流水方式持久连接（5个RTT）        - 流水方式持久连接（3个RTT）- HTTP报文    - 请求报文和响应报文        - 请求：浏览器（客户端）发送给Web服务器        - 响应：Web服务器发送给浏览器        - 请求报文                     |   | 请求报文 |            | --- | --- |            | 起始行 | 请求行：&lt;方法&gt;&lt;URL&gt;&lt;版本协议&gt; |            | 首部行 |  |            | 空白行 |  |            | 报文主体 |  |            - 请求方法：                    | 方法  | 简介 |            | --- | --- |            |GET |请求读取由URL所标识的信息，**是最常见的方法** |            |HEAD |请求读取由URL所标识的信息的首部 |            |POST |给服务器添加信息 |            |OPTION |请求一些选项的信息 |            |PUT | 在指明的URL下存储一个文档|        - 响应报文：状态码用于服务器向客户端通告**响应情况**            - 响应格式                        |   | 响应报文 |            | --- | --- |            | 起始行 | 状态行：&lt;版本协议&gt;&lt;状态码&gt;&lt;短语&gt; |            | 首部行 |  |            | 空白行 |  |            | 报文主体 |  |            - HTTP状态码：3位十进制数，利用第一位十进制数字区分5类状态码                        |状态码类别| 取值范围| 作用| 说明|            | --- | --- | --- | --- |            1xx| 100-199| 信息提示| 通告信息，可能还需要进一步交互|            2xx| 200-299| 成功| 成功完成客户请求的操作，并进行响应|            3xx| 300-399| 重定向| 表示资源已移走，需要向新URL发请求|            4xx| 400-499| 客户端错误| 由于客户端请求错误，无法成功响应|            5xx| 500-599| 服务器错误| 由于服务器端错误，无法成功响应|            - 常见的状态码                        |状态码| 短语| 含义|            | --- | --- | --- |            |100| Continue |已成功收到了请求的初始部分，请客户端继续|            |200| OK| 成功，所请求信息在响应报文中|            |301| Moved Permanently| 重定向|            |400| Bad Request |客户端请求错误|            |401| Unauthorized |未授权，需要输入用户名和密码|            |404| Not Found| 客户端请求的对象，在服务器上不存在|            |451| Unsupported Media Type| 不支持的媒体类型|            |505| HTTP Version Not Supported |请求使用的HTTP版本，服务器不支持| - Cookie- HTTP服务器不保存客户的任何信息，被称为无状态协议;引入Cookie机制，**用于用户跟踪**- 小型文本文件（Cookie）：网站为了辨别用户身份、进行会话跟踪而储存在**用户本地终端**上的数据- Cookie技术主要包括4部分内容    - 1）HTTP响应报文中的Cookie头行：用户的Cookie ID，用户偏好等。    - 2）用户浏览器在本地存储、维护和管理的Cookie文件。    - 3）HTTP请求报文中的Cookie头行：用户已访问过的网站再次访问时，浏览器会检索本地Cookie文件。    - 4）网站在后台数据库中存储、维护Cookie信息：分配用户ID、每个ID- 分类    - 保存在硬盘中的Cookie称为永久Cookie，关闭浏览器不影响Cookie    - 保存在内存中的Cookie称为会话Cookie，关闭浏览器Cookie消失- 用途    - 1）网站可以利用Cookie的ID来准确统计网站的实际访问人数、新访问者和重复访问者的人数对比、访问者的访问频率等数据    - 2）网站可以利用Cookie限制某些特定用户的访问    - 3）网站可以存储用户访问过程中的操作习惯和偏好    - 4）记录用户登录网站使用的用户名、密码等信息    - 5）电子商务网站利用Cookie可以实现“购物车”功能5 Internet电子邮件  概述          邮件服务器：发送和接收邮件、向发信人报告邮件传送情况（已交付、被拒绝、丢失等）、 用户注册、 分配存储空间      用户代理：电子邮件应用的客户端软件（Outlook，Apple Mail，Fox Mail）      简单邮件传输协议（SMTP）：实现邮件服务器之间或用户代理到邮件服务器之间的邮件传输；默认端口25      邮件读取协议（POP3、IMAP、HTTP）                  POP3：第三版邮局协议          IMAP：互联网邮件访问协议          HTTP：Web邮件系统的邮件读取协议                      SMTP（simple mail transfer protocol ，SMTP）          实现邮件服务器之间或用户代理到邮件服务器之间的邮件传输      使用传输层TCP实现可靠数据传输，使用的端口号是25                  过程                          握手阶段              邮件传输阶段              关闭阶段                                          特点                  1）SMTP只能传送7位ASCLL码文本内容，包括SMTP命令、应答消息以及邮件内容,优化方案互联网邮件扩展（multipurpose internet mail extensions，MIME）          2）SMTP传送的邮件内容中不能包含CRLF.CRLF，因为该信息用于标识邮件内容的结束。          3）SMTP是推动协议。（补充：HTTP是“拉动”协议）。          4）SMTP使用TCP连接是持久                      邮件读取协议：比较流行的邮件读取协议：以拉动方式运行          POP3                  使用TCP，默认端口110          交互阶段                          授权、事务处理、更新阶段（quit）                                          IMAP-互联网邮件访问协议（Internet Message Access Protocol，IMAP）：                  IMAP 服务器将每个邮件与一个文件夹进行关联，通过 IMAP 收件人可以对邮件进行移动、查询、阅读、删除等操作          IMAP维护了IMAP会话的用户状态的信息。并且允许用户代理只读取部件的部分内容                    HTTP：web邮件系统的的邮件读取协议        6、7 FTP、P2P 应用              FTP（file transfer protocol）：          在互联网的两个主机间实现文件互传的网络应用的应用层协议      FTP是C/S方式实现客户、服务器之间的双向文件传输。      FTP服务器器进程分为两部分：主进程，负责接受新的客户请求；      若干从进程，负责处理单个客户请求      FTP应用结构：控制进程的端口号21，传送数据的端口号20        P2P应用          客户/服务器体系结构过于依赖服务器，一旦服务器出现故障，会引起单点故障。P2P体系结构对服务器的的依赖很小      特点                  1）应用的对等方是用户的计算机。          2）很强的应用规模伸缩性。          3）应用在对等方之间进行          4）应用充分聚集利用了端系统的计算能力以及网络传输宽带            8 Socket编程                                类型          数据报类型套接字SOCK_DGRAM、面向传输层UDP接口传输层      流式套接字SOCK_STREAM、面向传输层TCP接口传输层      原始套接字SOCK_RAW、面向网络层协议（如IP、ICMP等）接口 网络层        函数          1）创建套接字：socket（ ）      2）绑定套接字的本地端点地址： bind（ ）      3）设置监听：listen（ ）      4）建立连接：                  （1）TCP客户端：connect（ ）          （2）TCP服务端：accept（ ）                    5）接收数据：                  （1）TCP：recv（ ）          （2）UDP：recvfrom（ ）                    6）发送数据：                  （1）TCP：send（ ）          （2）UDP：sendto（ ）                    7）关闭套接字：close（ ）      第三章 传输层1 传输层的基本服务  传输的功能          核心任务：应用进程之间提供端到端的逻辑通信服务      功能                  对应用层报文进行分段和重组          面向应用层实现复用与分解          实现端到端的流量控制          拥塞控制          传输层寻址          对报文进行差错检测          实现进程间的端到端可靠数据传输控制                    并不是所有的传输层协议都要实现所有的功能，大部分传输层协议        传输层寻址与端口          传输层就是为了支持不同的主机，不同操作系统上的应用程序之间的通信，必须要使用统一的寻址方法对应用进程进行标识      单个计算机中，不同应用进程用进程标识符（进程ID）来区分                  TCP/IP网络体系结构的解决方法                          在传输层使用端口（port）              全网利用IP地址+端口号，唯一标识一个通信端点                                                  端口号为16位整数，可以编号65536 $2^{16}$                                            端口              描述              用处                                                          0-1023              熟知端口号              服务端                                      1024-49151              登记端口（IANA登记防止重复）              服务端                                      49152-65535              短暂端口号              客户端                                                  常用端口号                                            端口号              描述                                                          20、21              FTP文件传输协议端口号                                      25              SMTP简单邮件传输协议端口号                                      53              DNS域名服务器端口号                                      80              HTTP超文本传输协议端口号                                      110              POP3第三版的邮局协议端口号                                                无连接服务与面向连接服务    |无连接服务（UDP）| 面向连接服务（TCP）|  | — | — |  |数据传输之前：无需与对端进行任何信息交换（“握手”），直接构造传输层报文段并向接收端发送  |数据传输之前：需要双方交换一些控制信息，建立逻辑连接，然后再传输数据，传输结束后还需要拆除连接  |例如：邮政系统的信件通信 |例如：电话通信 |    2 传输层的复用与分解    概述          多路复用与多路分解：支持众多应用进程共用同一传输层协议，能准确的将接收的数据交付给不同的应用进程，称为传输层的多路复用与多路分解      多路复用：：在源主机，传输层协议从不同的套接字收集应用进程发送的数据块，并为每个数据块封装上首部信息（包括用于分解的信息）构成报文段，然后将报文段传递给网络层；多个进程同时利用同一个传输层协议      多路分解：在目的主机，传输层协议读取报文段中的字段，标识出接收套接字，进而通过该套接字，将传输层的报文段中的数据交付给正确的套接字        无连接的多路复用与多路分解（UDP）          分配方法                  UDP自动分配未使用端口          创建UDP套接字，通过调用bind() 函数为该套接字绑定一个特定端口                    UDP套接字二元组：&lt;目的IP地址，目的端口号&gt;        面向连接          TCP套接字四元组：&lt;源IP地址，源端口号，目的IP地址，目的端口号&gt;      3 停-等协议与滑动窗口协议  可靠原理          概述                  internet传输层的两个协议：TCP 、UDP          TCP可靠传输服务，将报文交给IP传送，而IP尽力服务，也就是不可靠，必须采取措施才能使其在基于不可靠的网络层上实现可靠传输                    不可靠传输信道的不可靠性方面                  比特差错：1100——0110          乱序：先发的数据包后到达，后发的数据包先到达                          发送：1、2、3、4、5              接收：2、1、5、4、3                                数据丢失：中途丢失，不能达到目的地                          发送：1、2、3、4、5              接收：1、3、4、5                                          采取措施                  差错检测：利用差错编码实现数据包传输过程中的比特差错检测（甚至纠正）          确认：接收方向发送方反馈接收状态                          ACK（肯定确认）；NAK（否定确认）              肯定确认：Positive Acknowledgement，正确接收数据              否定确认：Negative Acknowledgement，没有正确接收数据                                重传：发送方重新发送接收方没有正确接收的数据                          发送方接收到NAK，表示接收方没有正确接收数据，则将出错的数据重新向接收方发送                                序号：确保数据按序提交                          对数据包进行编号。可以避免由于重传引起的重复数据被提交的问题                                计时器：解决数据丢失问题                          发送方发送数据后启动计时器，如超时还未收到接收方的确认。主动重发数据包，从而纠正数据丢失问题                                          有效、合理地综合应用上述措施，可以设计实现可靠数据传输的协议                  停-等协议与滑动窗口协议                      停等协议          工作流程                  1）发送方发送经过差错编码和编号的报文段，等待接收方的确认。          2）接收方如果差错检测无误且序号正确，则接收报文段，并向发送方发送ACK，否则丢弃报文段，并向发送方发送NAK          3）发送方如果收到ACK，则继续发送后续报文段，否则（NAK超时）重发刚刚发送的报文段                    细节                  差错控制：报文段、ACK、NAK数据包均需要进程差错编码以便进行差错控制          序列号：只需要1位就够了（区分是新发的报文还是重传的报文）          ACK 和 NAK：利用重复ACK代替NAK（对上一个正确接手的报文段再次进行确认【ACK0】）          ACK和NAK差错：有错推断                      滑动窗口          停等协议不足（性能差、信道利用率低）      流水线协议（管道协议）：允许发送方没有收到确认前发送多个分组（最典型的流水线协议滑动窗口协议）      流水线协议可靠传输，改进                  增加分组序号（多位）          发送方和接收方可以缓存多个分组                    特点                  发送方依序流水方式（1，2，3，4，5）发送分组，接收方接手分组按序向上提交          发送方对已发送的未收到确认的分组，必须缓存，必要时重发，发送方可以连续发送多个未收到确认的分组（取决于缓存能力）          接收方对未按按序到达的分组，必须缓存或者丢弃并确认（取决于缓存能力）                    滑动窗口协议的窗口                  发送窗口（$Ws$）：发送方可以发送未被确认分组最大数量          接手窗口（$Wr$）：接手方可以缓存的正确到达到达分组的最大数量                    滑动窗口协议，根据窗口的大小，两种代表性的滑动窗口协议                  1）回退N步协议：GBN协议（Go-Back-N）                          发送窗口Ws≥1 ，接收窗口Wr=1。                                  发送端缓存能力高，可以在没有得到确认前发送多个分组                  接收端缓存能力很低，只能接收1个按序到达的分组，不能缓存未按序到达的分组                                            发送方响应事件                                  上层调：：窗口未满，用“下一个可以序号”编号并发送分组，否则拒绝发送新的数据                  收到1个ACKn：GBN采用累积确认方式，即发送方收到ACKn时，表明接收方正确接收序号n以及序号小于n的所有分组                  计时器超时：发送方只使用一个计时器，对“基序号”指向的分组计时；如超时，如超时，重发当前发送窗口中所有已发送但未确认的分组，即“回退N步”，因为接收方Wr=1，无缓存能力                                            接收方                                  Wr=1，只能接收“基序号”所指向的分组                  如接收方正确接收到序号为基序号，则发送一个ACKn，接收窗口滑动到序号n+1的位                  接收到的序号不是n或者分组差错等，则发送ACKn-1。                                            总结                                  在差错较低的情况下，信道利用率会得到很大提高                  如果信道误码率或者丢包率较高，导致大量重发，信道传输能力降低                  GBN适合低误码率、低丢包率、带宽高时延积信道，且对接收方缓存能力要求低                                                              2）选择重传协议：SR协议（Selective Repeat）                          选择重传（SR）通过让发送方仅重传那些未被接收确认（出错或者丢失）的分组，避免了不必要的重传              发送窗口WS＞1，接收窗口Wr＞1。很多SR协议WS 、Wr大小相等。                                  发送端缓存能力高                  接送端缓存能力高                                            发送方响应                                  上层调用，请求发送数据：检查“下一个可用序号”，位于发送窗口内则发送，否则缓存或者返回给上层                  计时器超时，发送方对每个分组进行计时，超时则重发该分组                  收到ACKn：SR协议对n进行判断。如n在当前窗口内，则标记已接收（刚好是基序号，窗口向右滑动到最小未被确认序号处）；其他情形不做响应                                            接收方                                  正确接收到序号在接收窗口范围内的分组PTKn，发送ACKn，窗口滑动                  正确接收到序号在接收窗口左侧的分组PTKn，这些分组在之前已经正确接收并提交，丢弃PTKn，并发送ACKn，窗口不滑动                  其他情况，直接丢弃分组，不做任何响应                                                                        4 用户数据包协议（UDP）user datagram protocol  基本知识          概述                  Internet 传输层协议          提供无连接、不可靠、数据报尽力传输服务          通讯进程之间没有握手过程          UDP没有拥堵控制机制          实现了复用与分解以及简单的差错检测          DNS 使用UDP应用层协议的例子                    选择UDP原因特点                  应用进程容易控制发送什么数据以及何时发送。可能会出现分组的丢失和重复          无需建立连接；DNS 使用的主要原因          无连接状态，无需维护连接状态          首部开销小，只需要8个字节；而TCP需要20字节                      数据报结构          首部（每个字段长度都是2个字节，共8个字节）                  源端口号目的端口号：实现复用和分解          长度：指示UDP报文段中的字节数（首部和数据总和）          校验和：接收方使用来检测数据报是否出现差错                      校验和          提供差错检测功能      检测UDP报文段从源到目的传送过程中，其中数据是否发送了改变      计算规则                  所有参与运算的内容按16位对齐求和          求和过程中遇到溢出（即进位）都被回卷（即进位与和的最低位再相加）          最后得到的和取反码，就是UDP的校验和，填入UDP数据报的校验和字段                    计算内容包括：UDP伪首部、UDP首部、应用数据；UDP协议好17      示例                  数值1：0110 0110 0110 0000          数值2：0101 0101 0101 0101          数值3：1000 1111 0000 1100                                                    操作              1              4              3              2              1              4              3              2              1              4              3              2              1              4              3              2              1                                                          数值1                             0              1              1              0              0              1              1              0              0              1              1              0              0              0              0              0                                      数值2                             0              1              0              1              0              1              0              1              0              1              0              1              0              1              0              1                                      1+2                             1              0              1              1              1              0              1              1              1              0              1              1              0              1              0              1                                      数值3                             1              0              0              0              1              1              1              1              0              0              0              0              1              1              0              0                                      1+2+3              1              0              1              0              0              1              0              1              0              1              1              0              0              0              0              0              1                                      益处回卷                             0              1              0              0              1              0              1              0              1              1              0              0              0              0              1              0                                      取反码                             1              0              1              1              0              1              0              1              0              0              1              1              1              1              0              1                                          总结                  UDP提供差错检测，但是它没有差错恢复能力只是          简单地丢弃差错报文段，或者将受损的报文段交给应用程序并给出警告          由应用程序处理出错报文                    5 传输控制协议（Transmission Control Protocol，TCP）  概述          提供面向连接、可靠、有序、字节流传输服务      特点                  应用进程之间先建立连接，而且该连接只供通讯双方（2个端点）使用          传输数据：无差错、不丢失、不重复、按序到达          面向字节流：字节序列；应用程序和TCP的交互是一个个数据块，TCP把他们看做是无结构字节流          全双工通讯：通讯双方进程在任何时候都能发送和接收数据                    最大报文段长度（Maximum segment size，MSS）：报文段中封装的应用层数据的最大长度        报文段结构          概述：TCP报文段有首部字段和一个数据字段组成（将文件划分成长度MSS的快，最后一块除外），一个快封装成一个TCP报文段      1）源端口字段，目的端口号字段：占16位；复用和和分解上层应用的数据      2）序号字段、确认序号字段：32位                  序号字段：TCP的序号是对每个应用层数据的每个字节进行编号          确认序列号字段：期望从对方接收数据的字节序号，即该序号对应的字节尚未收到          TCP采用累计确认机制                    首部长度字段：占4位，指出TCP段的首部长度（字段值为5，表示首部长度20字节）      保留字段：占6位，保留为今后使用，目前值为0      URG、ACK、PSH、RST、SYN、FIN各占1位，标志位字段，共6位，取值位0或1                  紧急URG=1，紧急指针字段有效，优先传送。          确认ACK=1，确认序号字段有效；          ACK=0时，确认序号字段无效。推送PSH=1，尽快将报文段中的数据交付接收应用进程，不要等缓存满了再交付。          复位RST=1，TCP连接出现严重差错，释放连接，再重新建立TCP连接。          同步SYN=1，该TCP报文段是一个建立新连接请求控制段或者同意建立新连接的确认段。          终止FIN=1，TCP报文段的发送端数据已经发送完毕，请求释放连接                    接收窗口字段：占16位 ，向对方通告我方接收窗口的大小，实现TCP流量控制      校验和：占16位，和UDP的校验和的计算方法相同      紧急指针字段：占16位                  URG=1时，才有效。指出在本TCP报文段中紧急数据共有多少个字节                    选择字段长度可变，最短为0字段      填充字段，取值为0，目的是为了整个首部长度是4个字节的整数倍数        TCP连接管理          连接管理：连接建立于连接拆除（三次握手）                  主机A于主机B建立TCP连接                          主机 A 的 TCP 向主机 B 发出连接请求 SYN 报文段（第一次握手）SYN=1;seq=x;              一旦包含 SYN 报文段的 IP 数据报到达主机 B，SYN 报文段被从数据报中提取出来，主机 B 的 TCP 接到连接请求段后，如同意建立连接，则发回确认的SYNACK 报文段（第二次握手）。                                流程图                  sequenceDiagram          participant C as 客户端           participant S as 服务端          C-&gt;&gt;S: SYN=1,seq=x (第一次握手)          S--&gt;&gt;C: SYN=1，ACK=1，seq=y， ack_seq=x+1 (第二次握手)          C-&gt;&gt;S: ACK=1，seq=x+1，ack_seq=y+1（第三次握手）客户端同意                                      第一次握手（客户端进入SYN_SEND同步发送）                                  SYN=1：建立连接请求控制段                  seq=x（seq表示序号的意思）：表示传输的报文段的第1个数据字节的序列号是x，此序列号代表整个报文段的序号                                            第二次握手（服务端由LISTEN进入SYN_RCVD（同步收到））                                  SYN=1：同意建立新连接的确认段                  ACK=1：确认序号字段有效                  seq=y：服务器告诉客户机确认报文段的序列号是y。                  ack_seq=x+1：表示已经收到了序列号为x的报文段，准备接收序列号为x+1的报文段                                            第三次握手（当客户机发送ACK时，进入ESTABLISHED状态；当服务器收到ACK后，也进入ESTABLISHED状态）                                  ACK=1：确认序号字段有效                  seq=x+1：客户机此次的报文段的序列号是x+1                  ack_seq=y+1：客户机期望接收服务器序列号为y+1的报文段                  第三次握手可携带数据                                                              为什么要三次握手                          第一次握手：客户发送请求，此时服务器知道客户能发              第二次握手：服务器发送确认，此时客户知道服务器能发能收              第三次握手：客户（数据）发送确认，此时服务器知道客户能收                                          连接拆除（4次挥手）                  流程图              sequenceDiagram      participant C as 客户端       participant S as 服务端      C-&gt;&gt;S: FIN=1，seq=u (第一次挥手)      S--&gt;&gt;C: ACK=1，seq=v，ack_seq=u+1 (第二次挥手)      S--&gt;&gt;C: FIN=1，ACK=1，seq=v+1，ack_seq=u+1 (第三次握手)      C-&gt;&gt;S: ACK=1，seq=u+1，ack_seq= v+1+1（第四次挥手）                                      第一次挥手                                  客户向服务器发送释放连接报文段：（FIN=1，seq=u）                  FIN=1：发送端数据发送完毕，请求释放连接                  seq=u：传输的第一个数据字节的序号是u                  客户端状态由ESTABLISHED进入FIN_WAIT_1（终止等待1状态）                                            第二次挥手                                  ACK=1：确认字号段有效。                  ack_seq=u+1：服务器期望接收客户数据序号为u+1。                  seq=v：服务器传输的数据序号是v                  服务器状态由ESTABLISHED进入CLOSE_WAIT（关闭等待）                  客户端收到ACK段后，由FIN_WAIT_1进入FIN_WAIT_2                                            第三次挥手                                  FIN=1：请求释放连接                  ACK=1：确认字号段有效                  ack_seq=u+1：表示服务器期望接收客户数据序号为u+1                  seq=v+1：表示自己传输的第一个数据字节的序号是v+1                  服务器状态由CLOSE_WAIT进入LAST_ACK（最后确认状态）                                            第四次挥手                                  ACK=1：确认字号段有效。                  ack_seq=v+1+1：表示客户期望接收服务器数据序号为v+1+1。                  seq=u+1：表示客户传输的数据的序号是u+1。                  客户端状态由FIN_WAIT_2进入TIME_WAIT，等待2MSL时间，进入CLOSED状态                  服务器在收到最后一次ACK后，由LAST_ACK进入CLOSED                                                                          流量控制          概述                  协调发送方与接收方的数据发送与接收速度，避免发送方发送数据太快，超出接收方接收能力和处理力          利用窗口协议，但不是简单的滑动窗口协议                    实现机制                  建立连接，双方固定大小缓冲空间          接收窗口字段（16位），向对象通告接收窗口大小（剩余空间）          不能超过最近一次接收端通告的接收窗口大小                      用塞控制          概念                  太多的主机以太快的速度向网络中发送太多的数据，超出了网络处理能力          导致大量数据分组拥挤在中间设备队列中等待转发，网络性能显著下降的现象                    拥塞的后果                  1）数据分组通过网络的时间显著增加          2）队列满导致大量分组被丢弃                    用塞控制                  通过合理调度、规范、调整向网络中发送数据的主机数量          发送速率、数据量，以避免拥塞或消除已发生的拥塞                    窗口调控基本策略（Additive Increase Multiplicative Decrease，AIMD）                  网络未发送拥堵时，逐渐“加性”增大窗口          网络拥塞时“乘性”减小窗口                    算法                  慢启动                          建立连接时，使用慢启动拥塞控制算法调整拥塞窗口              RTT：发送端发出一个报文段到接收这个报文段的确认单时间间隔                                用塞避免                          为了防止拥塞窗口增长而引起的网络拥塞              设置一个拥塞窗口阈值              当拥塞窗口大于等于阈值时，每经过1个RTT，拥塞窗口的值加1              当前拥塞窗口中所有报文段全部发送并且接收并成功确认，拥塞窗口的值加1 “加性增加”              例子                                  当前拥塞窗口为24MSS，当前阈值为16MSS。                  新的阈值：为当前拥塞窗口的一半 24MSS÷2=12MSS                  新的拥塞窗口：直接调整为1MSS                                            调整好新的阈值和新的拥塞窗口后，重新执行慢启动算法。”乘性减小”                                快速重传                          接收端收到3次重复确认，则推断被重复确认的报文段已经丢失              于是立即发送被重复确认的报文段                                快速恢复                          当发生3次重复确认时，网络拥塞程度不是很严重。              阈值和拥塞窗口的调整方法：不再重新从慢启动阶段开始，而是直接从新的阈值开始，直接进入拥塞避免阶段                                          第四章网络层1 网络层服务  任务：承载传输层报文段的网络层数据报从源主机送达到目的主机，中间经过多跳路由器  功能          转发：当输入链路接收到一个分组后，路由器需要决策通过哪条输出链路将分组发送出去，并将分组从输入接口转移到输出接口      路由选择：当分组从源主机流向目的主机时，必须通过某种方式决定分组经过的路由或路径                  计算分组经过的路由的算法（路由选择算法、路由算法）          路由器基于某种算法计算路由，将路由信息存储到路由器转发表中                      每个路由器上有一张转发表（路由表）                                                            目的地址                  输出地址                                                                              地址1                  1                                                  地址2                  2                                                                        连接建立：网络层连接是从源主机到目的主机经过的一条路径，这条路径所经过的每个路由器等网络设备都要参与网络层连接的建立                  是否在网络提供连接服务                          提供连接服务的虚电路（VC）网络              提供无连接服务的数据报网络                                          2 数据报网络与虚电路网络  数据报网络          概述：按照目的主机地址进行路由选择的网络（因特网是按照IP目的地址进行路由选择，因此因特网是一个典型的数据报网络）      特点                  每个数据分组单独处理（称数据报），每个数据报都携带源目的主机地址信息          通信之前，不需要建立连接（称无连接）          发送接收次序不一定相同，路径也可能不一致，接收方需要重组（传输层）          丢失差错检测，由通信双方的传输层协议（TCP）解决          分组到达分组交换机路由器,通过分组交换机的转发表(目的地址映射到某个输出链路的转发表)决策适合的输出链路,转发表更新(1-5m)                      虚电路网络（Virtual circuit，VC）          虚电路                  源主机到目的主机的一条路径上建立的一条网络层逻辑连接，为区别于电路交换中的电路，称为虚电路          每条虚电路都有虚电路号，称为虚电路标识（VCID）                    虚电路网络：在网络层提供面向连接的分组交换服务。双方通信前先虚电路建立连接，通信结束后再拆除连接      一条虚电路（VC）由3个要素构成                  从源主机到目的主机之间的一条路径（一系列的链路和分组交换机）。因此分组是顺序到达的          该路径上的每条链路的虚电路标识（VCID）          分组交换机的转发表（VCID转换表）中记录虚电路标识的接续关系          建立一条新的VC，VCID转换表添加一行新表项                    虚电路交换与电路交换                  类似，都是面向连接的，顺序发送，建立连接都需要开销          电路交换提供稳定的传输速率和延迟时间          虚电路是分组交换提供统计多路复用传输服务                    虚电路分类                  永久型（PVC）：提前建立，长期使用的虚电路，建立时间可以忽略          交换型（SVC）：根据需要临时建立，通信结束后拆除，建立和拆除时间开销较大。                    虚电路交换与数据报交换的差别                  虚电路网络（ATM网络）通常由网络完成这些功能，由端系统提供无差错数据传送服务，而端系统则可以很简单          数据报网络（Internet）通常网络实现的功能很简单，如基本的路由与转发，顺序控制、差错控制和流量控制等功能则由端系统来完成                            虚电路交换和数据报交换比较                                            项目              虚电路网络              数据报网络                                                                         是否建立连接              先建立连接              不建立连接                                                     地址              每个分组含有一个短的虚电路号              每个分组包含源和目的端地址                                                     分组顺序              按序发送，按序接收              按序发送              ，不一定按序接收                                      路由选择              建立VC时需要路由选择，之后所有分组都沿此路由转发              每个分组独立路由选择                                                     典型网络              X.25、帧中继、ATM              因特网                                                         3 网络互连与网络互连设备  异构网络互连          主要是指两个网络的通信技术和运行协议的不同      基本策略：协议转换和构建虚拟互连网络                  协议转换                          采用一类支持异构网络之间协议转换的网络中间设备              来实现异构网络之间数据分组的转换与转发              网桥、应用网关、交换机或者是多协议路由器                                构建虚拟互联网络：在异构网络基础上构建一个同构的虚拟互联网络（IP网络）                    异地同构网络：实现两个异地同构网络互连的典型技术是隧道技术      例： MPLS（Multiple Protocol Lable Switching）：多协议标记交换网络。        路由器          概述                  最典型的网络层设备          具有多个输入端口和多个输出端口的专用计算机          主要任务就是获取与维护路由信息以及转发分组          路由器从功能体系结构角度：输入端口、交换结构、输出端口、路由处理器                            输入端口：查找，转发，到达分组 缓存排队功能（下图，输入端口接收与处理数据过程）              graph LR           A(线路端接) --&gt;B(数据链路处理 协议,封装)          B(数据链路处理 协议,封装) --&gt;C(查找 转发 排队)          C(查找 转发 排队) --&gt;D(交换结构)            交换结构：分组被转发至哪个输出端口已经确定，具体的工作由交换结构来完成                  分类                          基于内存交换：输入端口（中断方式）-&gt; 内存（路由处理器）-&gt; 输出端口              基于总线交换                                  输入端口和输出端口连接在一条数据总线上                  无须路由处理器介入即可实现交换功能                  总线是独占式，一个分组通行，其他排队                                            基于网络交换                                  使用一个复杂的互联网络来实现交换结构                  克服单一、独占所带来的限制并行交换传输，但输出端口相同，也需要排队                                                              比较                          基于内存交换：性能最低，路由器价格最便宜              基于网络交换：性能最高，路由器价格昂贵                                          输出端口：提供缓排队功能，从队列中取出分组进行数据链路层数据帧的封装，通过物理线路端发送出去                  概述(下图输出端口处理数据过程)                          1）先到先服务（FCFS）调度策略；              2）按优先级调度、按IP数据报的服务类型调度                      graph LR           A(交换结构) --&gt;B(排队 缓存管理)          B(排队 缓存管理) --&gt;C(数据链路处理 协议,封装)          C(数据链路处理 协议,封装) --&gt;D(线路端接)          D(线路端接)--&gt;E(XXXXXX)                                                        路由器处理器：路由器的CPU，负责执行路由器的各种指令                  1）执行命令          2）路由协议运行          3）路由计算以及路由表的更新和维护                    路由器匹配规则                  检索路由表，没有则选择默认路由转发          匹配成功，则选择对应接口          有多条匹配成功，选择前缀匹配成功最长的路由项，即最长前缀匹配优先原则（网络号）                    4 网络层拥塞控制  网络拥塞：用户对网络资源（包括链路带宽、存储空间和处理器处理能力等）的总需求超过了网络固有的容量          流量控制与拥塞控制                  流量控制：发送方根据接收方的的接收能力（缓存，速度）调整发送速率和数据量，关注点到点的流量          拥塞控制：主要考虑端系统之间网络环境，确保网络能够承载所达到的流量          例子                          A地到B地的车辆放行              考虑B地停车能力，流量控制              考虑A地到B地经过的路网不塞车，拥塞控制                                          原因                  1）缓冲区容量有限          2）传输线路的带宽有限          3）网络结点的处理能力有限          4）网络中某些部分发生了故障                    改进                  增加网络资源（拥塞防止）          减下网络负载（拥塞消除）                    网络层拥塞控制措施                  流量感知路由          准入控制          流量调节          负载脱落                      流量感知路由          概述：                  网络抽象为一张带权无向图，路由器抽象为图的结点，链路抽象为图的边          每一条链路有自己的链路费用（例如：时延小，权值小）          权值根据网络负载动态调整，可以将网络流量引导到不同的链路上，均衡网络负载，延缓或者避免拥塞的发生          流量感知路由是一种拥塞预防措施，在一定程度上缓解和预防拥塞的发生          可能发生震荡现象                      准入控制          广泛应用于虚电路网络的拥塞预防技术      思想：对新建虚电路审核，如果新建立的虚电路会导致网络变得拥塞，那么网络拒绝建立该新虚电路        流量调节：在网络发生拥塞时，通过调整发送方发送数据的速率来消除拥塞。          抑制分组：感知到拥塞的路由器选择一个被拥塞的数据报，给该数据报的源主机返回一个抑制分组      背压：抑制分组在从拥塞结点到源结点的路径上的每一跳，都发挥抑制作用        负载脱落          有选择地主动丢弃一些数据报，来减轻网络负载，从而缓解或消除拥塞      选择丢弃哪些数据报是关键，通常与上层应用有关        5 Internet网络层              IPV4          概述                  Internet网络层最核心的协议          定义了如何封装上层协议（如UDP、TCP）的报文段；          定义了Internet网络层寻址（IP地址）以及如何转发IP数据报等内容；两个版本：IPv4和IPv6                    格式                  1）版本号：4位。IP的版本号。          2）首部长度：4位。IP数据报的首部长度：20B-60B（假设第一个字节（8位）：表示IPv4，首部长度4X5=20字节）          3）区分服务：8位。在旧标准种称为服务类型（Type Of Service，TOS）字段，用来指示期望获得哪种类型的服务          4）数据长度：16位。IP数据报的总字节数，包括首部和数据部分          5）标识：16位。标识一个IP数据报。每产生一个IP数据报，IP协议的计数器加1。                          该字段的重要用途：在IP数据报分片和重组过程中用于标识属于同一IP数据报。              该字段不可唯一标识一个IP数据报                                6）标志：3位                          DF 【Don’t Fragment】（禁止分片）：0=允许分片；1=禁止分片              MF【More Fragament】（更多分片）：0=未分片或者最后一片；1=是分片且不是最后一个                                7）片偏移字段（13位）：以8B为单位。表示一个IP数据报分片与原IP数据报的数据的相对偏移量                          当该字段值为0时，且MF=1， 则表示这是一个IP分片，且是第一个分片                                8）生存时间：8位。Time-To-Live ，TTL。表示IP数据报在网络中可以通过的路由器数（或跳步数）          9）上层协议：8位，指示该IP数据报封装的是哪个上层协议                          TCP–6              UDP–17                                10）首部校验和：16位，利用校验和实现对IP数据报首部的差错检测          11）源IP地址：32位 发出IP数据报的源主机的IP地址          12）目的IP地址：32位。IP数据报的需要送达的主机的IP地址          13）选项：长度可变          14）数据：存放IP数据报所封装的传输层报文段                    IP数据报分片                  概述                          一个IP数据报从源主机到目的主机传输过程中，可能经过多个运行不同数据链路层协议的网络              不同数据链路层协议所能承载的网络层数据报的最大长度不尽相同              以太网承载数据最大长度1500字节              最大传输单元（Maximum Transmission Unit ， MTU）：数据链路层帧能承载的最大数据量。受MTU限制                                数据报长度超过MTU，DF=0时分片，DF=1时丢弃，MF标志位，最后一个分片是0，其余分片全部是1          注意事项                          IP分片的协议版本、标识、源IP、目的IP直接继承原数据报对应的值              IP分片重组任务由目的主机的IP完成                                  是否属于同一个数据报                  是否是最后一个分片                  IP分片的先后顺序                                                              原则                          尽可能少分片              一个最大分片可封装的数据字节数最好是8的倍数              假设数据报总长度为L字节，MTU为M字节。且L&gt;M，DF=0。                                计算方法（例子）                          发送一个总长度为3400字节的IP数据报，通过MTU=1500字节的链路转发。如何分片                                  解析                                          因为MTU=1500字节：对于一个分片来说包括两部分内容：首部+数据一个分片可以封装的数据字节数：1500-20=1480字节                      IP数据报的总长度：3400字节IP数据报的数据长度：3400-20=3380字节分片数：3380÷1480=2.28（3片）                      偏移量                                                  第1片的片偏移量：0÷8=0                          第2片的片偏移量：1480÷8=185                          第3片的片偏移量：2960÷8=370                                                                                                                                                              IPv4的编址          概述                  Pv4地址的长度为32位，共有232个不同的IP地址，约为43亿个          表示法：点分十进制标记法          一台主机可以拥有多个IP地址          IP地址两部分                          前缀（Prefix）：即网络部分（Net ID）。用于描述主机所归属的网络              后缀（Postfix）：即主机部分（Host ID）。用于表示主机在网络中的唯一地址                                          分类                  A、B、C类：地址可以用于标识网络中的主机或路由器          D类：作为组广播地址                      E类：地址保留                                                            类                  前缀长度                  前缀                  首字节                                                                              A                  8位                  0xxxxxxx                  0-127                                                  B                  16位                  10xxxxxx xxxxxxxxx                  128-191                                                  C                  24位                  110xxxxx xxxxxxxxx xxxxxxxxx                  192-223                                                  D                  不可用                  1110xxxx xxxxxxxxx xxxxxxxxx xxxxxxxxx                  224-239                                                  E                  不可用                  1111xxxx xxxxxxxxx xxxxxxxxx xxxxxxxxx xxxxxxxxx                  240-255                                                                        表示                  前缀中的后几位：表示网络地址个数          后缀位数：表示这类网络中的IP地址总数                                                    类              前缀              前缀固定              前缀中的后几位表示网络地址              每个网络中IP地址总数                                                          A              8              0              7位，27=128个              $2^{24}$个                                      B              16              10              14位，214个              $2^{16}$个                                      C              24              110              21位，221个              $2^{8}$个                                          特殊地址                  本地主机地址：0.0.0.0/32，获取IP地址的时候可以用。新加入的主机通过DHCP请求IP地址          有限广播地址：255.255.255.255/32，表示广播地址。此网络内所有主机都可以收到          回送地址：127.0.0.0/8，例如127.0.0.1.ping一下，网络是否畅通                            私有地址：一部分分类地址保留用于内部网络。这部分分类地址可以在内网使用，但不能在公共互联网上使用                                            私有地址类别              范围                                                          A类              10.0.0.0——10.255.255.255 （或10.0.0.0/8）                                      B类              172.16.0.0——172.31.255.255（或172.16.0.0/12）                                      C类              192.168.0.0——192.168.255.255（或192.168.0.0/16）                                          无类地址                  无类地址中，网络前缀不再被设计为定长的8位、16位、24位，而变成可以是0-32位的任意值          网络地址书写形式：a.b.c.d/x。                    子网划分                  概述：为了缓解地址空间不足，提高IP地址空间利用率：另外的两种策略子网化和超网化          子网化：将一个较大的子网划分为多个较小子网的过程。（大变小）          超网化：将具有较长前缀的相对较小的子网合并为一个具有稍短前缀的相对较大的子网。（小变大）          子网掩码                          子网掩码：定义一个子网的网络前缀长度；              子网掩码位数：32位              书写形式：二进制，点分十进制              取值规则：对应网络前缀，全部为1。其余位（主机部分），全部为0              例子：                                  子网地址：213.111.0.0/24；子网掩码：255.255.255.0；网络前缀（24）位，主机位（8）位                  子网地址：213.111.0.0/23；子网掩码：255.255.254.0；网络前缀（23）位，主机位（9）位                                                              假设某子网中的一个主机的IP地址是203.123.1.135，子网掩码是255.255.255.192                          那么该子网的子网地址是什么?                                  与运算；0&amp;0=0； 0&amp;1=0； 1&amp;0=0； 1&amp;1=1                  子网地址是203.123.1.128/26                                            直接广播地址是什么?                                  子网掩码的反码与主机IP地址按位或运算                  反码：1变为0；0变为1                                                                                                              0                                                     0 = 0； 1                                                     0 = 1； 0                                                     1 = 1； 1                                                     1 = 1；                                                                                                      直接广播地址：203.123.1.191                                            该子网IP地址总数是多少?                                  IPV4地址共32位，分为网络位+主机位。                  通过子网掩码可以确定网络位，                  则主机位为：32-网络位。IP地址总数：2 （主机位数）。                  主机位有32-26=6位，即有26=64个IP地址总数。                                            该子网的可分配IP地址数是多少?                                  在IP地址总数中子网地址占一个，广播地址占一个，不能分配给主机和路由器接口。                  所以，可分配IP地址总数：IP地址总数-2（子网地址占头，广播地址占尾。）                  该子网的可分配IP地址数是64-2=62个                                            可分配IP地址范围是多少？                                  子网地址：203.123.1.128（头）（第一小题已经算出）                  广播地址：203.123.1.191（尾）                  可分配IP地址范围是： 203.123.1.129〜203.123.1.190                                                              路由聚合                          概述：路由器转发表由网络地址、子网掩码、下一跳地址、路由器接口组成。网络地址、子网掩码可以合并给出              规则                                  只有一条路由匹配成功（默认路由除外），选择该路由表项转发IP数据报。                  匹配成功的路由表项不止一条，选择网络前缀最长的那条。                  没有一条匹配成功，通过默认路由转发IP数据报                                            总结                                  减少路由表项数，提高路由效率，将可以聚合在一起的子网聚合成一个大的子网。子网划分的逆过程                  前提：具有相同的路由“路径”，即“下一跳地址”和“接口”相同                                                                          动态主机配置（DHCP）          概述：当组织分配到一个网络地址块后，就可以为该组织内的主机和路由器接口分配IP地址      分配方式                  静态分配：网络管理员手动配置          动态分配：动态主机配置协议（DHCP）来分配                    端口号                  DHCP服务器端口号67          DHCP客户端口号68                    DHCP 工作过程                  服务器发现：广播方式          服务器提供：广播方式          请求：广播方式          DHCP确认                      网络地址转换（Network Address Translation，NAT）          作用：IPv4址分配殆尽，很多主机使用私有地址，但是在公共网络上私有地址是无效的      工作原理                  从内网出去的IP数据报，将其IP地址替换为NAT服务器拥有的合法的公共IP地址以及端口号，并将替换关系记录到NAT转换表中；          从公共互联网返回的IP数据报，依据其目的IP地址与目的端口号检索NAT转换表，并利用检索到的内部私有IP地址和端口号替换目的IP地址和端口号，然后将IP数据报转发到内部网络                    外网访问内网                  NAT穿透技术          在外网主机主动与内网主机发起通信之前，先在NAT转换表建立好内外网映射（静态配置、动态配置：UPnP），使内网运行的服务以NAT公网地址的“合法”身份“暴露”出去                      互联网控制报文协议（Internet Control Message Protocol ，ICMP）          进行主机或路由器间的网络层差错报告与网络探测      类型                  差错报告报文                          终点不可达              源点抑制              时间超时              参数问题              路由重定向                                询问报文                          回声请求/应答              时间戳请求/应答                                            IPv6          概述                  版本字段：指出协议版本号。          流量类型：和IPv4的区分服务（TOS）字段相似。          流标签：用来标识一系列数据报的流。          有效载荷长度字段：IPv6数据报中数据的字节数量。          下一个首部：用来标识IPv6数据报要上交给上层的协议是那个，比如TCP还是UDP。          跳数限制：与生存时间TTL功能类似。          源IP地址和目的IP地址：与IPv4 意义一样。          数据：数据报中承载的有效载荷。          IPV6基本首部40字节。                    表示方法                  8组冒号分隔的十六进制数：5000：0000：00A1：0128：4500：0000：89CE：ABCD          连续多组0000可以用：：代替；：：只能出现一次          在IPv6地址中嵌入IPv4的点分十进制：6700：：89A1：0321：206.36.45.19                    分类                  单播：可以标识网络中唯一的主机或路由器接口，可做源地址和目的地址。          组播：标识网络中的一组主机，可做目的地址。          任播：也是标识网络中的一组主机，但是当向一个任播地址发送数据报的时候，只有该任播地址组内某个成员收到数据报，可做目的地址                    IPv4到IPv6的迁移                  双协议栈：网络结点同时具备发送IPv4与IPv6数据报的能力          隧道：通信源端与目的端都提供IPv6服务，但是途径一段IPv4网络。在IPv6数据报进入隧道前的最后一个路由器上，该路由器将整个IPv6数据报封装进IPv4数据报中，再转发，在出口处再从IPv4 数据报中提取IPv6数据报的有效荷载                    6 路由算法与路由协议  路由选择算法的分类          网络层的另一项重要功能：路由选择      带权无向图：将网络抽象为一个带权无向图G=（N，E），N表示结点集合，E是边的集合      分类                  是否需要全局信息                          全局式路由选择算法-典型：链路状态路由选择算法（LS算法）静态动态              分布式路由选择算法-典型：距离向量路由选择算（DV算法）                                静态动态                          静态：人工配置              动态：自动计算最佳路由。LS、DV                                是否敏感                          敏感              迟钝                                            链路状态路由选择算法          链路状态路由选择算法是一种全局式路由选择算法，每个路由器在计算路由时，需要构建出整个网络的拓扑图      链路状态路由选择算法：利用Dijkstra算法求最短路径        距离向量路由选择算法          距离向量路由选择算法是一种异步的、迭代的分布式路由选择算法。该算法的基础是Bellman-Ford方程（简称B-F方程）      网络中每个结点x，估计自己到网络中所有结点y的最短距离，记为Dx（y），称为结点x的距离向量。        层次化路由选择          合理的网络规模范围                  全局式路由选择算法(链路状态路由选择算法（LS算法）)          分布式路由选择算法(距离向量路由选择算（DV算法）)                    层次化路由选择：大规模网络路由选择最有效可行的解决方案      自治系统（autonomoussystem，AS）：大规模的互联网按组织边界、管理边界、网络技术边界或功能边界划分为多个自治系统。每个自治系统由运行相同路由协议和路由选择算法的路由器组成                  每个自治系统存在至少一个与其他自治系统互连的路由器，负责与其他自治系统交换路由可达信息，称为网关路由器                    大规模互联网的路由划分为两层：                  自治系统内路由选择：基于所在自治系统采用的路由选择算法、计算到达自治系统内目的网络的路由          自治系统间路由选择：网关路由器运行自治系统间路由选择协议，负责其他自治系统的路由可达性信息                      Internet路由选择协议          内部网关协议（Interior Gateway Protocol，IGP）（Internet自治系统内路由选择协议）；典型：RIP、OSPF                  RIP（routing information protocol）                          路由信息协议              最早的自治系统内路由选择协议之一，基于距离向量路由选择算法              特性                                  第一、RIP在度量路径时采用的是跳数，每条链路的费用都为1。                  第二、RIP的费用定义在源路由器和目的子网之间，最短路劲费用是指最短路劲经过的子网数量                  第三、RIP被限制的网络直径不超过15跳的自治系统内使用，16表示无穷大，表示目的网络不可达                                            RIP是应用进程的实现，使用传输层的UDP报文来封装传输RIP报文              RIP仍然是网络层协议，因为RIP实现的是网络层的功能                                OSPF（Open Shortest Path First）                          开放最短路径优先协议              基于链路状态路由选择算法的IGP，使用Dijkstra算法求最短路径              优点                                  安全-OSPF报文，经过认证。可以防止恶意侵入者将不正确的信息注入道路由器转发表中                  支持多条相同费用路径：允许使用多条相同费用路径，这样防止在具有多条从源到目的的费用相同的路径时，所有流量都发往其中一条路径                  支持区别化费用度量：同一条链路，根据IP数据报不同，设置不同的费用度量，实现不同类型网络流量的分流                  支持单播路由与多播路由：单播：只有一个源点网络和一个终点网络多播：在多播通信中，有一个源点和一组终点，这是一对多的关系                  分层路由：OSPF支持在大规模自治系统内进一步进行分层路由                                                                        外部网关协议（Exterior Gateway Protocol，EGP）：Internet自治系统间路由选择协议；典型：BGP                  BGP（Border Gateway protocol）                          边界网关协议              实现跨自治系统的路由信息交换。典型版本是BGP4              BGP封装进TCP报文段              每个AS可以通过BGP实现如下功能                                  1）从相邻AS获取某子网的可达性信息                  2）向本AS内部的所有路由器传播跨AS的某子网的可达信息                  3）基于某子网可达性信息和AS路由策略、决定到达该子网的最佳路由                                            BGP也是由应用进程实现，传输层使用TCP                                  通过179号端口建立半永久的TCP连接。交换BGP报文                  TCP连接两端的路由器称为BGP对等端方                  发送报文的过程称为BGP会话                  分为内部BGP会话和外部BGP会话                                            BGP报文的4中类型                                  1）OPEN（打开）报文，用来与BGP对等方建立BGP会话                  2）UPDATE（更新）报文，用来通告某一路由可达性信息，或者撤销已有路由                  3）KEEPALIVE（保活）报文，用于对打开报文的确认，或周期性地证实会话的有效                  4）NOTIFICATION（通知）报文，用来通告差错                                            属性                                  1）AS-PATH：AS路径                  2）NEXT-HOP：一个开始AS-PATH的路由接口                    第五章 数据链路层与局域网                    1 数据链路层服务                                                                                            概述：负责通过一条链路，从一个结点向另一个物理链路直接相连的相邻结点，传送网络层数据报，中间不经过任何其他交换结点  数据链路          在物理链路之上      基于通信协议来控制数据帧传输的逻辑数据通路      其主要依赖硬件实体是：网卡（NIC，网络适配器）        结点          从数据链路层来看，主机、路由器等统称为结点      链路：相邻结点的通信信道称为链路      数据链路层传输的数据单元是：帧        数据链路层提供的服务          1）组帧                  数据链路层将要传输的数据（网络层IP数据报）封装成帧，称为组帧或者成帧          帧头（帧首）：发送结点和接收结点的地址（MAC）信息          帧尾：用于差错检测的差错编码          帧定界：识别一个帧的开始和结束                    2）链路接入                  物理链路可以分为：点对点链路和广播链路          点对点链路：发送结点和接收结点独占信道链路          广播链路：通信链路被多个结点共享，会彼此干扰，导致传输失败          结点必须运行MAC协议（媒介访问控制协议）协调各结点共享物理传输媒介                    3）可靠交付                  可靠数据传输原理，停-等协议，滑动窗口协议都适用          无线链路（出错率高）：支持可靠数据传输          光纤、双绞线（出错率低）：不提供可靠数据传输服务                    4）差错控制                  数据链路层帧在物理媒介上的传播过程，可能会出现比特翻转的差错          误比特率：一段时间内出现差错的比特数/传输比特总数。与线路信噪比有很大关系          措施：差错控制            2 差错控制                                概述          信号在信道传输过程中，会受到各种噪声的干扰，从而导致传输差错      随机噪声——随机差错或独立差错      冲击噪声——突发差错      差错控制就是通过差错编码技术，实现对信息传输差错的检测，并基于某种机制进行差错纠正和处理        差错编码基本方式          检错重发：                  发-待发送数据差错编码，在通过信道传输          收-利用差错编码检测，出错，请求重发数据加以纠正，知道正确为止          停-等，滑动窗口                    前向纠错 FEC（利用纠错编码）                  发-纠错编码，发包含纠错编码的帧          收-利用纠错编码差错检测，对错误的帧纠错          使用：单工链路、对实时性要求比较高的应用。                    反馈校验                  接-原封不动发回          发-通过对比接收端反馈 若有不同，立即重传数据，直到一致为止          优点：原理简单，易于实现，无须差错编码          缺点：需要相同传输能力的反向信道，传输效率低，实时性差                    检错丢弃                  网络应用对可靠性要求不高，可以采用不纠正出错数据，直接丢弃错误数据          只适用于实时性高的系统                      差错编码基本原理          在待传输数据信息基础上，附加一定的冗余信息。冗余信息：与数据信息建立某种关联关系      接收方检测冗余信息与数据信息的关联关系是否存在，存在则没有错误，否则就有错误        差错控制检错与纠正能力  典型差错编码          奇偶                  奇校验码：奇数位出错能检测出来，偶数位发生错误无法检测出来          偶校验码：奇偶校验可以实现50%的检错率          优点：编码简单、编码效率高、开销最小的检错编码；          缺点：检错率不高                    汉明码      循环冗余码：在数据链路层广泛应用的差错编码。（检错码）        3 多路访问控制协议              概述          点对点信道：一对一通信方式，信道被双方独享      广播信道（共享介质）：一对多通信方式，信道上连接的点很多，信道被结点共享。必须使用多路访问控制协议来协调结点的数据发送      MAC协议的根本任务：解决信道的共享问题        信道划分MAC协议：利用多路复用技术实现信道共享的MAC协议          频分多路复用FDM：在频域内将信道带宽划分为多个子信道，将原始信号调制到对应的某个子信道的载波信号上，使同时传输的多路信号在整个物理信道带宽的允许范围内频谱不重叠，从而共用一个信道      时分多路复用TDM      波分多路复用WDM      码分多路复用CDM        随机访问MAC协议          ALOHA协议      CSMA载波监听多路访问协议（先听后说）      CSMA/CD带冲突检测的载波监听多路访问协议（先听后说，边听边说）        受控接入MAC协议          集中式控制：轮询技术      分散式控制：是令牌技术        4 局域网              概述          局域网（LAN）：局部区域网络，覆盖面积小，网络传输速率高，传输的误码率低      局域网常见的拓扑类型：星形网络，总线型网络，环形网络等      为了使数据链路层更好地适应多种局域网标准，IEEE802委员会将局域网的数据链路层拆分为两个子层                  逻辑链路控制（Logical Link Control，LLC）子层（名存实亡）          介质访问控制（medium access control，MAC）MAC子层                      数据链路层寻址与ARP          概述：数据链路层的帧，需要携带发送结点的数据链路层地址，以及接收结点的数据链路层地址，标识帧的发送方与接收方      MAC地址                  MAC地址（物理地址、局域网地址）：MAC地址具有唯一性，每个网络适配器对应一个MAC地址          MAC地址空间的分配：由电气和电子工程师协会（IEEE）统一管理                          IEEE分配前24位的MAC地址块              后24位由生产公司分配                                表示                          以太网和IEEE 802.11无线局域网，使用的MAC地址长度为6字节（48位）。一共有248 个可能的MAC地址              通常采用十六进制表示法，每个字节表示一个十六进制数，用 - 或：连接起来              例如                                  00-2A-E1-76-8C-39 或 00：2A：E1：76：8C：39                                            16进制：0，1，2，3，4，5，6，7，8，9，A，B，C，D，E，F              Mac广播地址：FF-FF-FF-FF-FF-FF                                          地址解析协议                  根据本网内目的主机或默认网关的IP地址获取其MAC地址          基本思想                          在每一台主机中设置专用内存区域，称为ARP高速缓存（也称ARP表）              存储该主机所在局域网中其他主机和路由器的IP地址与MAC地址的映射关系              ARP通过广播ARP查询报文，来询问某目的IP地址对应的MAC地址，即知道本网内某主机的IP地址，可以查询得到其MAC地址                                注意的两点                          （1）ARP查询分组是通过一个广播帧发送的；而ARP响应分组是通过一个标准的单播帧发送的              （2）ARP是即插即用的，一个ARP表是自动建立的，不需要系统管理员来配置                                            以太网          概述：以太网（ethernet）：目前为止最流行的有线局域网技术。以太网与IEEE802.3是等价的      以太网成功的原因                  1）以太网是第一个广泛部署的高速局域网。          2）令牌环网、FDDI（纤分布式数据接口）和ATM（异步传输模式）等比以太网技术更复杂、昂贵，阻止了网络管理员改用其他技术          3）以太网数据速率也快，比起其他技术，毫不逊色          4）以太网硬件价格极其便宜，网络造价成本低                    经典以太网技术                  1）采用粗同轴电缆连接的总线型以太网（10Base-5）（10：10Mbit/s ；BASE：传输信号为基带信号；5：5个网段、单段最大传输距离为500米）          2）数据传输速率为10Mbit/s，无连接不可靠          3）MAC协议采用CSMA/CD协议          4）相距最远主机信号往返的传播时延为51.2μs，所以以太网最短帧长为64字节                      交换机          网桥                  工作在数据链路层，和交换机功能类似。对数据帧实现转发          适合用户数不太多和通信量不太大的局域网          典型网桥：透明网桥，一种即插即用设备。局域网上的站点并不知道所发送的帧经过哪几个网桥                    交换机（转发与过滤）                  交换机可以认为是多端口的网桥，目前应用最广泛的数据链路层设备          交换机的基本工作原理：                          当一帧到达时，交换机首先需要决策将该帧丢弃还是转发              如果是转发的话，还必须进一步决策应该将该帧转发到哪个（或哪些）端口去              以目的MAC为主键查询内部转发表（无须转发、选择性转发、泛洪）                                优点                          消除冲突              支持异质链路              网络管理                                            虚拟局域网          划分方法                  基于交换机端口划分：每个交换机端口属于一个VLAN。          基于MAC地址划分：按主机MAC地址定义VLAN成员          基于上层协议类型或地址划分：根据数据中的上层协议类型（IP）或者地址（IP地址）定义VLAN成员            5 点对点链路协议                                点对点链路协议：点对点协议（PPP协议）、高级数据链路控制协议（HDLC协议）  PPP：适合单个发送方和单个接收方的点对点链路          PPP的一个典型应用是家庭用户拨号上网      功能                  成帧          链路控制协议：启动线路、检测线路、协商参数、关闭线路          网络控制协议：协商网络层选项                    不要求PPP实现的功能                  差错纠正          流量控制          按序交付                    PPP的字节填充：PPP帧的长度都是整数字节。特殊的控制转义字节01111101        HDLC协议：应用于点对点链路和点对多点链路          HDLC有3种类型的帧（根据控制位的不同）                  信息帧（I格式 Information）          管理帧（S格式 Supervisory）          无序号帧（U格式 Unnumbered）                    HDLC协议是面向位的协议：位填充技术        第六章物理层              从物理层角度来看，计算机网络通信的本质就是数据通信    1 数据通信基础    数据通讯基础概念          消息与信息                  消息：人类能够感知的描述          信息：一个抽象的概念。消息中所包含的有意义的内容，消息是信息的载体                    通信                  本质是在一点精确或近似地再生另一点的信息          通信系统：一般是指电通信，能够实现通信功能的各种技术、设备和方法的总体                    信号：在通信系统中，特别是电通信系统，信息在传输通道中传播的载体，称之为信号      数据：对客观事物的性质状态以及相互关系等进行记载的符号及其组合，可以是数字、文字、图像等，也可以是其他抽象符号      信道：信道是信号传输的介质                  狭义信道：仅是指信号的传输介质          广义信道：不仅是传输介质，而且包括通信系统中的一些转化装置                      数据通讯系统模型          数据通信系统的构成                  计算机网络是典型的数据通信系统          通信系统的作用是将消息从信源传送到一个或多个目的地          能够实现信息传输的一切技术设备和传输介质的集合称为通信系统                    模拟通信与数字通信:信道传输的是模拟信号称为模拟通信系统；信道传输的是数字信号称为数字通信系统                  模拟：是指信号的因变量完全随连续消息的变化而变化的系号（电视图像、电话语音）          数字：是指表示消息的因变量是离散的，自变量时间的取值也是离散的信号（计算机数据、电话、数字电视）                    数据通信方式                  数据传输方向                          单向通信：无线电广播              双向交替通信（半双工）：对讲机              双向同时通信（全双工）：电话网、计算机网络                                数据传输时空顺序                          并行通信：一个字节，每一位一个通道，全部位同时传送。              串行通信：一条通道，每一位依次在这条通道上传输                                数据同步技术                          异步通信：发送字符，不需建立同步时钟，实现简单，传输效率低适用低速网络。              同步通信：发送数据块（包含多个字符），双方建立同步时钟，实现复杂，传输效率高适用高速网络                                数据通信系统的功能                          1）信道的利用：多个通信设备共享，多路复用技术              2）接口及信号产生：保证信源、信宿与传输系统之间的信息交互              3）同步：发送与接收器之间达成约定              4）差错检测与纠正：发现信号失真，并纠正              5）寻址与路由：具有多条路径的网络选择合适的路径进行数据传              6）网络管理：规划、设置、监控、调度与维护              7）安全保证：数据在传输过程中不被改变，不被非法用户获                2 物理介质                                                          物理介质是网络中传输信息的载体  分类          导引型传输介质（有线）                  以导线为传输介质，信号沿导线进行传输，信号的能量集中在导线附近，因此传输效率高，但是部署不灵活          方式                          架空明线（基本淘汰）              双绞线              同轴电缆（被双绞线替代）              光纤：利用了光的全反射现象                                          非导引型传输介质（无线）        3 信道与信道容量              概述          信道就是信号在通信系统中传输的通道      无线通信：信道就是电磁波传输通过的空间      有线通信：信道就是导向性线缆        信道分类与模型          信道                  狭义信道：信号传输介质。          广义信道（简称信道）：包括信号传输介质和通信系统的一些变换装置（发送设备、接收设备、天线、调制器等）。          广义信道按功能划分：调制信道、编码信道                    调制信道        信道传输特性          概述                  模拟信源：电话机发出，可以通过信源编码转换为数字基带信号；          数字信源：计算机发出。          数字信号两种传输方式：基带传输、频带传输                    数字基带传输编码        信道容量    4 基带传输    基带传输基本概念          信号码（绝对码）                  单极不归零码          双极不归零码          单极归零码          双极归零码          差分码（相对码）                    传输码                  AMI码：双相码；米勒码          CMI码：nBmB码；nBmT码；            5 频带传输                                频带传输基本概念  频带传输中的三种调制方式          二进制数字调制      多进制数字调制      正交幅值调制QAM        6 物理层接口规程              物理层接口概述          物理层完成数据终端设备之间的比特流传输、包括物理链路的建立、维护和拆除的规范和标准，同时也定义物理层接口通信标准      物理层接口协议解决的问题：主机、工作站等数据终端设备与通信线路上的通信设备之间的接口问题                  数据终端设备DTE（计算机）：Data Terminal Equipment          数据电路终端设备DCE（调制解调器）：Data Circuit-Terminating Equipment                      物理层接口特性          机械特性：指明通信实体间硬件连接口的机械特点，尺寸、引线数目和排列      电气特性：规定了物理连接上，导线的电气连接及有关电路特性      功能特性：指明物理接口各条信号线的用途等      规程特性：通信协议，指明利用接口传输比特流的全过程，传输事件发生的合法顺序，包括事件的执行顺序和数据传输方式      第七章无线与移动网络1 无线网络  无线网络基本结构          概述                  无线主机：运行应用程序的终端设备（计算机、智能手机）          无线链路：主机通过无线链路连接到基站或者另一台无线主机          基站：关键部分。如蜂窝网的蜂窝塔（cell tower）、IEEE802.11的AP          网络基础设施：通常是大规模有线网络，如internet                    自组织网络（Ad Hoc Network）：又称特定网络。        无线链路与无线网络特性          无线链路特征：通过无线链路连接到基站，不同无线链路技术传输速率和传输距离不同      有线网络与无线网络的重要区别在数据链路层和物理层，无线链路有别于有线链路主要表现                  信号强度的衰减          干扰          多径传播                    导致碰撞的两种情况                  1）隐藏终端          2）衰减            2 移动网络                                移动网络基本原理          无线网络不一定是移动网络，但移动网络一定是无线网络      移动性分析                  从网络层角度分析用户的移动性          移动结点的地址始终保持不变          可用的有线基础设施的支持                    移动互联网体系结构                  1）归属网络（家网）：一个移动结点的永久居所。          2）归属代理（家代理）：在一个归属网络中代表移动结点执行移动管理功能的实体。一般配置在路由器上。          3）外部网络（被访网络）：移动结点所在的非归属网络。          4）外代理：在外部网络中代表移动结点执行移动管理功能的实体                      寻址：移动结点从一个网络移到另一个网络保持地址不变          解决方案                  外部网络可以通过向其他所有网络发通告，告诉它们该移动结点正在它的网络中          将移动性功能从网络核心搬到网络边缘，由该移动结点的归属网络（归属网络）来实现                      移动结点的路由选择    3 无线局域网 IEEE802.11    IEEE 802.11系列标准  IEEE 802.11 体系结构          基站：接入点（AP）      基本服务集（BSS）：包含一个或多个无线站点和一个接入点的中央基站。        IEEE 802.11 的MAC协议  IEEE 802.11帧          （1）控制帧      （2）数据帧      （3）管理帧        4 蜂窝网络        5 移动IP网络        6 其他典型无线网络简介        第七章网络安全基础        1 网络安全概述        2 数据加密              数据加密基本概念  传统加密方式：替代密码、换位密码  对称密钥加密：DES、三重DES、AES、IDEA  非对称/公开密钥加密：RSA、 Diffie-Hellman    3 消息完整性与数字签名    4 身份验证    5 密钥分发中心与证书认证    6 防火墙与入侵检测系统    7 网络安全协议  "
  },
  
  {
    "title": "Pprof",
    "url": "/blog.github.io/posts/pprof/",
    "categories": "Server",
    "tags": "golang, GoAdvanced, GoUtils",
    "date": "2021-03-17 18:01:33 +0800",
    





    "snippet": "Go pprof And Prometheus在代码中使用import (  ...\t_ \"net/http/pprof\"  \"github.com/prometheus/client_golang/prometheus/promhttp\"  ...)func main() {   \tgo func() {\t\thttp.Handle(\"/metrics\", promhttp.Handler())\t\t_ = http.ListenAndServe(\"14111\", nil) // '14111' 建议使用flag\t}()  }浏览器查看  http:/172.13.5.17:14111/debug/pprof/使用命令行查看所有go tool pprof http://172.13.5.17:14611/debug/pprof/profile  # 查看profile(pprof) topShowing nodes accounting for 3170ms, 64.69% of 4900ms totalDropped 260 nodes (cum &lt;= 24.50ms)Showing top 10 nodes out of 207      flat  flat%   sum%        cum   cum%    1180ms 24.08% 24.08%     1180ms 24.08%  runtime.futex     560ms 11.43% 35.51%      600ms 12.24%  syscall.Syscall     460ms  9.39% 44.90%      460ms  9.39%  runtime.epollwait     370ms  7.55% 52.45%      370ms  7.55%  runtime.usleep     220ms  4.49% 56.94%      300ms  6.12%  runtime.scanobject      90ms  1.84% 58.78%       90ms  1.84%  runtime.lock      80ms  1.63% 60.41%       80ms  1.63%  runtime.step      70ms  1.43% 61.84%     1590ms 32.45%  runtime.findrunnable      70ms  1.43% 63.27%       90ms  1.84%  runtime.nanotime (inline)      70ms  1.43% 64.69%       70ms  1.43%  runtime.siftdownTimer(pprof) go tool pprof http://172.13.5.17:14611/debug/pprof/heap  # heap 查看那部分代码占比 比较高-------------------------------- top (pprof) top         Showing nodes accounting for 28238.94kB, 80.86% of 34922.60kB totalShowing top 10 nodes out of 151      flat  flat%   sum%        cum   cum%10752.80kB 30.79% 30.79% 12752.05kB 36.52%  time.NewTimer 3598.02kB 10.30% 41.09%  3598.02kB 10.30%  bufio.NewReaderSize 3598.02kB 10.30% 51.40%  3598.02kB 10.30%  bufio.NewWriterSize 2200.03kB  6.30% 57.70%  2200.03kB  6.30%  google.golang.org/protobuf/internal/strs.(*Builder).AppendFullName 2054.76kB  5.88% 63.58%  2054.76kB  5.88%  git.huoys.com/indonesia/game/chess/qiuqiu/logic.(*CardList).shuffle 1999.25kB  5.72% 69.30%  1999.25kB  5.72%  time.startTimer 1536.56kB  4.40% 73.70%  1536.56kB  4.40%  runtime.malg 1052.25kB  3.01% 76.72%  1052.25kB  3.01%  sync.(*Map).dirtyLocked  902.59kB  2.58% 79.30%   902.59kB  2.58%  compress/flate.NewWriter  544.67kB  1.56% 80.86%   544.67kB  1.56%  bytes.makeSlice(pprof) -------------------------------- list 查看方法(pprof) list shuffleTotal: 34.10MBROUTINE ======================== git.huoys.com/indonesia/game/chess/qiuqiu/logic.(*CardList).shuffle in /go/src/git.huoys.com/indonesia/game/chess/qiuqiu/logic/card_help.go    2.01MB     2.01MB (flat, cum)  5.88% of Total         .          .      8:         .          .      9:// 洗牌         .          .     10:func (p *CardList) shuffle() {         .          .     11:   p.cardsMap = make(map[xproto.CardID]GoQiuQiu)         .          .     12:   for _, v := range _goQiuQiu {    2.01MB     2.01MB     13:           p.cardsMap[v.CardId] = v         .          .     14:   }         .          .     15:}         .          .     16:         .          .     17:// DispatchHandCardDebug Debug 发牌模式         .          .     18:func (p *CardList) DispatchHandCardDebug(cardIds ...int) *HandCard {(pprof) -------------------------------- web （需要安装graphviz命令才能使用生成一个.svg 浏览器打开即可）-------------------------------- 下面几个都可以使用 top list web ;或者可以直接 help 查看帮助帮助命令go tool pprof http://172.13.5.17:14611/debug/pprof/allocsgo tool pprof http://172.13.5.17:14611/debug/pprof/goroutine go tool pprof http://172.13.5.17:14611/debug/pprof/mutexgo tool pprof http://172.13.5.17:14611/debug/pprof/block使用浏览器直接查看      定位问题          查看服务使用cpu      内存使用情况磁盘和io使用情况            使用工具                                                      ps -aux              grep qiuqiu  ——–&gt; 查找服务                                          stop -p pid   ——–&gt; CPU 内存      iotop -p pid  ——–&gt; 磁盘io            分析问题                  生成pprof文件                  go tool pprof http://172.13.5.17:14611/debug/pprof/profile  （默认放在 cd $HOME/pprof/ ）          可以看到会生成这样的文件  /Users/cc/pprof/pprof.qiuqiu.samples.cpu.002.pb.gz                            go tool pprof -http=0.0.0.0:999 /Users/cc/pprof/pprof.qiuqiu.samples.cpu.002.pb.gz （使用浏览器预览生成的文件查看服务状态）                    查看火焰图方法                            火焰图详情                    "
  },
  
  {
    "title": "Kubectl",
    "url": "/blog.github.io/posts/kubectl/",
    "categories": "SystemUtils",
    "tags": "Kubernetes",
    "date": "2021-03-17 17:48:38 +0800",
    





    "snippet": "## 大厅kubernetes 服务准备工作      安装 kubectl        登录到Kubernetes 集群中          获取 ` cat /root/kuber/config `      放入到目标机器的 ~/.kube/config            查看版本    kubectl versionkubectl get nodes      Kubernetes 工作原理  参考地址kubectl 使用介绍  官方文档  官方文档备忘清单[root@idn ~]# kubectl --helpkubectl controls the Kubernetes cluster manager. Find more information at: https://kubernetes.io/docs/reference/kubectl/overview/Basic Commands (Beginner):  create        创建资源  expose        将控制器、服务、部署或pod暴露未新的Kubernetes服务  run           在集群上运行一个特定的镜像  set           设置对象的特定功能Basic Commands (Intermediate):  explain       Documentation of resources  get           显示一个活多个资源  edit          编辑服务的资源  delete        按照文件名、资源名和名称资源、标签选择器删除资源Deploy Commands:  rollout       管理资源推出  scale         为deployment、replicaset controller 设置新的大小  autoscale     自动缩放 Deployment 、replicaset 或 Replication ControllerCluster Management Commands:  certificate   修改证书资源  cluster-info  显示集群信息  top           显示资源（cpu/内存/储存）使用情况  cordon        警戒线将节点标记为不可调度  uncordon      将节点标记为可调度  drain         移除节点，准备维护；容器驱离  taint         更新一个或多个节点上污点Troubleshooting and Debugging Commands:  describe      显示特定资源或资源组的详细信息  logs          打印pod中容器的日志  attach        附加到正在运行的容器  exec          在容器中执行命令  port-forward  将一个或多个本地端口转发到一个pod  proxy         运行一个到Kubernetes Api 服务代理  cp            在容器之间复制文件和目录  auth          检查授权Advanced Commands:  diff          将要应用的版本的Diff实时版本  apply         按照文件名或者目录标准输入将配置应用到资源  patch         补丁修改，更新资源字段  replace       使用配置文件或stdin 来替换资源  wait          在一个或多个资源上等待一个条件（不常用）  convert       在不同的API版本之间转换配置文件  kustomize     从目录或远程url 构建 kustomization 目标Settings Commands:  label         更新资源上的标签  annotate      更新资源上的注释  completion    为指定的shell(bash OR zsh) 输出完全代码Other Commands:  alpha         Commands for features in alpha  api-resources 在服务器上打印支持的API资源  api-versions  在服务端上打印支持API版本，以‘组/版本’的形式  config        修改 Kubernetes 文件  plugin        提供与插件交互的使用程序  version       打印客户端与服务端的版本信息Usage:  kubectl [flags] [options]Use \"kubectl &lt;command&gt; --help\" for more information about a given command.Use \"kubectl options\" for a list of global command-line options (applies to all commands).node  在生产过程中会遇到服务资源不足情况，需要增加新的服务器对应用系统进行水平扩展以实现扩容，在Kubernetes 中加一个node 只需要在node 节点上安装 docker 、kubelet 、kube-proxy服务，给kubelet 和kube-proxy启动启动参数重master rul 指定 Kubernetes集群master 地址。kubelet 会自动注册机制，新的node 会自动加入到Kubernetes集群中# 查看所有nodes kubectl get nodekubectl delete node node-name # 删除nodekubectl replace -f node-name.yaml # 指定node 脱离调度范围kubectl patch node node-name -p '{\"spec\":\"{\"unschedulable\":\"true\"}\"}' # 恢复kubectl cordon node-name # 将 node-name 节点设置为不可调度模式kubectl drain node-name # 将当前运行的 node-name 节点上容器驱离kubectl uncordon node-name # 执行完维护后，将节点重新加入调度# label 可以将pod调度指定到 node（project=name）kubectl label node node-name rele=backend # 添加 label kubectl label node node-name rele- # 删除labelPod# -n 指定 namespaceskubectl run .... # 创建# 查询pod资源 尾部加上 `-w` 可以查看到创建podkubectl get pods --all-namespaces # or kubectl get pods -Akubectl get pods -n common # 指定 namespaces kubectl get pods,deployment,replicaset # deployment-控制器，replicaset-副本集kubectl expose -f ..*...yaml --port=8080 --target-port=8081 # 为资源暴露为新的Kubernetes servicekubectl get service ferry -n common # 查询服务暴露的端口 ;service 可以写成 svc kubectl get pod,svc -n common # 查询pod 和 service 端口和运行状态get pods -o wide -n common # 查询网络状态kubectl get pods  ferry-6cb8d5697c-tdbzc -o wide  -n common # 指定pod 查询kubectl get endpoints # 查询关联后的节点kubectl logs ferry-6cb8d5697c-tdbzc -n common | more # 查询日志 more-&gt; 可以分也查找kubectl logs -f ferry-6cb8d5697c-tdbzc --tail=10 -n common # 查看最后10条日志，-f 实时日志# 更新资源kubectl rollout history deployment/ferry -n common # 查看历史记录kubectl rollout undo deployment/ferry -n common  # 回滚到上次部署kubectl rollout undo deployment/ferry --to-revision=2 -n common # 回滚到指定版本kubectl rollout status -w deployment/ferry -n common # 查看是否会滚成功kubectl rollout restart deployment/ferry -n common # 轮替重启kubectl edit deployment/ferry -n common # 修改配置kubectl set image deployment/ferry -n common ferry=repo.qianz.com/indonesia/game/chess/ferry:master #  # 伸缩kubectl scale --replicas=2 deployment/ferry -n common # 伸缩到几个副本kubectl scale --current-replicas=2 --replicas=1 deployment/ferry -n common # 当前的一个副本修改成1个副本kubectl scale --replicas=3 -f ferry.yaml # 文件修改kubectl scale --replicas=5 rc/a rc/b rc/c # 多个控制# 删除kubectl delete -f ./pod.json                                              # 删除在 pod.json 中指定的类型和名称的 Podkubectl delete pod,service baz foo                                        # 删除名称为 \"baz\" 和 \"foo\" 的 Pod 和服务kubectl delete pods,services -l name=myLabel                              # 删除包含 name=myLabel 标签的 pods 和服务kubectl -n my-ns delete pod,svc --all                                     # 删除在 my-ns 名字空间中全部的 Pods 和服务# 删除所有与 pattern1 或 pattern2 awk 模式匹配的 Podskubectl get pods  -n mynamespace --no-headers=true | awk '/pattern1|pattern2/{print $1}' | xargs  kubectl delete -n mynamespace podconfigmapkubectl get configmap -n huoys # 指定namespaceskubectl get configmap -A # 全部kubectl get cm -n huoys # 缩写kubectl create configmap cc-cm -n common --from-literal=user.name=lcc --from-literal=user.id=1 # 使用from-literal创建 指定namespaceskubectl create configmap configmap-name --from-file=configmap*.yaml # 使用 from-file 创建 可以是文件和目录kubectl describe configmap hall-customize -n huoys | more # 查看配置kubectl delete configmap cc-cm -n common"
  },
  
  {
    "title": "Kubernetes UI",
    "url": "/blog.github.io/posts/kubernetesUI/",
    "categories": "SystemUtils",
    "tags": "Kubernetes",
    "date": "2021-03-17 17:45:54 +0800",
    





    "snippet": "kubernetes UIkubectl apply -f kuboard-v3.yaml访问http://172.13.8.15:30080/kuboard/settings/uikuboard-v3.yaml---apiVersion: v1kind: Namespacemetadata:  name: kuboard---apiVersion: v1kind: ConfigMapmetadata:  name: kuboard-v3-config  namespace: kuboarddata:  # 关于如下参数的解释，请参考文档 https://kuboard.cn/install/v3/install-built-in.html  # [common]  KUBOARD_SERVER_NODE_PORT: '30080'  KUBOARD_AGENT_SERVER_UDP_PORT: '30081'  KUBOARD_AGENT_SERVER_TCP_PORT: '30081'  KUBOARD_SERVER_LOGRUS_LEVEL: info  # error / debug / trace  # KUBOARD_AGENT_KEY 是 Agent 与 Kuboard 通信时的密钥，请修改为一个任意的包含字母、数字的32位字符串，此密钥变更后，需要删除 Kuboard Agent 重新导入。  KUBOARD_AGENT_KEY: 32b7d6572c6255211b4eec9009e4a816  KUBOARD_AGENT_IMAG: eipwork/kuboard-agent  KUBOARD_QUESTDB_IMAGE: questdb/questdb:6.0.4  # 关于如下参数的解释，请参考文档 https://kuboard.cn/install/v3/install-gitlab.html  # [gitlab login]  # KUBOARD_LOGIN_TYPE: \"gitlab\"  # KUBOARD_ROOT_USER: \"your-user-name-in-gitlab\"  # GITLAB_BASE_URL: \"http://gitlab.mycompany.com\"  # GITLAB_APPLICATION_ID: \"7c10882aa46810a0402d17c66103894ac5e43d6130b81c17f7f2d8ae182040b5\"  # GITLAB_CLIENT_SECRET: \"77c149bd3a4b6870bffa1a1afaf37cba28a1817f4cf518699065f5a8fe958889\"    # 关于如下参数的解释，请参考文档 https://kuboard.cn/install/v3/install-github.html  # [github login]  # KUBOARD_LOGIN_TYPE: \"github\"  # KUBOARD_ROOT_USER: \"your-user-name-in-github\"  # GITHUB_CLIENT_ID: \"17577d45e4de7dad88e0\"  # GITHUB_CLIENT_SECRET: \"ff738553a8c7e9ad39569c8d02c1d85ec19115a7\"  # 关于如下参数的解释，请参考文档 https://kuboard.cn/install/v3/install-ldap.html  # [ldap login]  # KUBOARD_LOGIN_TYPE: \"ldap\"  # KUBOARD_ROOT_USER: \"your-user-name-in-ldap\"  # LDAP_HOST: \"ldap-ip-address:389\"  # LDAP_BIND_DN: \"cn=admin,dc=example,dc=org\"  # LDAP_BIND_PASSWORD: \"admin\"  # LDAP_BASE_DN: \"dc=example,dc=org\"  # LDAP_FILTER: \"(objectClass=posixAccount)\"  # LDAP_ID_ATTRIBUTE: \"uid\"  # LDAP_USER_NAME_ATTRIBUTE: \"uid\"  # LDAP_EMAIL_ATTRIBUTE: \"mail\"  # LDAP_DISPLAY_NAME_ATTRIBUTE: \"cn\"  # LDAP_GROUP_SEARCH_BASE_DN: \"dc=example,dc=org\"  # LDAP_GROUP_SEARCH_FILTER: \"(objectClass=posixGroup)\"  # LDAP_USER_MACHER_USER_ATTRIBUTE: \"gidNumber\"  # LDAP_USER_MACHER_GROUP_ATTRIBUTE: \"gidNumber\"  # LDAP_GROUP_NAME_ATTRIBUTE: \"cn\"---apiVersion: v1kind: ServiceAccountmetadata:  name: kuboard-boostrap  namespace: kuboard---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  name: kuboard-boostrap-crbroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: cluster-adminsubjects:- kind: ServiceAccount  name: kuboard-boostrap  namespace: kuboard---apiVersion: apps/v1kind: DaemonSetmetadata:  labels:    k8s.kuboard.cn/name: kuboard-etcd  name: kuboard-etcd  namespace: kuboardspec:  revisionHistoryLimit: 10  selector:    matchLabels:      k8s.kuboard.cn/name: kuboard-etcd  template:    metadata:      labels:        k8s.kuboard.cn/name: kuboard-etcd    spec:      affinity:        nodeAffinity:          requiredDuringSchedulingIgnoredDuringExecution:            nodeSelectorTerms:              - matchExpressions:                  - key: node-role.kubernetes.io/master                    operator: Exists              - matchExpressions:                  - key: node-role.kubernetes.io/control-plane                    operator: Exists              - matchExpressions:                  - key: k8s.kuboard.cn/role                    operator: In                    values:                      - etcd      containers:        - env:            - name: HOSTNAME              valueFrom:                fieldRef:                  apiVersion: v1                  fieldPath: spec.nodeName            - name: HOSTIP              valueFrom:                fieldRef:                  apiVersion: v1                  fieldPath: status.hostIP          image: 'eipwork/etcd-host:3.4.16-1'          imagePullPolicy: Always          name: etcd          ports:            - containerPort: 2381              hostPort: 2381              name: server              protocol: TCP            - containerPort: 2382              hostPort: 2382              name: peer              protocol: TCP          livenessProbe:            failureThreshold: 3            httpGet:              path: /health              port: 2381              scheme: HTTP            initialDelaySeconds: 30            periodSeconds: 10            successThreshold: 1            timeoutSeconds: 1          volumeMounts:            - mountPath: /data              name: data      dnsPolicy: ClusterFirst      hostNetwork: true      restartPolicy: Always      serviceAccount: kuboard-boostrap      serviceAccountName: kuboard-boostrap      tolerations:        - key: node-role.kubernetes.io/master          operator: Exists        - key: node-role.kubernetes.io/control-plane          operator: Exists      volumes:        - hostPath:            path: /usr/share/kuboard/etcd          name: data  updateStrategy:    rollingUpdate:      maxUnavailable: 1    type: RollingUpdate---apiVersion: apps/v1kind: Deploymentmetadata:  annotations: {}  labels:    k8s.kuboard.cn/name: kuboard-v3  name: kuboard-v3  namespace: kuboardspec:  replicas: 1  revisionHistoryLimit: 10  selector:    matchLabels:      k8s.kuboard.cn/name: kuboard-v3  template:    metadata:      labels:        k8s.kuboard.cn/name: kuboard-v3    spec:      affinity:        nodeAffinity:          preferredDuringSchedulingIgnoredDuringExecution:            - preference:                matchExpressions:                  - key: node-role.kubernetes.io/master                    operator: Exists              weight: 100            - preference:                matchExpressions:                  - key: node-role.kubernetes.io/control-plane                    operator: Exists              weight: 100      containers:        - env:            - name: HOSTIP              valueFrom:                fieldRef:                  apiVersion: v1                  fieldPath: status.hostIP            - name: HOSTNAME              valueFrom:                fieldRef:                  apiVersion: v1                  fieldPath: spec.nodeName          envFrom:            - configMapRef:                name: kuboard-v3-config          image: 'eipwork/kuboard:v3'          imagePullPolicy: Always          livenessProbe:            failureThreshold: 3            httpGet:              path: /kuboard-resources/version.json              port: 80              scheme: HTTP            initialDelaySeconds: 30            periodSeconds: 10            successThreshold: 1            timeoutSeconds: 1          name: kuboard          ports:            - containerPort: 80              name: web              protocol: TCP            - containerPort: 443              name: https              protocol: TCP            - containerPort: 10081              name: peer              protocol: TCP            - containerPort: 10081              name: peer-u              protocol: UDP          readinessProbe:            failureThreshold: 3            httpGet:              path: /kuboard-resources/version.json              port: 80              scheme: HTTP            initialDelaySeconds: 30            periodSeconds: 10            successThreshold: 1            timeoutSeconds: 1          resources: {}          # startupProbe:          #   failureThreshold: 20          #   httpGet:          #     path: /kuboard-resources/version.json          #     port: 80          #     scheme: HTTP          #   initialDelaySeconds: 5          #   periodSeconds: 10          #   successThreshold: 1          #   timeoutSeconds: 1      dnsPolicy: ClusterFirst      restartPolicy: Always      serviceAccount: kuboard-boostrap      serviceAccountName: kuboard-boostrap      tolerations:        - key: node-role.kubernetes.io/master          operator: Exists---apiVersion: v1kind: Servicemetadata:  annotations: {}  labels:    k8s.kuboard.cn/name: kuboard-v3  name: kuboard-v3  namespace: kuboardspec:  ports:    - name: web      nodePort: 30080      port: 80      protocol: TCP      targetPort: 80    - name: tcp      nodePort: 30081      port: 10081      protocol: TCP      targetPort: 10081    - name: udp      nodePort: 30081      port: 10081      protocol: UDP      targetPort: 10081  selector:    k8s.kuboard.cn/name: kuboard-v3  sessionAffinity: None  type: NodePort"
  },
  
  {
    "title": "Kubernetes 部署",
    "url": "/blog.github.io/posts/base/",
    "categories": "SystemUtils",
    "tags": "Kubernetes",
    "date": "2021-03-17 16:43:33 +0800",
    





    "snippet": "Kubernetes 搭建      查看查询系统基本信息    uname -a #  查看版本当前操作系统内核信息cat /proc/version # 查看当前系统版本信息cat /etc/issue # 查看版本当前操作系统发行版本信息cat /etc/redhat-release # 查看版本当前操作系统发行版本信息cat /proc/cpuinfo  # OR lscpu 查看CPU相关信息，包括型号、主频、内核信息 getconf LONG_BIT # 看版本说明当前CPU运行在32bit模式下， 但不代表CPU不支持64bithostname # 查看服务器名称  # 查看网络信息 cat /etc/sysconfig/network-scripts/ifcfg-ens*cat /etc/sysconfig/network-scripts/ifcfg-loifconfig  lsblk # 查看磁盘信息 - 列出所有可用块设备的信息，而且还能显示他们之间的依赖关系，但是它不会列出RAM盘的信息fdisk -l # 观察硬盘实体使用情况，也可对硬盘分区df -k # df -k # 用于显示磁盘分区上的可使用的磁盘空  env # 查看环境变量iptables -L # 查看防火墙设置route -n # 查看路由表swapon -s # 查看所有交换分区w # 查看活动用户last # 查看用户登录信息      搭建前准备 （master/node）      关闭防火墙    systemctl stop firewalldsystemctl disable firewalldsystemctl status firewalld # 查看下状态            警用 Swp    vim /etc/fstab # 注释 swap 行swapoff -a             关闭 selinux    sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config # 永久关闭             修改主机名    hostnamectl set-hostname master # 永久生效 但需要重启hostnamectl set-hostname nodeOne # 永久生效 但需要重启hostnamectl set-hostname nodeTwo # 永久生效 但需要重启reboot # 重启            修改hosts    vim /etc/hosts      安装docker 20.10.1 （master/node）#!/bin/bashyum remove runc -yyum install container-selinux yum-utils ipvsadm -yrpm -ivh https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/containerd.io-1.4.3-3.1.el7.x86_64.rpm    yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum clean allyum makecacheyum install docker-ce docker-ce-cli -y mkdir -p /data/docker /data/kubelet  /etc/docker /data/kubelet/plugins/nasplugin.csi.alibabacloud.comtouch  /etc/docker/daemon.json cat &gt; /etc/docker/daemon.json &lt;&lt;EOF{    \"data-root\": \"/data/docker\",    \"registry-mirrors\": [        \"https://6mrynkvw.mirror.aliyuncs.com\"    ],    \"exec-opts\": [\"native.cgroupdriver=systemd\"],    \"log-driver\": \"json-file\",    \"log-opts\": {        \"max-size\": \"100m\"    },    \"storage-driver\": \"overlay2\",    \"storage-opts\": [        \"overlay2.override_kernel_check=true\"            ]    }EOFsystemctl enable docker &amp;&amp; systemctl start docker设置阿里云yum软件源 （master/node）cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF[k8s]name=k8senabled=1gpgcheck=0 baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/EOF安装 kubeadm、kubelet、kubectl （master/node） yum install -y kubelet-1.19.2 kubectl-1.19.2 kubeadm-1.19.2 systemctl enable kubeletkubernetes init （master） echo \"1\" &gt;/proc/sys/net/bridge/bridge-nf-call-iptables kubeadm init \\  --apiserver-advertise-address=172.13.8.15 \\  --image-repository registry.aliyuncs.com/google_containers \\  --kubernetes-version v1.19.2 \\  --service-cidr=10.1.0.0/16 \\  --pod-network-cidr=10.244.0.0/16成功信息[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster[bootstrap-token] Creating the \"cluster-info\" ConfigMap in the \"kube-public\" namespace[kubelet-finalize] Updating \"/etc/kubernetes/kubelet.conf\" to point to a rotatable kubelet client certificate and key[addons] Applied essential addon: CoreDNS[addons] Applied essential addon: kube-proxyYour Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user:  mkdir -p $HOME/.kube  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config  sudo chown $(id -u):$(id -g) $HOME/.kube/configYou should now deploy a pod network to the cluster.Run \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:  https://kubernetes.io/docs/concepts/cluster-administration/addons/Then you can join any number of worker nodes by running the following on each as root:kubeadm join 172.13.8.15:6443 --token etvpqx.urx0nmbm4w4wwmt9 \\    --discovery-token-ca-cert-hash sha256:744f6cd77ba585411ddde4a8ed181859c17643df0c90ba4ec7eb859b69875bcd 输入创建测试是否OK（master/node）\tscp admin.conf root@172.13.8.17:/etc/kubernetes\tscp admin.conf root@172.13.8.16:/etc/kubernetes  mkdir -p $HOME/.kube  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config  sudo chown $(id -u):$(id -g) $HOME/.kube/config    kubectl get nodes  # 测试安装网络插件kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml # 会提示报错，修改hosts# 追加hosts# 199.232.28.133 raw.githubusercontent.comnode 加入 master 集群中# 在成功init 成功之后输出的内容kubeadm join 172.13.8.15:6443 --token etvpqx.urx0nmbm4w4wwmt9 \\    --discovery-token-ca-cert-hash sha256:744f6cd77ba585411ddde4a8ed181859c17643df0c90ba4ec7eb859b69875bcd 后记      kubeadm init 之后没有来得及记录 join 信息    #再生成一个token即可kubeadm token create --print-join-command#下在的命令可以查看历史的tokenkubeadm token list            node join 失败后 重新join    #先执行kubeadm -y reset#再执行kubeadm join  xx.....            重启 kubelet    systemctl daemon-reloadsystemctl restart kubelet      维护      ROLES 为 none    kubectl label node nodeone node-role.kubernetes.io/worker=workerkubectl label node nodetwo node-role.kubernetes.io/worker=worker      Error      /proc/sys/net/bridge/bridge-nf-call-iptables contents are not set to 1    echo \"1\" &gt;/proc/sys/net/bridge/bridge-nf-call-iptables # 解决方法      插件yml      kube-flannel.yml    ---apiVersion: policy/v1beta1kind: PodSecurityPolicymetadata:  name: psp.flannel.unprivileged  annotations:    seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default    seccomp.security.alpha.kubernetes.io/defaultProfileName: docker/default    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/defaultspec:  privileged: false  volumes:  - configMap  - secret  - emptyDir  - hostPath  allowedHostPaths:  - pathPrefix: \"/etc/cni/net.d\"  - pathPrefix: \"/etc/kube-flannel\"  - pathPrefix: \"/run/flannel\"  readOnlyRootFilesystem: false  # Users and groups  runAsUser:    rule: RunAsAny  supplementalGroups:    rule: RunAsAny  fsGroup:    rule: RunAsAny  # Privilege Escalation  allowPrivilegeEscalation: false  defaultAllowPrivilegeEscalation: false  # Capabilities  allowedCapabilities: ['NET_ADMIN', 'NET_RAW']  defaultAddCapabilities: []  requiredDropCapabilities: []  # Host namespaces  hostPID: false  hostIPC: false  hostNetwork: true  hostPorts:  - min: 0    max: 65535  # SELinux  seLinux:    # SELinux is unused in CaaSP    rule: 'RunAsAny'---kind: ClusterRoleapiVersion: rbac.authorization.k8s.io/v1metadata:  name: flannelrules:- apiGroups: ['extensions']  resources: ['podsecuritypolicies']  verbs: ['use']  resourceNames: ['psp.flannel.unprivileged']- apiGroups:  - \"\"  resources:  - pods  verbs:  - get- apiGroups:  - \"\"  resources:  - nodes  verbs:  - list  - watch- apiGroups:  - \"\"  resources:  - nodes/status  verbs:  - patch---kind: ClusterRoleBindingapiVersion: rbac.authorization.k8s.io/v1metadata:  name: flannelroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: flannelsubjects:- kind: ServiceAccount  name: flannel  namespace: kube-system---apiVersion: v1kind: ServiceAccountmetadata:  name: flannel  namespace: kube-system---kind: ConfigMapapiVersion: v1metadata:  name: kube-flannel-cfg  namespace: kube-system  labels:    tier: node    app: flanneldata:  cni-conf.json: |    {      \"name\": \"cbr0\",      \"cniVersion\": \"0.3.1\",      \"plugins\": [        {          \"type\": \"flannel\",          \"delegate\": {            \"hairpinMode\": true,            \"isDefaultGateway\": true          }        },        {          \"type\": \"portmap\",          \"capabilities\": {            \"portMappings\": true          }        }      ]    }  net-conf.json: |    {      \"Network\": \"10.244.0.0/16\",      \"Backend\": {        \"Type\": \"vxlan\"      }    }---apiVersion: apps/v1kind: DaemonSetmetadata:  name: kube-flannel-ds  namespace: kube-system  labels:    tier: node    app: flannelspec:  selector:    matchLabels:      app: flannel  template:    metadata:      labels:        tier: node        app: flannel    spec:      affinity:        nodeAffinity:          requiredDuringSchedulingIgnoredDuringExecution:            nodeSelectorTerms:            - matchExpressions:              - key: kubernetes.io/os                operator: In                values:                - linux      hostNetwork: true      priorityClassName: system-node-critical      tolerations:      - operator: Exists        effect: NoSchedule      serviceAccountName: flannel      initContainers:      - name: install-cni-plugin        image: rancher/mirrored-flannelcni-flannel-cni-plugin:v1.0.0        command:        - cp        args:        - -f        - /flannel        - /opt/cni/bin/flannel        volumeMounts:        - name: cni-plugin          mountPath: /opt/cni/bin      - name: install-cni        image: quay.io/coreos/flannel:v0.15.1        command:        - cp        args:        - -f        - /etc/kube-flannel/cni-conf.json        - /etc/cni/net.d/10-flannel.conflist        volumeMounts:        - name: cni          mountPath: /etc/cni/net.d        - name: flannel-cfg          mountPath: /etc/kube-flannel/      containers:      - name: kube-flannel        image: quay.io/coreos/flannel:v0.15.1        command:        - /opt/bin/flanneld        args:        - --ip-masq        - --kube-subnet-mgr        resources:          requests:            cpu: \"100m\"            memory: \"50Mi\"          limits:            cpu: \"100m\"            memory: \"50Mi\"        securityContext:          privileged: false          capabilities:            add: [\"NET_ADMIN\", \"NET_RAW\"]        env:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: POD_NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        volumeMounts:        - name: run          mountPath: /run/flannel        - name: flannel-cfg          mountPath: /etc/kube-flannel/      volumes:      - name: run        hostPath:          path: /run/flannel      - name: cni-plugin        hostPath:          path: /opt/cni/bin      - name: cni        hostPath:          path: /etc/cni/net.d      - name: flannel-cfg        configMap:          name: kube-flannel-cfg      "
  },
  
  {
    "title": "Go 1.13 版本更新 摘要",
    "url": "/blog.github.io/posts/go-1.13/",
    "categories": "Server",
    "tags": "golang, GoAdvanced, GoUtils",
    "date": "2020-12-25 17:11:22 +0800",
    





    "snippet": "Go 1.13  工具链、运行时、标准库工具链  环境变量 Go111MODOULE 默认值 auto  增加了环境变量 GOPIVATE 私有变量"
  },
  
  {
    "title": "linux Shell Base",
    "url": "/blog.github.io/posts/base/",
    "categories": "SystemUtils",
    "tags": "Shell",
    "date": "2020-04-20 22:05:01 +0800",
    





    "snippet": "ShellGithubhelloworld  创建与写      touch helloworld.sh  vim helloworld.sh      #!/bin/bash  echo \"Hello World !\"      // #! 是个约定标记  // echo 向窗口输出文本        执行      chmod +x ./helloworld.sh  ./helloworld.sh  就可以看到控制台输出  Hello World !        Shell 变量    命名规则    命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。  中间不能有空格，可以使用下划线（_）。  不能使用标点符号。  不能使用bash里的关键字（可用help命令查看保留关键字）。操作  创建使用    #!/bin/bashuser_name=\"lcc\"age=23sex=\"男\"echo $user_nameecho $age# 建议使用${变量名}# 为了帮助解释器识别变量的边界:&lt;&lt;EOFecho \"I am good at ${skill}Script\"EOFecho ${sex}        只读```shell#!/bin/bashuser_name=”lcc”readonly user_nameuser_name=”Cc” echo ${user_name}结果会提示：lccscript.sh: line 4: user_name: readonly variable- 删除``` shell#!/bin/bashuser_name=\"lcc\"unset user_nameecho ${user_name}运行结果什么都不会输出，建议提示变量不存在  变量类型运行shell时，会同时存在三种变量：1) 局部变量 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。2) 环境变量 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。3) shell变量 shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行字符串单引号与双引号  单引号    #!/bin/bashname='C\\sadf@$@#!$@#@#!c\\'echo ${name}url='\"lichaoche's'ng.top\"'echo ${url}        运行结果C\\sadf@$@#!$@#@#!c\\\"lichaochesng.top\"        双引号    #!/bin/bashname='Cc'str=\"Hello, I know you are \\\"${name}\\\"! \\n\"echo  -e ${str}运行结果Hello, I know you are \"Cc\"!         区别          单引号                  单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的          单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用                    双引号                  双引号里可以有变量          双引号里可以出现转义字符            字符串操作                                拼接      #!/bin/bash  your_name=\"Cc\"  # 使用双引号拼接  greeting=\"hello, \"$your_name\" !\"  greeting_1=\"hello, ${your_name} !\"  echo $greeting  $greeting_1  # 使用单引号拼接  greeting_2='hello, '$your_name' !'  greeting_3='hello, ${your_name} !'  echo $greeting_2  $greeting_3        运行结果hello, Cc ! hello, Cc !hello, Cc ! hello, ${your_name} !        获取长度      #!/bin/bash  name=\"CcAndHyperAndLccAndChaoChengLi\"  echo ${#name} #输出 30  sex=\"Male\"  echo ${#sex}#输出4        提取字符串      #!/bin/bash  name=\"lcc\"  # 0 开始计算  echo ${name:0:2} #输出 lc  echo ${name:1:2} #输出cc  echo ${name::2} #输出 lc        查找字符串      #!/bin/bash  name=\"lcc shell\"  # 哪个字母先出现就计算哪个  echo `expr index \"${name}\" l`  #输出 1 ps:为什么查找从1开始计算  echo `expr index \"${name}\" e`  #输出 7              ps:是 ` 不是 ‘      数组  创建、查看、获取、修改、[二维数组….]      #!/bin/bash    # 数组没有逗号分隔    arrayName=(\"lcc\" \"Cc\" \"Hyper\" 10)    arrayAge=(    23    18    6    )    # 下面查看数组    echo ${arrayName[1]}\t #输出 Cc    echo ${arrayAge[1]}\t\t#输出 18    # 获取所有元素    echo ${arrayName[@]}\t#输出 lcc Cc Hyper 10     # 数组长度    length=${#arrayName[@]}    echo ${length}\t#输出 4    echo ${#arrayAge[*]}\t#输出 3    # 通过下标修改元素    arrayName[0]=\"yes\"    echo ${arrayName[@]}\t#yes Cc Hyper 10    #--------    # 二维数组    # https://www.jianshu.com/p/543fa9df3469    # https://www.cnblogs.com/wyf-349/p/11236939.html    #--------    传递参数  ```shell[root@iz2zeb00z6vr5gix5utl11z parameter]# cat demo1.sh #!/bin/bashecho “运行时参数传递”;echo “执行的文件名：$0”;echo “第一个参数为：$1”;echo “第二个参数为：$2”;echo “第三个参数为：$3”;echo “参数个数：$#”echo “传递的参数作为一个字符串显示：$*”echo “– $* 演示 —”for i in “$*”; doecho $idoneecho “– $@ 演示 —”for i in “$@”; doecho $idone```shell[root@iz2zeb00z6vr5gix5utl11z parameter]# ./demo1.sh lcc 23 M运行时参数传递执行的文件名：./demo1.sh第一个参数为：lcc第二个参数为：23第三个参数为：M参数个数：3传递的参数作为一个字符串显示：lcc 23 M-- $* 演示 ---lcc 23 M-- $@ 演示 ---lcc23M区别  #$* 与 $@ 区别：          相同点：都是引用所有参数。      不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。        运算符        operator        算术运算符                          代码 operator/t2.sh注意：                      乘号(*)前边必须加反斜杠()才能实现乘法运算；  if…then…fi 是条件语句，后续将会讲解。  在 MAC 中 shell 的 expr 语法是：$((表达式))，此处表达式中的 “*” 不需要转义符号 “\" 。    关系运算符              代码 operator/t3.sh      布尔运算符      代码 operator/t4.sh      逻辑运算符              代码 operator/t5.sh字符串运算符  代码 operator/t6.sh  文件检测运算符    代码 operator/t7.sh"
  },
  
  {
    "title": "系统设计（自动化权限）",
    "url": "/blog.github.io/posts/Jurisdiction/",
    "categories": "Server",
    "tags": "golang, GoAdvanced, GoWeb, GoUtils",
    "date": "2020-04-19 22:58:36 +0800",
    





    "snippet": "权限自动化权限  准备知识：swagger、递归、注解、过滤器设计  权限是每一个管理系统必备的一个功能，多租用户设计必备，虽然有很多集成框架工具包比如：“Casbin、GRABC”，但是其怎么判断其实原理都是一样的表结构说明  用户表和用户与角色中间表：无论是超级管理员添加的还是注册用户都会有一个角色初始权限。如果是超级管理员添加添加是可以指定那些角色，角色中有哪些权限，如果是App用户注册的有哪些权限注册时会初始化一个最初权限，可以通过开通会员，或者做任务升级拥有想应得角色。在此可能会产生一个用户多个角色，所以会有用户表与角色中间表来记录  资源表：可以使用swagger工具与注解，在启动是扫描所有接口并且通过递归解析swagger.json文件，初始化所有接口名称与接口url，插入表中  角色表：在程序初始化时需要，在表中初始默认角色，或者管理员用户添加角色时选择相应资源执行步骤  http 请求过滤器校验  获取token 其中用户唯一标识，以及用户http请求的url  通过用户唯一标识查询用户角色 ，获取用户角色唯一标识  通过角色唯一标识和url查询资源表是否有对应的资源(url)  如果有忽略，没有则返回，没有对应权限注解  在控制器接口以及路由文件中添加// Login 用户登录// @Tags 登录管理// @Summary 用户登录// @Param body body schema.LoginParam true \"请求参数\"// @Success 200 {object} schema.LoginTokenInfo// @Failure 400 {object} schema.HTTPError \"{error:{code:0,message:无效的请求参数}}\"// @Failure 500 {object} schema.HTTPError \"{error:{code:0,message:服务器错误}}\"// @Router /api/v1/pub/login [post]func (a *Login) Login(c *gin.Context) {}swagger      下载swagger  工具添加，Go 环境的bin 目录下        进入项目根目录 swag init 生成或者使用以下方式    go get -u github.com/swaggo/swag/cmd/swagswag init -g ./internal/app/routers/swagger.go -o ./docs/swaggerswag init -g ./internal/app/routers/swagger.go -o ./docs/swagger/            会生成docs目录 里面有    |-- docs.go|-- swagger.json|-- swagger.yaml      递归解析  需要在main 方法调用函数启动解析  递归解析代码如下 demopackage mainimport (\t\"encoding/json\"\t\"io/ioutil\"\t\"strings\"\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"\t\"github.com/Cc360428/HelpPackage/result\")func main() {    // 所在 swagger.json 路径\tGetFile(\"swagger.json\")}type Resource struct {\tName string `json:\"name\"` //名称\tUrl  string `json:\"url\"`  //路径}func SwaggerJson(swagger string) (a map[string]interface{}) {\txxx := make(map[string]interface{})\tbytes, err := ioutil.ReadFile(swagger)\tif err != nil {\t\tlogs.Error(err.Error())\t}\terr = json.Unmarshal(bytes, &amp;xxx)\tif err != nil {\t\tlogs.Error(\"error\", err.Error())\t}\tbirds := xxx[\"paths\"].(map[string]interface{})\t// logs.Info(\"返回 映射\", birds)\treturn birds}func GetOpId(vv interface{}) (ret interface{}) {\tdd := make(map[string]interface{})\t_ = result.HelperConvetInterface(vv, &amp;dd)\tfor kk, value := range dd {\t\tif kk == \"summary\" {\t\t\tret = value\t\t\treturn value\t\t} else {\t\t\tret = GetOpId(value)\t\t\tif ret != nil {\t\t\t\treturn ret\t\t\t}\t\t}\t}\treturn nil}func GetFile(path string) {\tbirds := SwaggerJson(path)\tvar pps []*Resource\tfor url, value := range birds {\t\tname := GetOpId(value)\t\tvar pp Resource\t\tpp.Url = url\t\t_ = result.HelperConvetInterface(name, &amp;pp.Name)\t\tpps = append(pps, &amp;pp)\t\tn := InterfaceTurnString(name)\t\t// 这里会根据自定义 符号分割\t\t// t := SplitUtil(n, \".\")\t\t_, _ = PowerAddOne(n, url)\t}}func PowerAddOne(name, url string) (id int64, err error) {\tlogs.Info(name, url)\treturn\t//保存到数据库}//字符串分割//第一个参数为要分割的字符串，第二个参数为分割的条件//返回分割后的数组func SplitUtil(parameter string, condition string) []string {\tstr := strings.Split(parameter, condition)\treturn str}//interface 转 stringfunc InterfaceTurnString(pr interface{}) string {\ts := pr.(string)\treturn s}"
  },
  
  {
    "title": "openWrt uci",
    "url": "/blog.github.io/posts/uci/",
    "categories": "SystemUtils",
    "tags": "openWrt",
    "date": "2020-04-18 14:33:04 +0800",
    





    "snippet": "  uci setroot@Accesshub:/etc/config# uci set qos.cc=interfaceroot@Accesshub:/etc/config# uci set qos.cc.classgroup=defaultroot@Accesshub:/etc/config# uci set qos.cc.enabled=1root@Accesshub:/etc/config# uci set qos.cc.upload=134root@Accesshub:/etc/config# uci set qos.cc.download=1000root@Accesshub:/etc/config# uci commit qosroot@Accesshub:/etc/config# grep -A 6 cc qosconfig interface 'cc'        option classgroup 'default'        option enabled '1'        option upload '134'        option download '1000'  uci addroot@Accesshub:/etc/config# uci add qos classifycfg118143root@Accesshub:/etc/config# uci set qos.@classify[3].target=\"Priority\"root@Accesshub:/etc/config# uci set qos.@classify[3].ports=\"22,23,80,333\"root@Accesshub:/etc/config# uci set qos.@classify[3].comment=\"ssh,frp,ftp,http,http(s),imap\"root@Accesshub:/etc/config# uci commit qosroot@Accesshub:/etc/config# grep -A 20 cc qosconfig interface 'cc'        option classgroup 'default'        option enabled '1'        option upload '134'        option download '1000'config classify        option target 'Priority'        option ports '22,23,80,333'        option comment 'ssh,frp,ftp,http,http(s),imap'uci show qosuci set qos.@default[2].proto=\"tcp\"uci set qos.@default[2].portrange=\"1024-65535\"uci commit qosconfig interface 'cc'        option classgroup 'default'        option enabled '1'        option upload '134'        option download '1000'config classify        option target 'Priority'        option ports '22,23,80,333'        option comment 'ssh,frp,ftp,http,http(s),imap'config default        option proto 'tcp'        option portrange '1024-65535'设置classgrouproot@Accesshub:/etc/config# uci set qos.CcClassGroup=classgrouproot@Accesshub:/etc/config# uci set qos.CcClassGroup.classes=\"Cc Priority Express Mormal Bulk\"root@Accesshub:/etc/config# uci set qos.CcClassGroup.default=\"Cc\"root@Accesshub:/etc/config# uci commit qosroot@Accesshub:/etc/config# grep -A 30 cc qosconfig interface 'cc'        option classgroup 'default'        option enabled '1'        option upload '134'        option download '1000'config classify        option target 'Priority'        option ports '22,23,80,333'        option comment 'ssh,frp,ftp,http,http(s),imap'config default        option proto 'tcp'        option portrange '1024-65535'config classgroup 'CcClassGroup'        option classes 'Cc Priority Express Mormal Bulk'        option default 'Cc'配置classroot@Accesshub:/etc/config# uci set qos.Cc=classroot@Accesshub:/etc/config# uci set qos.Cc.packetsize=\"1600\"root@Accesshub:/etc/config# uci set qos.Cc.packetdelay=\"160\"root@Accesshub:/etc/config# uci set qos.Cc.avgrate=\"16\"root@Accesshub:/etc/config# uci set qos.Cc.priority=\"6\"root@Accesshub:/etc/config# uci commit qosroot@Accesshub:/etc/config# grep -A 50 cc qosconfig interface 'cc'        option classgroup 'default'        option enabled '1'        option upload '134'        option download '1000'config classify        option target 'Priority'        option ports '22,23,80,333'        option comment 'ssh,frp,ftp,http,http(s),imap'config default        option proto 'tcp'        option portrange '1024-65535'config classgroup 'CcClassGroup'        option classes 'Cc Priority Express Mormal Bulk'        option default 'Cc'config class 'Cc'        option packetsize '1600'        option packetdelay '160'        option avgrate '16'        option priority '6'"
  },
  
  {
    "title": "Git 基本命令 ",
    "url": "/blog.github.io/posts/gitbase/",
    "categories": "System",
    "tags": "DevTools",
    "date": "2020-04-18 14:33:04 +0800",
    





    "snippet": "Git 工作用到的基本命令模拟环境  自己搭建了gogs 开源Git仓库注册账号地址      lcc、google        创建仓库Study        把lcc 添加管理协作者(收到邮件)  You have been added as a collaborator of repository: google/StudyView it on Gogs.拉取仓库代码git clone git clone http://git.lichaocheng.top/google/Study.gitgit pullmkdir Studycd Studygit initgit remote add origin http://git.lichaocheng.top/google/Study.gitgit pull origin master;提交文件（代码）  add 后面跟着 .就是当前下所有文件  push 跟着 仓库地址 ，master 是仓库分支  ，其中 origin 是别名在当前目录 .git 下 config  在commit 时 git commit -m \"Title\" -m \"Description ..........\";git add .git commit -m \"提交备注\";git push origin master;查看状态（status）git statusgit status -s // 查看修改的文件摘要  查看修改未 push 文件  查看创建未add  文件查看修改缓存状态git diffgit diff --cached [file]\t// 查看以缓存的改的git diff HEAD [file]\t\t// 查看以缓存与缓存的改的,默认全部 file 可以指定文件git diff --stat [file]\t\t// 查看缓存状态摘要,默认全部 file 可以指定文件取消以缓存内容  git reset HEAD  [reset.txt] git status -sM  READMEM  hello.php$ git reset HEAD hello.php Unstaged changes after reset:M    hello.go$ git status -sM  README M hello.go  你只需git commit  操作只会对README文件的改动提交强制回退git statusgit reset --hard b99df44a36afb2f768c56bd714bbd28789ffc252// 提示信息 HEAD is now at b99df44 Initial commitgit push -f -u origin分支管理git branch [name]\t\t\t// 创建分支git checkout [name]\t\t\t// 切换分支git push origin [dev]\t\t// 提交该分支列出分支  当前所在分支$ git branch  dev2* dev  master代码冲突  新建分支  然后合并分支  推荐使用开发工具 （idea）查看提交日志git loggit log [file]"
  },
  
  {
    "title": "MySQL 忘记密码",
    "url": "/blog.github.io/posts/mysqlupdatepassword/",
    "categories": "SystemUtils",
    "tags": "Mysql",
    "date": "2020-04-18 12:21:48 +0800",
    





    "snippet": "MySQL 忘记密码  注：vim 修改文件 i  保存退出 :wq ， 不修改退出 :q!关闭服务[root@Cc ~]# ps -ef |grep mysqlroot      3658  8508  0 12:47 pts/1    00:00:00 grep --color=auto mysqlmysql    20039     1  0 12:39 ?        00:00:00 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid[root@Cc ~]# service mysqld stopRedirecting to /bin/systemctl stop mysqld.service[root@Cc ~]# 修改配置文件  在配置文件中添加skip-grant-tables[root@Cc ~]# vim /etc/my.cnf.....# sort_buffer_size = 2M# read_rnd_buffer_size = 2Mdatadir=/var/lib/mysqlsocket=/var/lib/mysql/mysql.sockskip-grant-tables[client]default-character-set=utf8...:wq重启服务[root@Cc ~]# service mysqld startRedirecting to /bin/systemctl start mysqld.service[root@Cc ~]# 进入mysql  输入mysql -u root -p 直接Enter、Enter[root@Cc ~]# mysql -u root -pEnter password: Welcome to the MySQL monitor.  Commands end with ; or \\g.Your MySQL connection id is 2Server version: 5.7.29 MySQL Community Server (GPL)Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.mysql&gt; use mysqlReading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; update mysql.user set authentication_string=password('password') where user='root';Query OK, 1 row affected, 1 warning (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 1mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; exitBye进入数据库 修改表update mysql.user set authentication_string=password('这里是填写mysql密码') where user='root';删除修改的配置文件  skip-grant-tables[root@Cc ~]# vim /etc/my.cnf...# read_rnd_buffer_size = 2Mdatadir=/var/lib/mysqlsocket=/var/lib/mysql/mysql.sock#skip-grant-tables[client]default-character-set=utf8...:wq重启mysqld 服务[root@Cc ~]# service mysqld restart出现错误确认问题  重启服务还是没有用  确认过update 语句也执行过了（检查 执行sql 语句看下执行结果，影响行数）  确认输入的 mysql -u root -p 之后输入的密码是否是自己update的密码查看 user表  下面默认值是 N 使用  update 语句设置为Y ，个人使用 navicat  工具改的，是把密码去掉然后再用给你工具改mysql&gt; select * from user where user =\"root\"\\G;*************************** 1. row ***************************                  Host: localhost                  User: root           Select_priv: Y           Insert_priv: Y           Update_priv: Y           Delete_priv: Y           Create_priv: Y             Drop_priv: Y           Reload_priv: Y         Shutdown_priv: Y          Process_priv: Y             File_priv: Y            Grant_priv: Y       References_priv: Y            Index_priv: Y            Alter_priv: Y          Show_db_priv: Y            Super_priv: Y Create_tmp_table_priv: Y      Lock_tables_priv: Y          Execute_priv: Y       Repl_slave_priv: Y      Repl_client_priv: Y      Create_view_priv: Y        Show_view_priv: Y   Create_routine_priv: Y    Alter_routine_priv: Y      Create_user_priv: Y            Event_priv: Y          Trigger_priv: YCreate_tablespace_priv: Y              ssl_type:             ssl_cipher:            x509_issuer:           x509_subject:          max_questions: 0           max_updates: 0       max_connections: 0  max_user_connections: 0                plugin: mysql_native_password authentication_string: *A021A79F3EE5D774BF4197B804D3FDAAE6511167      password_expired: N password_last_changed: 2020-04-18 13:15:34     password_lifetime: NULL        account_locked: N1 row in set (0.00 sec)ERROR: No query specifiedmysql&gt; 修改成功[root@Cc filebrowser]# mysql -u root -pEnter password: Welcome to the MySQL monitor.  Commands end with ; or \\g.Your MySQL connection id is 105Server version: 5.7.29 MySQL Community Server (GPL)Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.mysql&gt; 登陆成功  也可以使用其他方式更改密码"
  },
  
  {
    "title": "frp 内网穿透",
    "url": "/blog.github.io/posts/frp/",
    "categories": "SystemUtils",
    "tags": "frp",
    "date": "2020-03-23 13:32:25 +0800",
    





    "snippet": "frp 内网穿透环境准备  Linux环境  Windows环境  Linux 云服务 开启需要端口  Windows    配置文件    *s.ini 是服务端配置文件  *c.ini 是客服端配置文件    frps.ini（linux）    目录结构    ```shell[root@k8s-master linux]# ll总用量 11096-rwxrwxr-x 1 admin admin 11333632 1月   6 16:02 frps-rw-rw-r– 1 admin admin     2518 1月  17 18:41 frps.ini-rw-rw—- 1 root  root      2377 1月  17 18:36 frps.log-rw-rw-r– 1 admin admin    11358 1月   6 16:04 LICENSEdrwxrwxr-x 2 admin admin     4096 1月   6 16:04 systemd[root@k8s-master linux]#  ##### 修改内容```shell[common]# binde_addr是指定frp内网穿透服务器端监听的IP地址,默认为127.0.0.1，#如果使用IPv6地址的话，必须用方括号包括起来，比如 “[::1]:80”, “[ipv6-host]:http” or “[ipv6-host%zone]:80”bind_addr = 0.0.0.0# bind_port 是frp内网穿透服务器端监听的端口，默认是7000bind_port = 7000#frp内网穿透服务器可以支持虚拟主机的http和https协议，一般我们都用80，#可以直接用域名而不用增加端口号，如果使用其它端口，那么客户端也需要配置相同的其他端口。vhost_http_port = 8380vhost_https_port = 443dashboard_user = admin  #管理面板账号dashboard_pwd = lichaocheng   #管理面板密码# 这个是frp内网穿透服务器的web界面的端口，可以通过http://你的ip:7500查看frp内网穿透服务器端的连接情况，和各个frp内网穿透客户端的连接情况。dashboard_port = 7500auth_token = 123# 方括号内的ssh是代理名称，在同一个frp穿透服务器下的代理名称不能重复，否则不能启动。# bind_addr是frp客户端内网的ip，也可以是客户端内网同一局域网下的其他IP[ssh]##### type = tcpbind_addr = 0.0.0.0listen_port = 6000[web01]#http类型的内网穿透，必须设置vhost_http_port，并且所有的http类型的客户端都将通过同一个vhost_http_port访问。type = http# custom_domains是通过frp服务器端访问客户端的域名，必须输入完整的域名，# 并且不能是subdomain_host的子域名，否则frp服务不能启动，并且相应的域名需要解析到frp服务器端的公网IP并等待解析生效后，才可以使用。custom_domains = zhishi.com运行方式./frps -c frps.inifrpc.ini（Windows）目录结构Administrator@DESKTOP-DHQ6SHN MINGW64 ~/Desktop/fsdownload/frp_windows_amd64/frp_0.29.1_windows_amd64$ lltotal 21230-rwxr-xr-x 1 Administrator 197121 10482688 11月  2 21:22 frpc.exe*-rw-r--r-- 1 Administrator 197121      126 11月  2 21:25 frpc.ini-rw-r--r-- 1 Administrator 197121     7042 11月  2 21:25 frpc_full.ini-rwxr-xr-x 1 Administrator 197121 11220480 11月  2 21:23 frps.exe*-rw-r--r-- 1 Administrator 197121       26 11月  2 21:25 frps.ini-rw-r--r-- 1 Administrator 197121     2365 11月  2 21:25 frps_full.ini-rw-r--r-- 1 Administrator 197121    11358 11月  2 21:25 LICENSEdrwxr-xr-x 1 Administrator 197121        0 11月  2 21:25 systemd/Administrator@DESKTOP-DHQ6SHN MINGW64 ~/Desktop/fsdownload/frp_windows_amd64/frp_0.29.1_windows_amd64修改内容[common]server_addr = 60.205.176.110server_port = 7000auth_token = 123[ssh]type = tcplocal_ip = 127.0.0.1local_port = 22remote_port = 6000[web01]#http类型的内网穿透，必须设置vhost_http_port，#并且所有的http类型的客户端都将通过同一个vhost_http_port访问。type = httplocal_ip = 127.0.0.1local_port = 8380custom_domains = web.zhishi.com运行方式./frpc.exe -c frpc.ininginx 代理域名映射server{    listen 80;    server_name frp.lichaocheng.top;    location / {        proxy_pass http://0.0.0.0:9000;    }}"
  },
  
  {
    "title": "Kubernetes概述",
    "url": "/blog.github.io/posts/k8sBase/",
    "categories": "SystemUtils",
    "tags": "Kubernetes",
    "date": "2020-03-22 22:00:00 +0800",
    





    "snippet": "什么是Kubernetes  为什叫k8sK~s 中间有8个字符，8代替了ubernete    参考文档Kubernetes 你能做什么  快速部署应用  快速扩展应用  无缝对接新的应用功能  节省资源，优化硬件资源的使用    Kubernetes 特点    可移植: 支持公有云，私有云，混合云，多重云（multi-cloud）  可扩展: 模块化, 插件化, 可挂载, 可组合  自动化: 自动部署，自动重启，自动复制，自动伸缩/扩展"
  },
  
  {
    "title": "Dockers 安装 Mysql",
    "url": "/blog.github.io/posts/%E5%AE%89%E8%A3%85mysql/",
    "categories": "SystemUtils",
    "tags": "Docker",
    "date": "2020-03-16 22:28:54 +0800",
    





    "snippet": "前期工作安装dockerdocker version[root@test ~]# docker versionClient: Docker Engine - Community Version:           19.03.5 API version:       1.40 Go version:        go1.12.12 Git commit:        633a0ea Built:             Wed Nov 13 07:25:41 2019 OS/Arch:           linux/amd64 Experimental:      falseServer: Docker Engine - Community Engine:  Version:          19.03.5  API version:      1.40 (minimum version 1.12)  Go version:       go1.12.12  Git commit:       633a0ea  Built:            Wed Nov 13 07:24:18 2019  OS/Arch:          linux/amd64  Experimental:     false containerd:  Version:          1.2.10  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339 runc:  Version:          1.0.0-rc8+dev  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657 docker-init:  Version:          0.18.0  GitCommit:        fec3683docker 国内镜像设置vim /etc/docker/daemon.json{\"registry-mirrors\": [\"https://kfwkfulq.mirror.aliyuncs.com\",\"https://2lqq34jg.mirror.aliyuncs.com\",\"https://pee6w651.mirror.aliyuncs.com\",\"https://registry.docker-cn.com\",\"http://hub-mirror.c.163.com\"],\"dns\": [\"8.8.8.8\",\"8.8.4.4\"]}#重启docker服务systemctl restart dockerdocker 安装mysql 5.7docker pull mysql:5.7查看镜像docker images运行docker 镜像docker run --name mysql -e MYSQL_ROOT_PASSWORD=lgr123456 -d -i -p 3306:3306 --restart=always  mysql:5.7以上参数说明  name mysql  将容器命名为mysql，后面可以用这个name进行容器的启动暂停等操作  e MYSQL_ROOT_PASSWORD=123456 设置MySQL密码为123456  d 此容器在后台运行,并且返回容器的ID  i 以交互模式运行容器  p 进行端口映射，格式为主机(宿主)端口:容器端口  restart=always 当docker重启时，该容器自动重启连接测试进入docker 中mysqldocker exec -ti mysql bashmysql [root@test ~]# docker exec -ti mysql bashroot@d5806ebc7793:/# mysql -uroot -pEnter password: Welcome to the MySQL monitor.  Commands end with ; or \\g.Your MySQL connection id is 2Server version: 5.7.29 MySQL Community Server (GPL)Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema || sys                |+--------------------+4 rows in set (0.00 sec)mysql&gt; "
  },
  
  {
    "title": "docker 部署 Go Web 程序",
    "url": "/blog.github.io/posts/docker-%E9%83%A8%E7%BD%B2web-%E9%A1%B9%E7%9B%AE/",
    "categories": "SystemUtils",
    "tags": "Docker, Golang, GoWeb",
    "date": "2020-03-16 22:28:54 +0800",
    





    "snippet": "docker 部署 Go Web 程序http[root@Cc dockerFile]# tree.├── Dockerfile├── go.mod└── main.go[root@Cc dockerFile]# cat DockerfileFROM golang:alpine# 为我们的镜像设置必要的环境变量ENV GO111MODULE=on \\    CGO_ENABLED=0 \\    GOOS=linux \\    GOARCH=amd64# 移动到工作目录：/buildWORKDIR /build# 将代码复制到容器中COPY . .# 将我们的代码编译成二进制可执行文件appRUN go build -o app .# 移动到用于存放生成的二进制文件的 /dist 目录WORKDIR /dist# 将二进制文件从 /build 目录复制到这里RUN cp /build/app .# 声明服务端口EXPOSE 8888# 启动容器时运行的命令CMD [\"/dist/app\"]"
  },
  
  {
    "title": "Nginx配置",
    "url": "/blog.github.io/posts/Nginx%E9%85%8D%E7%BD%AE/",
    "categories": "SystemUtils",
    "tags": "Nginx",
    "date": "2020-03-11 22:23:04 +0800",
    





    "snippet": "配置httpsserver {    listen 443 ssl;  # 1.1版本后这样写    server_name lichaocheng.top; #填写绑定证书的域名    ssl_certificate  /opt/lichaocheng.top/lichaocheng.top/sll/lichaocheng.top.pem;  # 指定证书的位置，绝对路径    ssl_certificate_key /opt/lichaocheng.top/lichaocheng.top/sll/lichaocheng.top.key;  # 绝对路径，同上    ssl_session_timeout 5m;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置    ssl_prefer_server_ciphers on;    location / {        root   /opt/lichaocheng.top/lichaocheng.top; #站点目录，绝对路径        index  index.html index.htm;    }}server {    listen 443 ssl;  # 1.1版本后这样写    server_name hr.lichaocheng.top; #填写绑定证书的域名    ssl_certificate  /opt/client/hrclient/office/sll/hr.lichaocheng.top.pem;    ssl_certificate_key  /opt/client/hrclient/office/sll/hr.lichaocheng.top.key;    ssl_session_timeout 5m;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置    ssl_prefer_server_ciphers on;    location / {        root   /opt/client/hrclient/office/office; #站点目录，绝对路径        index  index.html index.htm;    }}配置httpserver{        listen 80;        server_name www.lichaocheng.top;        location / {                root /opt/gopath/src/Cc360428/lichaocheng.top;                index index.html index.htm;                #proxy_pass http://127.0.0.1:80;        }}http 强制httpsserver{    listen 80;    server_name  lichaocheng.top;    rewrite ^(.*)$   https://$host$1 permanent;}https 转发内部接口/opt/gopath/src/GolangCodeFile/hrBeegoServer/confserver{    listen 443 ssl ;    server_name hrapi.lichaocheng.top;    ssl_certificate  /opt/gopath/src/GolangCodeFile/hrBeegoServer/conf/hrapi.lichaocheng.top.pem;    ssl_certificate_key  /opt/gopath/src/GolangCodeFile/hrBeegoServer/conf/hrapi.lichaocheng.top.key;    ssl_session_timeout  5m;    ssl_ciphers  HIGH:!aNULL:!MD5;    ssl_prefer_server_ciphers  on;        location / {                proxy_pass http://0.0.0.0:18080;        }}server{    listen 443 ssl ;    server_name meserver.lichaocheng.top;    ssl_certificate  /opt/lichaocheng.top/lichaocheng.top.server/conf/meserver.lichaocheng.top.pem;    ssl_certificate_key  /opt/lichaocheng.top/lichaocheng.top.server/conf/meserver.lichaocheng.top.key;    ssl_session_timeout  5m;    ssl_ciphers  HIGH:!aNULL:!MD5;    ssl_prefer_server_ciphers  on;        location / {                proxy_pass http://0.0.0.0:8180;        }}httpsserver {    listen 443 ssl;  # 1.1版本后这样写    server_name blog.lichaocheng.top; #填写绑定证书的域名    ssl_certificate \"/opt/client/bogl.lichaocheng.top/sll/blog.lichaocheng.top.csr\";    ssl_certificate_key \"/opt/client/bogl.lichaocheng.top/sll/blog.lichaocheng.top.key\";    #ssl_session_timeout 5m;    #ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;    #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    #ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;    #ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;    #ssl_prefer_server_ciphers on;    location / {        root  /opt/client/bogl.lichaocheng.top/public;         index  index.html index.htm;    }}server {        listen 443;    server_name blog.lichaocheng.top; #填写绑定证书的域名    ssl on;    ssl_certificate /opt/client/bogl.lichaocheng.top/sll/blog.lichaocheng.top.crt;#填写你的证书所在的位置    ssl_certificate_key /opt/client/bogl.lichaocheng.top/sll/blog.lichaocheng.top.key;#填写你的key所在的位置    ssl_session_timeout 5m;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置    ssl_prefer_server_ciphers on;   location / {    root  /opt/client/bogl.lichaocheng.top/public;     index  index.html index.htm;   }}http 转发内部接口server{    listen 80;    server_name frp.lichaocheng.top;    location / {        proxy_pass http://0.0.0.0:9000;    }}端口映射stream {    server {        listen 8836;        proxy_pass localhost:3306;    }}"
  },
  
  {
    "title": "Nginx 安装",
    "url": "/blog.github.io/posts/Nginx%E5%AE%89%E8%A3%85/",
    "categories": "SystemUtils",
    "tags": "Nginx",
    "date": "2020-03-11 22:23:04 +0800",
    





    "snippet": "linux 命令安装1.添加Nginx到YUM源添加CentOS 7 Nginx yum资源库,打开终端,使用以下命令:sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm2.安装Nginx在你的CentOS 7 服务器中使用yum命令从Nginx源服务器中获取来安装Nginx：sudo yum install -y nginxNginx将完成安装在你的CentOS 7 服务器中。3.启动Nginx刚安装的Nginx不会自行启动。运行Nginx:sudo systemctl start nginx.service配置CentOS 7 开机启动Nginxsudo systemctl enable nginx.service更多systemctl命令可查看《systemctl命令用法》Nginx配置信息网站文件存放默认目录`/usr/share/nginx/html`网站默认站点配置`/etc/nginx/conf.d/default.conf`自定义Nginx站点配置文件存放目录`/etc/nginx/conf.d/`Nginx全局配置`/etc/nginx/nginx.conf`Nginx启动`nginx -c nginx.conf`在这里你可以改变设置用户运行Nginx守护程序进程一样,和工作进程的数量得到了`Nginx`正在运行,等等。Linux查看公网IP您可以运行以下命令来显示你的服务器的公共IP地址:`ip addr show eth0 | grep inet | awk '{ print $2; }' | sed 's/\\/.*$//'`基本命令重载配置nginx -s reloadsudo /etc/init.d/nginx {start|restart|stop}基本命令nginx -s    [***]            stop：快速关闭            quit：安全关闭            reload：重载配置文件            reopen：重新打开一个log文件，用于日志切割"
  },
  
  {
    "title": "golang 包管理",
    "url": "/blog.github.io/posts/golang-package/",
    "categories": "Server",
    "tags": "Golang, GoUtils",
    "date": "2020-03-11 16:19:11 +0800",
    





    "snippet": "godep安装go get -u -v github.com/tools/godep使用      参考1    参考2  goverdor（go1.12下 推荐使用）安装go get -u github.com/kardianos/govendor基本使用  进入项目目录```gogovendor initgovendor fetch github.com/Cc360428/HelpPackage/UtilsHelpcat vendor/vendor.json{        “comment”: “”,        “ignore”: “test”,        “package”: [                {                        “checksumSHA1”: “vT6zp7A2xIrOTza5mYU7ZR4it1c=”,                        “path”: “github.com/Cc360428/HelpPackage”,                        “revision”: “8c482c1a5d4c81ee28409d5efcc557b3fa1b89c2”,                        “revisionTime”: “2020-03-05T05:01:58Z”                },                {                        “path”: “github.com/Cc360428/HelpPackage/UtilsHelp”,                        “revision”: “”                }        ],        “rootPath”: “Cc360428/cloud”}### 更多使用&gt; govendor --help1. 依赖更新2. 移除依赖3. 查看依赖4. 依赖丢失### 缺点&gt; 必须在gopath 目录下使用## go mod&gt; 注：golang 版本升级到 1.11(建议1.12)### 设置&gt; 注： GO111MODULE 有三个值（off、on、auto）#### windows```go setx GO111MODULE on setx GOPROXY https://goproxy.iolinuxexport GO111MODULE=onexport GOPROXY=https://goproxy.io使用  进入项目根目录下  初始化go mod init [mod 名字]  拉取缺少模块go mod tidy  下载依赖包go mod download  编辑go.modgo mod edit  打印模块依赖图go mod graph  将依赖复制到vendorvendor  验证依赖是否正确verify  解释为什么需要依赖whygo mod help$ go help modGo mod provides access to operations on modules.Note that support for modules is built into all the go commands,not just 'go mod'. For example, day-to-day adding, removing, upgrading,and downgrading of dependencies should be done using 'go get'.See 'go help modules' for an overview of module functionality.Usage:        go mod &lt;command&gt; [arguments]The commands are:        download    download modules to local cache        edit        edit go.mod from tools or scripts        graph       print module requirement graph        init        initialize new module in current directory        tidy        add missing and remove unused modules        vendor      make vendored copy of dependencies        verify      verify dependencies have expected content        why         explain why packages or modules are neededUse \"go help mod &lt;command&gt;\" for more information about a command."
  },
  
  {
    "title": "Golang Mysql Gorm",
    "url": "/blog.github.io/posts/gorm/",
    "categories": "Server",
    "tags": "ORM, golang",
    "date": "2020-03-05 16:02:24 +0800",
    





    "snippet": "Gorm 概述官网gorm 对数据库的操作环境搭建下载依赖go get -u github.com/jinzhu/gorm实例（连接）package mainimport (\t\"fmt\"\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\" // logs\t\"github.com/jinzhu/gorm\"                         // gorm\t_ \"github.com/jinzhu/gorm/dialects/mysql\"        // 导入初始化包)type Product struct {  gorm.Model  Code string  Price uint}func main() {\tdb, err := gorm.Open(Databases.Type, // 连接属性 （mysql）\t\tfmt.Sprintf(\"%s:%s@tcp(%s)/%s?charset=utf8&amp;parseTime=True&amp;loc=Local\",\t\t\tDatabases.User,     // 用户名\t\t\tDatabases.Password, // 密码\t\t\tDatabases.Host,     // 端口号\t\t\tDatabases.Name)) // 数据库名字\tif err != nil {\t\tlogs.Error(\"mysql 连接错误！\", err.Error())\t}\t defer db.Close()  // Migrate the schema  db.AutoMigrate(&amp;Product{})  // 创建  db.Create(&amp;Product{Code: \"L1212\", Price: 1000})  // 读取  var product Product  db.First(&amp;product, 1) // 查询id为1的product  db.First(&amp;product, \"code = ?\", \"L1212\") // 查询code为l1212的product  // 更新 - 更新product的price为2000  db.Model(&amp;product).Update(\"Price\", 2000)  // 删除 - 删除product  db.Delete(&amp;product)}模型定义 structStruct 标记            标记      实义                  column      指定列名              type      ~~数据类型              size      ~~大小，默认255              primary_key      ~~主键              unique      ~~唯一              default      ~~默认值              precision      ~~精度              not null      ~~非空              auto_increment      ~~自增类型              index      创建索引              unique_index      ~~唯一索引              embedde      将结构体设置为嵌入              embedde_prefix      设置嵌入结构的前缀              -      忽略此字段      User struct Testtype User struct{    gorm.Model //  自增id 添加时间 修改时间 软删除时间    Name string `gorm:\"type:varchar(100);unique_index\"` // 类型 varchar 唯一索引    Address string `gorm:\"size(22)\"`// 设置大小    Image string `gorm:\"unique;not null\"` // 唯一 且不为空    Age int `gorm:\"index:age\"` // 给age字段创建age索引    Demo string `gorm:\"-\"` // 忽略该字段    Test int `gorm:\"auto_increment\"`  // 设置自增    }"
  },
  
  {
    "title": "Go 类型转换",
    "url": "/blog.github.io/posts/variableAndArray/",
    "categories": "Server",
    "tags": "golang, GoAdvanced, GoUtils",
    "date": "2020-01-16 22:58:36 +0800",
    





    "snippet": "go类型转换string int int64package mainimport (\t\"fmt\"\t\"strconv\")func main() {\tvar str string\tfmt.Printf(\"str type:%T\\n\", str)\tstr = \"123\"\tvar strInt int\t// string &gt; int\tstrInt, _ = strconv.Atoi(str)\tfmt.Println(str, strInt)\tvar strInt64 int64\t// string &gt; int64\tstrInt64, _ = strconv.ParseInt(str, 10, 64)\tfmt.Println(strInt64)\tvar intStr int\tintStr = 100\t// int &gt; string\tintToString := strconv.Itoa(intStr)\tfmt.Println(intToString)\t// int64 &gt; string\tint64ToStr := strconv.FormatInt(strInt64, 10)\tfmt.Println(int64ToStr)}整形互转  整形之间互转 int64(int) 需要转什么类型就括号外面什么类型package mainimport \"fmt\"func main() {\tvar int1 int\tint1 = 21\tvar int2 int64\t// int &gt; int64\tint2 = int64(int1)\tfmt.Println(int2)\tvar inta int64\tinta = 10\tvar intb int\t// int64 &gt; int64\tintb = int(inta)\tfmt.Println(intb)\tu := uint32(int1)\tfmt.Println(u)}bool To stringpackage mainimport (\t\"fmt\"\t\"strconv\")func main() {\tvar b bool\tformatBool := strconv.FormatBool(b)\tfmt.Println(formatBool)}fmt.Sprintf To string  参考链接package mainimport \"fmt\"func main() {\tvar byteType byte\tvar str string\tstr = fmt.Sprintf(\"整型 %d 浮点 %f byte %c %s\", 1, 3.14, byteType, \"字符串拼接\")\tfmt.Println(str)}"
  },
  
  {
    "title": "Golang基础问题",
    "url": "/blog.github.io/posts/baseall/",
    "categories": "Server",
    "tags": "golang, GoAdvanced, GoUtils",
    "date": "2020-01-16 22:58:36 +0800",
    





    "snippet": "Golang基础问题内置标识符  const                  iotaiota是一个预定义的标识符，代表顺序按行增加的无符号整数，每个const声明单元（被括号括起来）相互独立，分别从0开始。        // 常量const (    ResponseCodeOk       = iota        // 0    AddIota              = 12          // 12    Add                  = iota        // 2    ResponseCodeError                  // 3    _                                  // 忽略    ResponseCodeOther                  // 5    HttpResponse404      = \"404\"       // 404    Test                               // 404    HttpResponse404Error = \"not found\" // not found)    const (    //8421 (15)    /**    &lt;&lt; 转二进制 向左移动一位     */    WE = 2 &lt;&lt; iota // 0010 --2    SS             // 0100 4    WW             // 1000 8    QQ             // 0001 0000 16    AA             // 0010 0000 32    /**    00010000    QQ 转换：(2^0*0)+(2^1*0)+(2^2*0)+(2^3*0)+(2^4*1)+(2^5*0)+(2^0*0)=16        2^4*1 = 16     */)                          Type必须是指针、通道、函数、接口、映射或切片        type error        func new内建函数new分配内存。其第一个实参为类型，而非值。其返回值为指向该类型的新分配的零值的指针    type user struct {Name string}  func main() {    u := new(user)    u.Name = \"Cc\"    fmt.Println(u)}            func make内建函数make分配并初始化一个类型为切片、映射、或通道的对象。其第一个实参为类型，而非值。make的返回类型与其参数相同，而非指向它的指针。其具体结果取决于具体的类型：                  切片：size指定了其长度。该切片的容量等于其长度。切片支持第二个整数实参可用来指定不同的容量； 它必须不小于其长度，因此 make([]int, 0, 10) 会分配一个长度为0，容量为10的切片。                    映射：初始分配的创建取决于size，但产生的映射长度为0。size可以省略，这种情况下就会分配一个 小的起始大小。                    通道：通道的缓存根据指定的缓存容量初始化。若 size为零或被省略，该信道即为无缓存的。        a := make(map[string]string) // make(map[string]string,size) map size 时可以缺省a[\"a\"] = \"asdf\"fmt.Println(a)b := make([]int, 5, 10) // make(slice,长度,容量)fmt.Println(b)c := make(chan int, 5)// make(chan int,5) chan 中 size 可以缺省fmt.Println(c)                          func cap                  数组：v中元素的数量，与 len(v) 相同                    数组指针：*v中元素的数量，与len(v) 相同                    切片：切片的容量（底层数组的长度）；若 v为nil，cap(v) 即为零                    信道：按照元素的单元，相应信道缓存的容量；若v为nil，cap(v)即为零        array := [4]int64{1, 2, 3, 4}fmt.Println(len(array), cap(array)) // 4 4    slice := make([]int64, 1, 10)fmt.Println(len(slice), cap(slice)) // 1 10    cha := make(chan int)fmt.Println(len(cha), cap(cha)) // 0 0    m := make(map[string]int)fmt.Println(len(m), \"没有容量\") //0 没有容量                          func len        func append    appEnd := make([]int, 3)fmt.Println(cap(appEnd), len(appEnd), appEnd) // 3 3 [0 0 0]  appEnd = append(appEnd, 24)appEnd = append(appEnd, 12)fmt.Println(cap(appEnd), len(appEnd), appEnd) // 6 5 [0 0 0 24 12]  /**    make 已经初始化 [0 0 0]    当 追加的值 超过容量，扩大一赔的增加容量    再次在后面追加 24 12 */appEnd2 := make([]int, 2, 20)appEnd2 = append(appEnd2, appEnd...)fmt.Println(cap(appEnd2), len(appEnd2), appEnd2) // 20 7 [0 0 0 0 0 24 12]/**    appEnd2 初始长度为 2 ，容量20    追加 没有超过容量所以没有扩容 */  stringSlice := make([]string, 10)stringSlice[0] = \"oo\"stringSlice = append(stringSlice, \"a\", \"8\") // [oo          a 8]fmt.Println(stringSlice)  byteSlice := make([]byte, 10)byteSlice = append(byteSlice, \"asdf\"...)fmt.Println(byteSlice) // [0 0 0 0 0 0 0 0 0 0 97 115 100 102]        copy  内建函数copy将元素从来源切片复制到目标切片中，也能将字节从字符串复制到字节切片中。copy返回被复制的元素数量，它会是 len(src) 和 len(dst) 中较小的那个。来源和目标的底层内存可以重叠    c := make([]int, 3)    c[2] = 1    c1 := make([]int, 2)    c1[0] = 2    c1[1] = 3    copy(c, c1)    fmt.Println(c)  // [2 3 1]    fmt.Println(c1) // [2 3]    d := make([]int, 3)    d[2] = 1    d1 := make([]int, 5)    d1[0] = 2    d1[1] = 3    d = d1    fmt.Println(d)  // [2 3 0 0 0]    fmt.Println(d1) // [2 3 0 0 0]  func delete  内建函数delete按照指定的键将元素从映射中删除。若m为nil或无此元素，delete不进行操作    ints := make(map[string]int)    ints[\"Cc\"] = 1    ints[\"Lcc\"] = 23    fmt.Println(ints) // map[Cc:1 Lcc:23]    delete(ints, \"Cc\")    fmt.Println(ints) // map[Lcc:23]  func closechan 关闭chan  func panic终止程序  func recover内建函数recover允许程序管理恐慌过程中的Go程。在defer的函数中，执行recover调用会取回传至panic调用的错误值，恢复正常执行，停止恐慌过程。若recover在defer的函数之外被调用，它将不会停止恐慌过程序列。在此情况下，或当该Go程不在恐慌过程中时，或提供给panic的实参为nil时，recover就会返回nil  func print输出  func println换行输出数据结构  heap 对任意类型（实现了heap.Interface接口）的堆操作          Push      Pop      Remove        list 双向链表  ring 环形链表的操作  map  slice基础语法      数组    array := [4]int{1, 2, 3, 4}fmt.Println(array)                                 // [1 2 3 4]fmt.Println(len(array), cap(array))                // 4 4array[2] = 88                                      // 通过下标修改元素fmt.Println(array)                                 // [1 2 88 4]array1 := [...]int64{1, 2, 3, 4, 5, 6, 8, 8, 8, 8} // 至指定长度fmt.Println(array1)                                // [1 2 3 4 5 6 8 8 8 8]fmt.Println(len(array1), cap(array1))              // 10 10array2 := [2][2]int{}                              // 二维数组array2[0][0] = 11array2[0][1] = 211array2[1][0] = 123123array2[1][1] = 21123fmt.Println(array2) // [[11 211] [123123 21123]]            切片    s := make([]int, 3, 6)s[0] = 1s[1] = 2s[2] = 3s1 := s[1:]     // 截取下标元素1以后fmt.Println(s1) // [2 3]  s2 := s[:1]     // 从第一个到目标元素结束fmt.Println(s2) // [1]  s3 := s[1:2]    // 取中间fmt.Println(s3) // [2]  // 切片的长度 和容量fmt.Println(len(s), cap(s)) // 3 6            map                  string 有序排序         slice1 := map[string]int{    \"wangxiaoming\": 12,    \"liming\":       11,    \"fenglingling\": 16,    \"gaoxiao\":      15,    \"shengyun\":     14,}    var names []stringfor name := range slice1 {    names = append(names, name)}sort.Strings(names)for _, name := range names {    fmt.Printf(\"%s\\t%d\\n\", name, slice1[name])}                            int 有序排序        m := make(map[int]string)m[1] = \"a\"m[2] = \"c\"m[0] = \"b\"    var keys []intfor k := range m {    keys = append(keys, k)}sort.Ints(keys)    for _, k := range keys {    fmt.Println(\"Key:\", k, \"Value:\", m[k])}                          chan  https://blog.csdn.net/u011328417/article/details/89473323    /**    TODO 有缓冲和无缓冲     */    ch := make(chan string, 1)    /*    ch := make(chan string) 改为    无缓冲 放入数据会报错    fatal error: all goroutines are asleep - deadlock!    */    ch &lt;- \"发送\"                   // 接收数据    fmt.Println(\"接收：---&gt;\", &lt;-ch) // 接收：---&gt; 发送经典  type messages struct {    user        string    age         int    messageByte string}var (    message = make(chan *messages)    wg      sync.WaitGroup)func r() {    for {        select {        case m := &lt;-message:            fmt.Println(m)            /**                并发输出            &amp;{Cc 1 chan 学习}            &amp;{Cc 1 chan 学习}            &amp;{Cc 3 chan 学习}            &amp;{Cc 3 chan 学习}            &amp;{Cc 5 chan 学习}            &amp;{Cc 5 chan 学习}             */            wg.Done()        }    }}func main() {    mess := new(messages)    mess.user = \"Cc\"    mess.age = 23    mess.messageByte = \"chan 学习\"    go r()    wg.Add(6)    for i := 0; i &lt; 6; i++ {        mess.age = i        message &lt;- mess    }    wg.Wait()}协程      协程的概念          协程 使用 go 关键字开启，可以使用chan 类型搭配使用协程之间通讯            协程的基本使用    for i := 0; i &lt; 10; i++ {    go func(s int) {        i = i + 8    }(i)    fmt.Println(\"--&gt;：\", i)    /** 输出        --&gt;： 0        --&gt;： 9     */}      数据转换  struct to json  json to map  interface to 基本类型  interface 转 struct          switch      defer  延迟执行  defer 的执行顺序是后进先出  遇到异常也会同样的后进先出然后执行报错用途  清理释放内存  执行recove例子      return    func a(m int) int {    defer func() {        m = 8    }()    return 3}func main() {    fmt.Println(a(1)) // 3 }            顺序    for i := 0; i &lt; 6; i++ {        defer fmt.Println(\"--&gt;\", i)        if i == 2 {            panic(\"退出\")        }        /**            --&gt; 2            --&gt; 1            --&gt; 0            panic: 退出         */    }      锁      sync Locker        sync Mutex 互斥锁          可以创建为其他结构体的字段；零值为解锁状态。      Mutex类型的锁和线程无关，可以由不同的线程加锁和解锁。            sync RWMuntex 读写互斥锁          该锁可以被同时多个读取者持有或唯一个写入者持有。      RWMutex可以创建为其他结构体的字段；零值为解锁状态。      RWMutex类型的锁也和线程无关，可以由不同的线程加读取锁/写入和解读取锁/写入锁。            sync WaitGroup 用于等待一组线程的结束                  父线程调用Add方法来设定应等待的线程的数量。                    每个被等待的线程在结束时应调用Done方法。                    同时，主线程里可以调用Wait方法阻塞至所有线程结束        package main    import (    \"fmt\"    \"sync\"    \"time\")    type User struct {    Name   string    Locker *sync.Mutex}    func (u *User) SetName(wati *sync.WaitGroup, name string) {    defer func() {        fmt.Println(\"Unlock set name:\", name)        u.Locker.Unlock()        //Done方法减少WaitGroup计数器的值，应在线程的最后执行        wati.Done()    }()        u.Locker.Lock()    fmt.Println(\"Lock set name:\", name)    time.Sleep(1 * time.Second)    u.Name = name}    func (u *User) GetName(wati *sync.WaitGroup) {    defer func() {        fmt.Println(\"Unlock get name:\", u.Name)        u.Locker.Unlock()        wati.Done()    }()        u.Locker.Lock()    fmt.Println(\"Lock get name:\", u.Name)    time.Sleep(1 * time.Second)}    func main() {    user := User{}    user.Locker = new(sync.Mutex)    wait := &amp;sync.WaitGroup{}    names := []string{\"a\", \"b\", \"c\"}    for _, name := range names {        /*        Add方法向内部计数加上delta，delta可以是负数；        如果内部计数器变为0，Wait方法阻塞等待的所有线程都会释放，如果计数器小于0，方法panic。        注意Add加上正数的调用应在Wait之前，否则Wait可能只会等待很少的线程。        一般来说本方法应在创建新的线程或者其他应等待的事件之前调用         */        wait.Add(2)        go user.SetName(wait, name)        go user.GetName(wait)    }    // Wait方法阻塞直到WaitGroup计数器减为0    wait.Wait()}                          sync Pool 池          GC 池      反射数据类型内存机制调度区别      copy And =          copy：值复制，不会覆盖目标type      = 会影响目标索引指针            cap(容量) And len（长度）          容量：当append(追加) 超过容量会翻一赔的扩容      长度：可以看到元素个数            new 和 make          new分配内存，make 分配并且初始化      使用                  new 常用 struct(结构体)          make map、slice、chan                    返回值                  new 返回指向该类型的新分配的零值的指针          make 返回类型与其参数相同，而非指向它的指针                          数组和切片    https://blog.csdn.net/qq_36520153/article/details/82836399          切片是指针类型，数组是之类型      数组的长度是固定的，切片是动态数组和扩容容量（cap）      切片底层是数组            slice and list（测试 10000000)          创建                  slice 创建速度：254.1716ms          list 创建速度: 2.1224103s                    插入                  slice 的插入速度—-&gt;2.0059ms          list: 的插入速度—-&gt;0s                    遍历                  slice遍历的速度: 0s          list遍历的速度: 56.0378ms                            频繁的插入和删除用list,频繁的遍历查询选slice      "
  },
  
  {
    "title": "gRPC 和 ui 操作",
    "url": "/blog.github.io/posts/gRPC/",
    "categories": "Server",
    "tags": "golang, GoAdvanced, GoUtils",
    "date": "2019-12-26 14:22:12 +0800",
    





    "snippet": "gRPC安装protoc工具  https://github.com/protocolbuffers/protobuf/releases      -I 参数：指定import路径，可以指定多个-I参数，编译时按顺序查找，不指定时默认查找当前目录    –go_out ：golang编译支持，支持以下参数              plugins=plugin1+plugin2 - 指定插件，目前只支持grpc，即：plugins=grpc        M 参数 - 指定导入的.proto文件路径编译后对应的golang包名(不指定本参数默认就是.proto文件中import语句的路径)        import_prefix=xxx - 为所有import路径添加前缀，主要用于编译子目录内的多个proto文件，这个参数按理说很有用，尤其适用替代一些情况时的M参数，但是实际使用时有个蛋疼的问题导致并不能达到我们预想的效果，自己尝试看看吧        import_path=foo/bar - 用于指定未声明package或go_package的文件的包名，最右面的斜线前的字符会被忽略        末尾 :编译文件路径 .proto文件路径(支持通配符)完整实例              使用前安装：go get -u github.com/golang/protobuf/protoc-gen-go  protoc -I . --go_out=plugins=grpc,Mfoo/bar.proto=bar,import_prefix=foo/,import_path=foo/bar:. ./*.protoprotoc -I . --go_out=plugins=grpc:. dict.protocprotoc -I . --php_out=plugins=grpc:. zhly_pay.protocprotoc --java_out=:. zhly_pay.protocprotoc --js_out=:. zhly_pay.protocprotoc -I=$DIR  yun_mao.protoc  \\ --grpc-web_out=import_style=commonjs,mode=grpcwebtext:$OUT_DIRprotoc --js_out=import_style=commonjs,binary:. yun_mao.protoc    下载工具依赖  go get google.golang.org/grpcgo get -u github.com/golang/protobuf/protoc-gen-gogo get -u github.com/golang/protobuf/创建.protoc文件syntax = \"proto3\";  //语法声明package gRPCDemo; //包名// Greeter 微服务service Greeter {  // Sends a greeting  rpc SayHello (HelloRequest) returns (HelloReply) {}}// HelloRequest 请求数据格式message HelloRequest {  string name = 1;}// HelloReply 响应数据格式message HelloReply {  string message = 1;}syntax = \"proto3\";package protoc;service Greeter {  // 1、 查找最空闲的 tcpcluster rpc LookupCluster(LookupClusterRequest) returns (LookupClusterResponse){}  // 2、根据 clientid 发送数据。    rpc SendOutByClientId(SendOutByClientIdRequest) returns (SendOutByClientIdResponse){}  // 3、查找每个 tcpcluster 终端数  rpc LookUpAllClusterNumber(LookUpAllClusterNumberRequest) returns(LookUpAllClusterNumberResponse){}} // 1、 查找最空闲的 tcpcluster Requestmessage LookupClusterRequest{    string args = 1;} // 1、 查找最空闲的 tcpcluster Responsemessage LookupClusterResponse{   string clientId = 1;}// 2、根据 clientid 发送数据  Requestmessage SendOutByClientIdRequest{    string clientId = 1;    string  mgs = 2;}// 2、根据 clientid 发送数据  Responsemessage SendOutByClientIdResponse{    int64 code = 1;}// 3、查找每个 tcpcluster 终端数  Requestmessage LookUpAllClusterNumberRequest{}// 3、查找每个 tcpcluster 终端数  Responsemessage LookUpAllClusterNumberResponse{        map&lt;string, int64&gt; number = 1;}grpcuigo get github.com/fullstorydev/grpcuigo install github.com/fullstorydev/grpcui/cmd/grpcui验证下grpcui -help成功则会在 gopath/bin 目录下生成 grpcui grpcui -bind 0.0.0.0 -port 8506 -plaintext 47.244.225.92:8502            webiui地址          端口号             grpc地址grpcui -bind 0.0.0.0 -port 8506 -plaintext 0.0.0.0:8502"
  },
  
  {
    "title": "gRPCDemo and grpcUI",
    "url": "/blog.github.io/posts/grpc/",
    "categories": "Server",
    "tags": "gRPC, golang, GoWeb, Microservices",
    "date": "2019-12-26 14:22:12 +0800",
    





    "snippet": "gRPC源码codeserverpackage mainimport (\t\"context\"\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"\t\"google.golang.org/grpc\"\t\"google.golang.org/grpc/reflection\"\tpd \"grpc_demo/api\"\t\"net\")func main() {\tServer()}// 服务对象type DemoServer struct{}func (this *DemoServer) SendOutByClientId(context.Context, *pd.SendOutByClientIdRequest) (*pd.SendOutByClientIdResponse, error) {\tresponse := new(pd.SendOutByClientIdResponse)\tlogs.Info(\"implement me\")\treturn response, nil}func (this *DemoServer) LookUpAllClusterNumber(context.Context, *pd.LookUpAllClusterNumberRequest) (*pd.LookUpAllClusterNumberResponse, error) {\tresponse := new(pd.LookUpAllClusterNumberResponse)\tlogs.Info(\"implement me\")\treturn response, nil}// 实现gRPC 方法func (this *DemoServer) LookupCluster(ctx context.Context, in *pd.LookupClusterRequest) (*pd.LookupClusterResponse, error) {\tvar t pd.LookupClusterResponse\tt.ClientId = GetName(\"\")\treturn &amp;t, nil}// 写业务逻辑func GetName(codeType string) (name string) {\tname = \"666\"\treturn name}var (\tServerAddress = \":8032\")// server 启动服务func Server() {\t// 当服务启动时 注册到对应的注册中心 必填项（服务器地址、服务器端口号、此服务唯一标识）\t// 也可以同时启动http服务\tlis, err := net.Listen(\"tcp\", ServerAddress)\tif err != nil {\t\tlogs.Info(\"gRPC  启动失败！\", err.Error())\t}\tser := grpc.NewServer()\tpd.RegisterGreeterServer(ser, &amp;DemoServer{})\treflection.Register(ser)\tlogs.Info(\"TCP建立成功！ 等待链接 \", ServerAddress)\tif err = ser.Serve(lis); err != nil {\t\tlogs.Info(\"gRPC 链接成功！\")\t}}cilentpackage mainimport (\t\"context\"\t\"fmt\"\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"\t\"google.golang.org/grpc\"\tpd \"grpc_demo/api\"\t\"time\")const (\t// 这里可以使用 注册中心拉取服务器地址以及端口号\taddress = \"127.0.0.1:8032\")func main() {\t// 调用方法\tname := GetNameByCode(\"1\")\tfmt.Println(name)}// GetNameByCode 调用方法func GetNameByCode(id string) (name string) {\t// gRPC 建立链接\tconn, err := grpc.Dial(address, grpc.WithInsecure())\tif err != nil {\t\tlogs.Error(\"gRPC 建立失败\", err.Error())\t}\tdefer conn.Close()\tc := pd.NewGreeterClient(conn)\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\tdefer cancel()\tvar getRequest pd.LookupClusterRequest\tgetRequest.Args = id\tgetResponse, err := c.LookupCluster(ctx, &amp;getRequest)\tif err != nil {\t\tlogs.Error(\"gRPC\", err.Error())\t\treturn\t}\tif getResponse != nil {\t\tlogs.Info(\"你调用得gRPC 服务返回值为：\", getResponse.ClientId)\t\treturn \"\"\t}\treturn getResponse.ClientId}protosyntax = \"proto3\";package protoc;service Greeter {  // 1、 查找最空闲的 tcpcluster rpc LookupCluster(LookupClusterRequest) returns (LookupClusterResponse){}  // 2、根据 clientid 发送数据。    rpc SendOutByClientId(SendOutByClientIdRequest) returns (SendOutByClientIdResponse){}  // 3、查找每个 tcpcluster 终端数  rpc LookUpAllClusterNumber(LookUpAllClusterNumberRequest) \t\treturns(LookUpAllClusterNumberResponse){}} // 1、 查找最空闲的 tcpcluster Requestmessage LookupClusterRequest{    string args = 1;} // 1、 查找最空闲的 tcpcluster Responsemessage LookupClusterResponse{   string clientId = 1;}// 2、根据 clientid 发送数据  Requestmessage SendOutByClientIdRequest{    string clientId = 1;    string  mgs = 2;}// 2、根据 clientid 发送数据  Responsemessage SendOutByClientIdResponse{    int64 code = 1;}// 3、查找每个 tcpcluster 终端数  Requestmessage LookUpAllClusterNumberRequest{}// 3、查找每个 tcpcluster 终端数  Responsemessage LookUpAllClusterNumberResponse{        map&lt;string, int64&gt; number = 1;}启动方式go run server.gogo run client.goproto依赖    go get google.golang.org/grpc    go get -u github.com/golang/protobuf/protoc-gen-go    go get -u github.com/golang/protobuf/\t\tgo get github.com/fullstorydev/grpcui    go install github.com/fullstorydev/grpcui/cmd/grpcui生成文件    cd [进入proto文件所在位置]    protoc -I . --go_out=plugins=grpc:. api.protoc    protoc --java_out=:. api.protogrpcUI            webiui地址    端口号             grpc地址grpcui -bind 0.0.0.0 -port 8506 -plaintext 0.0.0.0:8032"
  },
  
  {
    "title": "Databases（04735）",
    "url": "/blog.github.io/posts/databases/",
    "categories": "ComputerBasics",
    "tags": "Mysql, SelfStudy",
    "date": "2019-12-20 13:57:01 +0800",
    





    "snippet": "数据库系统原理（04735）第一章数据库系统概述第三节数据库系统的结构模式：物理独立性 外模式：逻辑独立性  数据库系统结构          客户端系统结构      浏览器/服务器结构                  表示层、处理层、数据层                    第四节数据模型  数据模型的分类：概念层数据模型、逻辑层数据模型、物理层数据模型  组成三要素          数据结构：      数据操作：      数据约束：        数据模型                  型：Type                    值：Value                    E-R图：实体型（矩形）、属性（椭圆）、联系（棱形）                    逻辑模型                  层次模型          网状模型          关系模型          面向对象模型                    物理模型      习题  DBMS提供子模式描述语言来严格定义子模式  关系数据库优点          建立在严格数据概念基础之上      关系模型对于透明、数据独立、保密性、简化了开发工作      第二章关系数据库（重点）关系数据库概述关系数据模型关系数据库模型  数据模型要素：数据结构、数据操作、数据约束  组成要素：关系数据库结构、关系操作集合、关系完整性约束  数据结构          表名（唯一）      列      行        关系数据模型          表（table）：也成关系、而为数据结构，由唯一的表名、列、行      关系（Relation）：关系逻辑对于的一张二维表，集本关系（基本表、基表），查询表、试图表      列（Column）：也称字段（Field）或属性（Attribute），属性的个数为关系的元或度；列值称为属性值，其取范围称为值域      行（Row）：也称元组（Tuple）记录（Record），是按照行存储的      分量（Component）：元组（行 ）其中的一个值      域（Domain）：表示属性取之范围      数据类型（Date Type）：每列的数据类型一样的      码或键（key）：属性得值都能用来唯一的标识该关系的元组      候选码或者候选键（Candidate Key）： 多个列      主属性、非主属性      主码或主键（Primary key）：在若干个候选码中指定一个唯一标识      全码或全键（All- Key）：关系模式的所有属性集合、主键或者主键      外码或外键（Foreign Key）：另一个关系的主键      参照关系和被参照关系      关系模式：关系模式是型（Type）、关系是值（Value），关系模式怼关系描述、不断改变        关系数据库所有关系的集合          每一个属性都是不可分解的（不允许表中有表）      每个关系属性必须命名，属性不同      不允许key完全相同的元组      顺序无关紧要、可以任意交换      列无关紧要、可以任意交换        关系操作集合          基本操作                  查询（Query）：一次一集合（结果集）          插入（Insert）          删除（Delete）          修改（Update）                    关系数据语言分类                  关系代数语言：操作对象、操作符、操作结果          SQL：结构化查询语言          关系演算语言：元祖关系演算、域关系演算                    关系代数                  传统的集合运算                          并 - U ：去掉相同的元组（数据）              差 - -              交 - U ：找出两个元组（数据）              笛卡尔积：R1*R2（第一个表的每一个行与第二个表的每一个行组合）                                专门的关系运算                          选择(select): σF(R)                                  查询性别为男的：σsex=’男’(S1)                                            投影πA(R)                                  选择列：π sname,age (S1)                                            链接（join）⋈ n : 链接              除：R/S                                关系完整性约束：正确性、相容性、一致性                          实体完整性主属性              参照完整性约束                                          关系数据库的规范化理论冗余和异常问题  数据冗余  更新异常  插入异常  删除异常函数依赖  完全依赖：  部分依赖：范式关系规范化过程  第一范式（1NF）：每一行取值，不可再分的，存在非属性对码的部分函数依赖          缺点：冗余高，插入操作异常、删除操作异常        第二范式（2NF）：所有的非主属性完全依赖候选关键字  第三范式：：每一个非主属性不传递函数依赖候选          第三范式改进（BCNF）      第三章数据库设计数据库设计概要  概述：1-数据库分析与设计阶段；2-数据库实现与操作阶段  目标：满足应用功能需求（存、取、删、改），改良数据库性能（数据高效存取和空间的节省共享性、完整性、一致性、安全保密性）  内容：用户对数据需求出发，结构和行为设计          结构设计（静态的）                  数据库概念结构设计          逻辑结构设计          物理结构设计                    数据库行为设计（动态的）：操作        方法：          直观设计方法（最原始的设计方法）      规范设计法：普遍的、常用数据设计方法                  常见的有                          新奥尔良设计方法：需求分许、概念结构设计、逻辑结构设计、物理结构设计              基于E-模型设计方法              基于第三范式的设计方法，结构法设计方法                                          计算机辅助设计法（辅助软件工具-&gt;俗称【CASE】工具）        过程          需求分析      概念结构设计      逻辑结构设计      物理结构设计      数据实施      数据库的运行和维护      数据库设计基本步骤  需求分析（数据库设计的起点）          作用：后续概念设计、逻辑设计、物理设计、数据库建立与维护的依据      步骤                  确认数据库范围（第一项工作）          应用过程分析          收集与分析数据          编写需求分析报告                      概念结构设计（概念模型）：最大限度满足应用需求  逻辑结构设计：关系模型（层次、网状、关系数据来表示）  物理设计：数据库在存储设备上的结构  数据库实施          加载数据      应用程序设计      数据库试运行        数据库运行与维护：保证数据库的正常运行；最困难的工作室数据库重组与重构数据库设计方法  关系数据库设计过于各级模式          概念模式      逻辑模式      内模式        概念结构设计          E-R图表示方法                  实体性、属性、联系                          实体性之间三种联系                                  一对一联系（1:1）：可以在两个实体类型转换成两个关系模式中的任意一个关系模式的属性中加入另一个关系模式的键和联系类型的属性。                  一对多联系（1:N）：在N端实体类型转换成的关系模式中加入1端实体类型转换成的关系模式的键和联系类型的属性                  多对多联系（M:N）：将联系类型也转换成关系模式，其属性为两端实体类型的键加上联系类型的属性，而键为两端实体键的组合                                                                        局部信息结构设计      全局信息结构设计        逻辑结构设计方法          主要三项                  将E-R图转换为关系模型          对关系数据模型进行优化          设计面向用户外模式                      物理设计方法          建立索引（逻辑联系）      建立聚集（物理聚集）      第四章SQL与关系数据库基本操作（重点）SQL概述（Structured Query Language，SQL）  结构化查询语言， SQL3 颁布标准-&gt;1999年  特点：SQL不是某个特定数据库供应商专有的语言  组成          数据查询      数据定义语言（DDL）                  cretate ：创建数据库或数据库对象          alter：修改数据库或数据库对象进行修改          drop：删除数据库的数据对象                    数据操纵（DML）：用于操纵数据库中各种对象，特别是检索和修改数据                  select：从表试图中检索数据          insert：将数据插入表或试图          update：修改表活着试图中的数据          delete：从表或试图中删除数据                    数据控制（DCL）：主要是权限                  grant：用于授予权限          revoke：用于收回权限                    MySQL预备知识  关系型数据库：体积小、速度快、开放源代码  MySQL基础          使用架构（LAMP、WAMP）；Linux、Apache、MySQL、（PHP、Perl、Python）、Windows      扩展语言要素                  常量：也称字面值或标量                          字符串：单引号、双引号括起来的字符序列              数值：整数常亮、浮点数常量              十六进制：每对十六进制数字转换为一个字符，X***              时间日期：用单引号将表示日期自负串号起来构成（例如：’2018-06-05’）              null值：表示“没有值”、”无数据“                                变量：临时存储数据，随着程序变化而变化；变量属性有名字、数据类型                          用户变量：用户变量前常添加一个符号@用于区分              系统变量：大多数系统变量应用于其他的SQL语句时，必须在系统变量前添加两个@                                          运算符                  算数运算符          位运算符          比较运算符          逻辑运算符                    表达式：常量、变量、列名、复杂计算、运算符、函数的组合                  字符型          数值型          日期型                    数据定义  数据库模式定义                  创建数据库（create）                  if not                            选择数据库（use）: use test;                    修改数据库（alter）：alter database test default charcter set gb2312                    删除数据库（drop）: drop database test                    查看数据库（show）：show databases          create database if not exists mysql_test;  use mysql_test; # 选择并且使用数据库  alter database mysql_test default character set utf8;  drop database mysql_test;  drop database if exists test;                    表定义                              查询表结构            show create table mysql_test.customers;show columns from mysql_test.customers;desc mysql_test.customers;                                创建表            create table customers (  cust_id int not null auto_increment,# 设置自增，自动编号  cust_name char(50) not null,  cust_sex char(1) not null default 0,# 指定默认值  cust_address char(50) null,  cust_contact char(50) null,  primary key (cust_id) # 主键);                                修改数据表和更改值            alter table mysql_test.customers add cust_city char(50) not null default 'Wuhan' after cust_sex;# 添加一列，不能为空、默认值为'wuhan'、在'cust_sex'之后alter table mysql_test.customers change cust_sex sex char(1) null default 'm'; # 修改列名字，并且设置新的属性alter table mysql_test.customers alter column cust_city set default 'Beijing';# 修改字段属性alter table mysql_test.customers modify column cust_name char(20) first;alter table mysql_test.customers drop column cust_contact;# 删除多余的列alter table mysql_test.customers rename to mysql_test.backup_customers;# 修改表名rename table mysql_test.backup_customers to mysql_test.customers;# 修改表名drop table customers; # 删除表drop table if exists customers; #  询问是否存在再删除                                      索引定义                              优点：索引是提高数据文件访问效率的有效方法                                缺点                          以文件的形式存储，如果有大量的索引，索引文件可能比数据文件更快达到最大的文件尺寸              在提高查询速度的同时，会降低更新表的速度                                            分类：索引通常呗创建成单列索引和组合索引                                类型                          普通索引 index 或 key              唯一性索引 unique              主键 primary key                                            创建              create index index_name on mysql_test.customers(cust_name(3) asc ); # 索引升序  create index index_name_and_address on mysql_test.customers(cust_name,cust_address);# 创建组合索引  alter table mysql_test.customers add index index_seller_name(cust_contact);  alter table customers add cust_index char(2);# 先添加临时字段  alter table mysql_test.customers add constraint index_unique unique(cust_index);# 修改表时添加唯一字段                                查看              show index from mysql_test.customers;                                删除              drop index index_unique on mysql_test.customers;  alter table mysql_test.customers drop index index_name;# 使用alter                              数据更新（重点）  插入数据（insert）          insert … values：insert into mysql_test.customers values(901,'Cc','F','jiangxi','jiujiang');      insert … set：insert into mysql_test.customers set cust_name=\"Lcc\" ,cust_address='beijing',cust_sex=default;      insert …select：insert into customers(cust_id,cust_name,cust_sex,cust_address,cust_contact) select cust_id,cust_name,cust_sex,cust_address,cust_contact from customers_back;        update：update customers set cust_name=\"HongCheng\" where cust_id=902;  delete：delete from customers where cust_name='ChaoChengLi';数据查询-定义：从数据库的一张或多张（试图）中检索出满足条件的数据信息，通常查询的结果是由0行（没有满足条件的数据）或多行记录组成的一个记录集合，允许选择一个或多个座位输出字段；使用灵活数学理论基础是关系数据模型中对表对象的一组关系运算，即选择投影和连接      select：select [列名|*] from table_name where 条件 group by 列名 having 条件 order by 列名 limit offset,rowcount         查询数据          查询内容        select cust_name,cust_address from customers;#指定列select * from customers;# 通配符（全部）select cust_name as name ,cust_address as address from customers;# 别名查询select case when cust_sex='F' then '男' else '女' end as sex from mysql_test.customers;# case 表达式(cust_sex内容等于'F'，则显示男，否则显示女)select case cust_id when 902 then \"一\" when 903 then '二' else '其他' end as name from customers;select cust_name,cust_sex ,cust_id+100 from customers;# 查处结果上cust_id都加上100                  聚合函数                                            函数名              说 明                                                          COUNT              求组中项数，返回INT类型整数                                      MAX              求最大值                                      MIN              求最小值                                      SUM              返回表达式中所有值的和                                      AVG              求组中值的平均值                                      STD或STDDEV              返回给定表达式中所有值的标准值                                      VARIANCE              返回给定表达式中所有值的方差                                      GROUP CONCAT              返回由属于一组的列值连接组合而成的结果                                      BIT AND              逻辑或                                      BIR OR              逻辑与                                      BIT XOR              逻辑异或                                      select count(cust_id) from customers;select count(*) from customers;select sum(cust_id) from customers;select min(cust_id) from customers;select avg(cust_id) from customers;                    from 子句与多表连接查询        # 准备drop table tbl1,tbl2;create table tbl1 (id int,sex int);create table tbl2 (id int,name char(30));insert into tbl1 values(1,0),(2,1),(3,0),(4,1);insert into tbl2 value(1,'Cc'),(2,'CH'),(3,'ChaoChengLi'),(5,\"Test\");                              交叉连接（笛卡尔积）:两张表记录行数的乘积            select * from tbl1 cross join tbl2;select * from tbl1 join tbl2;                                内连接：通过设置连接条件，来移除查询结果中某些数据之后交叉连接；如果on子句中的连接条件使用运算符=方式为等值连接，其他的为非等值连接            select * from tbl1 inner join tbl2 on tbl1.id=tbl2.id;#可以看到只查出了1，2，3                          自连接：可以将一个表与它本身进行连接，称自连接                                            外连接：交叉连接时，有时会输出不满足的条件记录                          左外连接：左表为基础，from中使用left outer join 或left join                        select * from tbl1 laft join tbl2;                          右外连接：有表为基础，from 中使用right outer join或 right join                                                  where  子句与条件查询                              比较运算符                                                            比较运算符                  说 明                                                                              =                  等于                                                  ＜＞                  不等于                                                  !=                  不等于                                                  ＜                  小于                                                  ＜=                  小于等于                                                  ＞                  大于                                                  ＞=                  大于等于                                                  ＜=＞                  不会返回UNKNOWN                                                      insert into customers values(901,\"Cc\",'M',\"japan\",'sss'),(904,\"ChaoCheng\",'M',\"us\",'ttt');select * from customers where cust_sex='M';# 查找男性用户select * from customers where cust_id between 901 and 903;# 判断范围select * from customers where  cust_id in (901,903);# 查询指定select * from customers where cust_contact is null; # 查询 联系为空的select * from customers where cust_contact is not null;# 查询 联系不为空的                                子查询：把查出来的结果作为匹配的对象再次查询            select id from tbl1 where id  in (select id from tbl2 where id &gt; 0);# in 自查询结果集select * from tbl1 where id = 1 and exists (select id from tbl2 where id &gt; 0);# 查询此值是否在自查询结果中                          group by子句与分组：结果集中的数据根据选择列进行逻辑分组                        update customers set cust_address='beijing' where cust_id=901;select cust_address,cust_sex,count(*) as '人数' from customers group by cust_address,cust_sex;# 地址相同的男性和女性用户数量select cust_address,cust_sex,count(*) as '人数' from customers group by cust_address,cust_sex with rollup;# 在group by 上面再统计                                          having                select cust_name,cust_address from customers group by cust_address,cust_name having count(*) &lt;= 1;                                            having VS where                                  having                                          过滤分组                      可以包含聚合函数                      在数据分组后进行过滤                                                        where                                          过滤数据行                      不可以包含聚合函数                      在数据分组前进行过滤                                                                                                  order by子句：排序                select cust_name,cust_sex from customers order by cust_name desc ,cust_address desc;                                            limit : 限制select语句返回行数，两个参数（1-偏移量、2-最大数目），初始偏移量是0（而不是1）                select * from customers limit 2,2;# 偏移2个,最大数目2select * from customers limit 3; # 一个参数只显示最大记录数目                                                        视图  视图是数据库中一个对象，它是数据库系统提供给用户的一朵中角度观察数据的一种机制，视图不是数据库真实的表，而是一张虚拟表，其自身并不存储数据      优点          集中分散数据      简化查询语句      重用SQL语句      保护数据安全      共享所需数据      更改数据格式            操作    # 创建视图create or replace view customers_view as select * from customers where cust_sex='M' with check option;create view customers_view_back as select * from customers where cust_sex='M' with check option;# deletedrop view customers_view;drop view customers_view_back;# 查看show create view customers_view;# 插入insert into customers_view value(910,'MySql','M','US','jp');# 更新；更新视图内容会更新基表内容，基表内容修改也会修改视图内容update customers_view set cust_address='Ch';# 删除；对于依赖多个基表的视图，不能使用delete语句delete from customers_view where cust_name='Cc';# 查询select * from customers_view where cust_id=902;      第五章数据库编程（难点）存储过程  存储过程是一组为了完成某项特定功能的SQL语句集，其实质就是一段存储在数据库中的代码；存储过程可以有声明式的SQL语句（update 、create 、select）和过程式的SQL语句（if … then … else）组成。这组语句集经过编译后存储在数据库中，用户只需要通过指定存储过程的名字并给定参数（参数可有可无），可随时调用并执行，而不需要重新编译      优点          可增强SQL语言的功能和灵活性      良好的封装性      高性能      可减少网络流量      可作为一种安全机制来确保数据库的安全性和数据的完整性            创建    # 创建 delimiter $$ # 定义结束符 delimiter !! 但是需要和end !! 对应起来create procedure sp_update_sex(in cid int,csex char(1)) begin # 开始update customers set cust_sex=csex where cust_id=cid;end $$ # 结束        存储过程体                  使用declare语句声明局部变量：declare cid int (10);                  只能在存储过程体的begin...end语句块声明          必须在存储过程的开头处声明          不同于用户变量                          局部变量：前面没有@符号，只能在存储过程体的begin...end语句块使用              用户变量：前面有@符号，同时已声明的用户变量存在于整个会话中                                                  使用set语句为局部变量赋值（set cid=911）                    select into 语句把选定列值直接存储到局部变量中                    流程控制语句                  条件判断：if then else ；end if          循环：while 、repeat 、loop；iterate 退出当前循环，且重新开始下个循环                            游标（cursor）                  在mysql中一条select…into语句中成功执行后，会返回带有一行数据，这行数据可以被读取到存储过程中进行处理，然后在使用select语句进行数据检索时，若该语句成功被执行，则会返回一组结果集的数据行，该结果集拥有多行数据，这数据无法直接一行一行进行处理，此时需要使用游标；游标是一个select语句检索出来的结果集，在存储了游标后，应用程序或用户就可以更具需要滚动或浏览器中数据                          声明          打开：open cursor_name          读取：fetch cursor          关闭：close cursor_name                use mysql_test;delimiter $$ # mysql 默认是; delimiter ;create procedure sp_sumofrow (out rows int)begindeclare cid int declare found boolean default truedeclare cur_cid cursor for # 创建游标select cust_id from customers;declare continue handler for not foundset found=falseset rows=0open cur_cidfetch cur_id into cidwhile found doset rows=rows+1fetch cur_cid into cidend whileclose cur_id;end $$delimiter;call sp_sumofrow(@rows);                  注意事项                          只能用于存储过程或者存粗函数，不能单独在查询操作中使用              使用中可以用多个游标，但是在begin…end语句块每个游标的名字必须时唯一的              不是一条select语句，是被select语句检索出来的结果集                                                  调用存储过程、删除、查看        show procedure status;# 查看所有详情show create procedure sp_update_sex;# 查看call sp_update_sex(909,'M');# 调用drop procedure sp_update_sex; # 删除drop procedure if exists sp_update_sex; #  删除            存储函数  存储函数与存储过程一样，组成代码片段，调用语句      存储过程与存储函数区别          存储函数不能有参数，因自身就是输出函数参数；过程可以拥有输出参数      可以直接对存储函数调用，不需要call语句；存储过程需要call调用      存储函数必须包含return语句；存储过程必须要包含这个特殊语句            操作    # 创建 use mysql_test;delimiter $$create function fn_search(cid int)returns char(20)deterministicbegindeclare sex char(20);select cust_sex into sex from customers where cust_id=cid;if sex is null then return (select'没有该用户');else if sex='f' then return (select'女');else return (select'男');end if;end if;end $$delimiter ;# 调用 select fn_search(902);# 删除drop function fn_search;drop function if exists fn_search;  第六章数据库安全与保护数据库完整性：数据的正确性和相容性  作用：防止数据库中存在不符合定义的数据  约束的作用对象          列级约束：列类型、取值范围、精度等约束      元组约束：元组中的各个字段之间的相互约束      表级约束：若干个元组，关系之间的联系约束        核心：实体完整性、参照完整性、用户定义性的完整性          实体完整性：通过主键约束和候选键约束实现（规则如下）                  每个表只能定义一个主键                          主键：一个表只能有一个；primary key              候选键：可以定义若干个；unique                                主键的值（键值）必须能够唯一标志表每一行记录，且不能为空          复合主键不能包含不必要的多余的列          一个列名在复合主键的列表中只能出现一次                    参照完整性：在通过创建表或更新表同时定义一个外键声明实现                  方式                          在某个列定义属性后直接加上reference definition语法              在表列属性定义后添加foreign key(index_col name...)                use mysql_test;create table orders (  order_id int not null auto_increment,  order_product char(50) not null,  order_product_type char(50) not null,  cust_id int null,  order_date datetime not null,  order_price double not null,  order_amount int not null,  primary key(order_id),  foreign key (cust_id) references customers(cust_id) on delete restrict on update restrict);                                                          完整性约束                          非空约束：not null              check：check （expr）              触发器                                            命名完整性约束（指定约束的名字）                                更新完整性约束                          完整性约束不能直接修改              使用alter table语句，可以独立的删除完整性约束，而且不会删除表本身（使用drop table删除表，会自动删除）                                          触发器（Trigger）  在关系表上的一类由事件驱动的数据库对象，也是一种保证数据完整性的方法，一旦定义无需用户调用，任何对表的修改操作均有数据库服务器自动激活相应的触发器；触发器与表的关系十分密切，其主要作用是实现主键和外键不能保证负责的参照完整性和数据一致性，从而有效地保护表中的数据      注意：创建中，每个表每个事件每次只允许一个触发器，因每个表最多支持6个触发器（insert、update、delete）之前，之后        操作    # 创建create trigger customers_insert_trigger after insert on customers for each row set @str='one customers added!'# 删除drop trigger customers_insert_trigger;drop trigger if exists customers_insert_trigger;# insertcreate trigger customers_insert_trigger after insert on customers for each row set @str=new.cust_id;# updatecreate trigger customers_update_trigger before update on customers for each row set new.cust_address=old.cust_contact;  安全性与访问控制：防止不合法的操作而造成数据泄漏，更改或破坏create user 'Cc'@'localhost' identified by 'password';# 创建show grants for 'Cc'@'localhost';# 查看set password for 'Cc'@'localhost' = '123456asdf';# update passworddrop user 'Cc'@'localhost';# 删除grant select (cust_id,cust_name) on mysql_test.customers to 'Cc'@'localhost';# 授权 目标用户需要重新登录select cust_id,cust_name from mysql_test.customers; #  授权登录用户查看下结果grant all on mysql_test.* to 'Cc'@'localhost';#  授权mysql_test 库的所有操作权限grant create user on *.* to 'Cc'@'localhost'; # 创建用户的权限revoke select on mysql_test.* from 'Cc'@'localhost';# 撤回权限事务与并发控制：事务保证数据一致性的基本手段  用户定义操作序列，这些操作作为一个完整工作但愿，要么全部执行，要么全部不执行，是一个不可分割的工作单位，事务中的操作一般是对数据的更新操作（增、删、改）  特征（ACID）          原子性：事务时不可分割的最小工作单位      一致性      隔离性      持续性（永久性）        锁-&gt;做常用的并发控制          含义：事务通过向系统请求对他的希望的数据加锁，以确保他的不被非预期改变      锁：一个锁是实质上是允许阻止一个事物对一个数据对象存取特权      类型                  排他锁（X锁）用于写操作          共享锁（S锁）用于读操作                    原理                  事务T对D数据加X或S锁，必须等待事务释放锁才能进行写或者读          事务一直占有获得锁直到结束是释放锁                    粒度：单元数据大小；锁粒度越细，并发性越大，软件复杂性和系统开销也就越大      锁级别（一致性或隔离性）：0～3级封锁      死锁和活锁                  活锁：活锁处理方案—-先来先服务          死锁：活锁的预防方案                          一次性锁请求              锁请求排序              序列化处理              资源剥夺                                死锁检测：图论的方法检测死锁，并以正在执行的事务为节点                    可串行性：基本操作的一种排序                  两段封锁法                          发展（Growing）或加锁阶段              收缩（Shrinking）或放缩阶段                                          备份与恢复：保证数据库的可靠性和完整性      数据丢失的途经：计算机硬件故障、计算机软件故障、病毒、认为误操作、自然灾害、盗窃        概念：数据备份通过数据导出数据或复制表文件的方式来制作数据的副本；数据库的恢复是以备份为基础的，与备份相对应的系统维护和管理操作        操作     SELECT * FROM mysql_test.customers INTO OUTFILE '/opt/work/backupfile.txt' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY \"\" LINES TERMINATED BY '?';        需要注意：多个用户使用数据库情况下，为了得到一个一致的备份，需要在指定表上使用lock tables table name read 语句做一个读锁定，为防止其他用户更新，而当恢复时，则需要使用lock tables，table name write语句做一个写锁定，以避免发生数据冲突，数据库备份或恢复完毕之后，需要使用unlock tables 语句对该表进行解锁  第七章数据库应用设计与开发实例第八章数据库管理技术的发展"
  },
  
  {
    "title": "Golang 锁",
    "url": "/blog.github.io/posts/Lock/",
    "categories": "Server",
    "tags": "golang, GoAdvanced, GoUtils",
    "date": "2019-12-12 22:58:36 +0800",
    





    "snippet": "锁  sync 包中Locker 提供互斥锁（Mutex）和读写锁（RWMutex）  为什么要锁                    ` go run test1.go        sort        uniq        wc -l 会发现下面代码明明是递增 但是结果会出现最后可能不是999`            package mainimport (\t\"fmt\"\t\"time\")func main() {\tvar a = 0\tfor i := 0; i &lt; 999; i++ {\t\tgo func(idx int) {\t\t\ta += 1\t\t\tfmt.Println(a)\t\t}(i)\t}\ttime.Sleep(time.Second)}  怎么解决以上问题  可是使用锁来实现package mainimport (\t\"fmt\"\t\"sync\"\t\"time\")func main() {\tvar a = 0\tvar lock sync.Mutex\tfor i := 0; i &lt; 999; i++ {\t\tgo func(idx int) {\t\t\tlock.Lock()\t\t\tdefer lock.Unlock()\t\t\ta += 1\t\t\tfmt.Println(a)\t\t}(i)\t}\t// 等待 1s 结束主程序\t// 确保所有协程执行完\ttime.Sleep(time.Second)}互斥锁（Mutex）  只能有一个线程占用资源，其他线程只能等待package mainimport (\t\"fmt\"\t\"sync\")var mutex sync.Mutexfunc printFunc(str string) {\tmutex.Lock()\tdefer mutex.Unlock()\tfor _, data := range str {\t\tfmt.Printf(\"%c\", data)\t}\tfmt.Println()}func main() {\tvar waitGroup sync.WaitGroup\twaitGroup.Add(2)\tgo func() {\t\tdefer waitGroup.Done()\t\tprintFunc(\"hello\")\t}()\tgo func() {\t\tdefer waitGroup.Done()\t\tprintFunc(\"world\")\t}()\twaitGroup.Wait()}读写锁（RWMutex）读写  写操作的锁定和解锁          func (*RWMutex) Lock      func (*RWMutex) Unlock        读操作的锁定和解锁          func (*RWMutex) Rlock      func (*RWMutex) RUnlock      前言  当有一个 goroutine 获得写锁定，其它无论是读锁定还是写锁定都将阻塞直到写解锁；当有一个 goroutine 获得读锁定，其它读锁定仍然可以继续；当有一个或任意多个读锁定，写锁定将等待所有读锁定解锁之后才能够进行写锁定。所以说这里的读锁定（RLock）目的其实是告诉写锁定：有很多人正在读取数据，你给我站一边去，等它们读（读解锁）完你再来写（写锁定）。我们可以将其总结为如下三条：  同时只能有一个 goroutine 能够获得写锁定  同时可以有任意多个 gorouinte 获得读锁定  同时只能存在写锁定或读锁定（读和写互斥）package mainimport (\t\"fmt\"\t\"sync\"\t\"time\")var str = \"Hello World\"var rw sync.RWMutexfunc main() {\tgo func() {\t\tfor i := 0; i &lt; 100; i++ {\t\t\tread()\t\t}\t}()\tgo func() {\t\tfor i := 0; i &lt; 1; i++ {\t\t\twrite(\"write\")\t\t}\t}()\ttime.Sleep(time.Second * 2)}// 读func read() {\trw.RLock()\tdefer rw.RUnlock()\tfmt.Println(\"读\", str)}// 写func write(n string) {\trw.Lock()\tdefer rw.Unlock()\tstr += \"no HelloWorld \" + n\tfmt.Println(\"写\", str)\tfor i := 0; i &lt; 100; i++ {\t\tfmt.Println(\"在写入请等下\")\t}}"
  },
  
  {
    "title": "Golang面试",
    "url": "/blog.github.io/posts/Interview/",
    "categories": "Me",
    "tags": "",
    "date": "2019-12-11 22:58:36 +0800",
    





    "snippet": "20191211redis  redis 数据类型          string      hash      list      set        数据类型一般应用场景  redis持久化  redis 与 mongoDB 区别          redis 支持事务（），mongoDB 不支持      redis适合做缓存读写速度忧，mongoDb 适合大数据存储      基础  数据类型转换          interface 传位置struct        协程          https://www.jianshu.com/p/4ae2281927d7      怎么让协程永久运行这里      协程的基本使用        锁机制  反射  基础语法          切片      结构体      转换      区块链学习other  离职原因          1、职业规划问题，在企业无法实现我的个人职业生涯计划      2、个人成长问题，我处在的位置发展空间不大      3、企业发展慢，我在企业待了较长时间，而企业发展较慢，无法吸收我新的养分，        自我介绍  项目介绍nginxhttps://blog.csdn.net/qq_22978533/article/details/58601139  静态服务  反向代理  负载均衡beego 框架使用  orm          原理      举例：银行转帐，在关联表情况下删除信息      事物      mysql  https://www.cnblogs.com/hsmwlyl/p/10719152.html  索引          索引是对数据库表中一列或多列的值进行排序的一种结构        mysql 优化          参考连接                  https://www.nowcoder.com/discuss/150059?type=0&amp;order=0&amp;pos=13&amp;page=0                    字段设计      表关联      储存引擎      适当加入索引      查询语句优化                  避免使用select *          尽量count *          查询一条时使用 limit 1          查询精确到目标字段                    linux 操作命令公司面试      写出HTTP 协议中你熟悉的几种状态码以及含义，499是什么状态码          200 请求成功      302 重定向      400 错误请求      401 未授权      403 已禁止      404 未找到      502 网关错误      503 服务不可用      504 网关超时      499 服务端处理时间过长，客户端断开连接            如何防范SQL注入          https://www.cnblogs.com/mafeng/p/6207988.html              校验用户输入的数据（strconv、正则判断）      在应用发布前 只用sql 注入工具进行检测      查询语句使用参数化查询，不用输入的变量直接嵌入到SQL语句中            把文件夹/home/interview里面包含有关键字yunke 的文件和行列出，如果可以，上下一行一起列出 grep -RnC 2 “yunke” /home/interview/        二叉树          B            Redis的常见的数据类型有哪些，请描述不同的类型使用常见          string（字符串）计数、获取验证码      hash（字典）用户基本信息、应用目录      list（列表链表）单个列表型结构，可以实现轻量级的消息队列 生产者push ,消费者pop/bpop      set（集合）唯一类型的标签、朋友名单      sorted set（有序集合）用户游戏分数排行榜            tcp协议udp协议有什么区别，请画出tcp三次握手的示意图          tcp面向连接，udp面向无连接      系统资源要求（tcp多，udp少）      udp数据结构简单      tcp保证数据准确性，udp 有可能丢包      tcp流模式,udp数据报模式示意图：             innoDB的行级别锁的实现方式（需要具备什么条件，不然会出现表锁） mysql 语句必须使用索引，如果没索引就会出现表锁        写出以下go代码的输出结果    runtime.GOMAXPROCS(runtime.NumCPU())    wg := sync.WaitGroup{}    wg.Add(12)    for i := 0; i &lt;= 6; i++ {        go func() {            fmt.Println(\"T1：\", i)        }()    }    for i := 0; i &lt;= 6; i++ {        go func(i int) {            fmt.Println(\"T2：\", i)            wg.Done()        }(i)    }    //wg.Wait() // 会出现异常        T1 会随机输出 T2 有序输出 最后会异常 死锁状态        Go 的引用类型有哪些？为什么          slice、map、channel、指针      变量存储的是一个地址，这个地址存储最终的值。内存通常在 堆上分配。通过GC回收            熟悉的设计模式有哪些？并简要写明一个设计模式          工厂模式      抽象模式      单例模式            一个有序列1，1，2，3，5，8，13，21 ，。。。。请识别这个有序列的规律，并用递归写一个求第n位的值的函数（默认从0开始）        在电商的秒杀商品场景中，怎样考虑高并发（1000并发）下的性能和库存量的准确性          静态资源优化（html，CSS）      使用队列，减少系统处理的峰值      请求处理      对数据库采用数据锁机制            什么内存溢出？请编写一段造成溢出的Go程序，并简述说明原因                  堆栈超过100000000字节的限制        func Max(a, b int) int {    if false {        return Max(a, b)    } else {        return Max(a, b)    }}    func main() {    fmt.Println(Max(1, 2))}                          监控发现流量暴增（来自用户正常流量和非法流量），同时server的memory持续增长，cpu虽有增高，单一直没有打满，tcp连接数也居高不下，通过工具发现，runtime.gcBgMarkWorker、runtime.mellocgc开销较大，请问遇到这种情况，应该怎么定位问题，去尝试分析，并写出可能为问题（可以多个可能），并写出每个可能出现问题的方案          调用第三方数据中心时可以grpc或者rpc      校验用户来访限制      使用采用gc池      "
  },
  
  {
    "title": "Go 1.12 版本更新 摘要",
    "url": "/blog.github.io/posts/go-1.12/",
    "categories": "Server",
    "tags": "golang, GoAdvanced, GoUtils",
    "date": "2019-12-06 17:11:22 +0800",
    





    "snippet": "go mod 1.12 学习go modules(check version)检查 golang 版本如果没有生成 go.sum 或者报错请输入export GOPROXY=https://goproxy.ioC:\\Users\\admin&gt;go versiongo version go1.12.9 windows/amd64把 golang 升级到 1.11（现在1.12 已经发布了，建议使用1.12）设置 GO111MODULEGO111MODULEGO111MODULE 有三个值：off, on和auto（默认值）。GO111MODULE=off，go命令行将不会支持module功能，寻找依赖包的方式将会沿用旧版本那种通过vendor目录或者GOPATH模式来查找。GO111MODULE=on，go命令行会使用modules，而一点也不会去GOPATH目录下查找。GO111MODULE=auto，默认值，go命令行将会根据当前目录来决定是否启用module功能。这种情况下可以分为两种情形：当前目录在GOPATH/src之外且该目录包含go.mod文件当前文件在包含go.mod文件的目录下面。当modules 功能启用时，依赖包的存放位置变更为$GOPATH/pkg，允许同一个package多个版本并存，且多个项目可以共享缓存的 module。命令说明downloaddownload modules to local cache(下载依赖包)editedit go.mod from tools or scripts（编辑go.modgraphprint module requirement graph (打印模块依赖图)initinitialize new module in current directory（在当前目录初始化mod）tidyadd missing and remove unused modules(拉取缺少的模块，移除不用的模块)vendormake vendored copy of dependencies(将依赖复制到vendor下)verifyverify dependencies have expected content (验证依赖是否正确）whyexplain why packages or modules are needed(解释为什么需要依赖)实例  在GOPATH 目录之外新建一个目录cd /opt/gomod/hellogo mod init hello[root@iz2zeb00z6vr5gix5utl11z hello]# go run server.gogo: finding github.com/labstack/echo v3.3.10+incompatiblego: downloading github.com/labstack/echo v3.3.10+incompatiblego: downloading golang.org/x/sys v0.0.0-20190813064441-fde4db37ae7ago: extracting github.com/valyala/fasttemplate v1.0.1go: downloading github.com/valyala/bytebufferpool v1.0.0go: extracting github.com/valyala/bytebufferpool v1.0.0go: extracting golang.org/x/sys v0.0.0-20190813064441-fde4db37ae7ago: finding golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3go: finding golang.org/x/text v0.3.0   ____    __  / __/___/ /  ___ / _// __/ _ \\/ _ \\/___/\\__/_//_/\\___/ v3.3.10-devHigh performance, minimalist Go web frameworkhttps://echo.labstack.com____________________________________O/_______                                    O\\⇨ http server started on [::]:8080[root@iz2zeb00z6vr5gix5utl11z hello]# cat go.modmodule hellogo 1.13require (        github.com/labstack/echo v3.3.10+incompatible // indirect        github.com/labstack/gommon v0.3.0 // indirect        golang.org/x/crypto v0.0.0-20191119213627-4f8c1d86b1ba // indirect)[root@iz2zeb00z6vr5gix5utl11z hello]# cat go.sumgithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=github.com/labstack/echo v3.3.10+incompatible h1:pGRcYk231ExFAyoAjAfD85kQzRJCRI8bbnE7CX5OEgg=github.com/labstack/echo v3.3.10+incompatible/go.mod h1:0INS7j/VjnFxD4E2wkz67b8cVwCLbBmJyDaka6Cmk1s=golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/sys v0.0.0-20190813064441-fde4db37ae7a h1:aYOabOQFp6Vj6W1F80affTUvO9UxmJRx8K0gsfABByQ=golang.org/x/sys v0.0.0-20190813064441-fde4db37ae7a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=golang.org/x/text v0.3.0 h1:g61tztE5qeGQ89tm6NTjjM9VPIm088od1l6aSorWRWg=golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=    go.mod 提供了module, require、replace和exclude 四个命令    module 语句指定包的名字（路径）    require 语句指定的依赖项模块    replace 语句可以替换依赖项模块    exclude 语句可以忽略依赖项模块重新构建go mod init: go.mod already existsGo.mod已经存在"
  },
  
  {
    "title": "MySQL 锁",
    "url": "/blog.github.io/posts/MySQL-lock/",
    "categories": "SystemUtils",
    "tags": "Mysql",
    "date": "2019-09-18 12:21:48 +0800",
    





    "snippet": "MySQL 锁  表级锁 和 行级锁mysql&gt; show tables;+----------------+| Tables_in_test |+----------------+| mylock         || test           |+----------------+2 rows in set (0.03 sec)表锁  表锁有两种  元数据锁（Meta Data Lock，MDL）查询争用状态变量show status like 'table_locks%';+-----------------------+-------+| Variable_name         | Value |+-----------------------+-------+| Table_locks_immediate | 104   || Table_locks_waited    | 0     |+-----------------------+-------+2 rows in set (0.04 sec)  Table_locks_immediate：产生表级锁定的次数      Table_locks_waited：出现表级锁定争用而发生等待的请求数    #### 表锁两种形式lock table 表名称1 read(write)    开启read 其他 select ...  可以查但是不能修改会自动加入行锁  开启write  其他select ....  会查询锁住  表共享读锁（Table Read Lock）1、session1: lock table mylock read; – 给mylock表加读锁2、session1: select * from mylock; – 可以查询3、session1：select * from tdep; –不能访问非锁定表(1100 - Table 'test' was not locked with LOCK TABLES)4、session2：select * from mylock; – 可以查询 没有锁5、session2：update mylock set name='x' where id=2; – 修改阻塞,自动加行写锁6、session1：unlock tables; – 释放表锁7、session2：Rows matched: 1 Changed: 1 Warnings: 0 – 修改执行完成8、session1：select * from tdep; --可以访问  表独占写锁（Table Write Lock）1、session1: lock table mylock write; – 给mylock表加写锁2、session1: select * from mylock; – 当前session可以查询3、session1：select * from tdep; –不能访问非锁定表4、session1：update mylock set name='y' where id=2; --可以执行5、session2：select * from mylock; – 查询阻塞6、session1：unlock tables; – 释放表锁7、session2：4 rows in set (22.57 sec) – 查询执行完成8、session1：select * from tdep; --可以访问  元数据锁（MDL）MetaDataLock          简单讲就是数据库存储的数据或者表结构，可以通过 show或者 select 来查看 ，但是元数据锁 在mysql5.5引进的对metadata 对事务级别保护，5.5 之前是语句级别。所谓语句级别，即语句执行完成后，无论事务是否提交或回滚，其表结构可以被其他会话更新；而事务级别则是在事务结束后才释放MDL，引进MDL主要解决两个问题            一个是事务隔离问题，比如在可重复隔离级别下，会话A在2次查询期间，会话B对表结构做了修改，两次查询结果就会不一致，无法满足可重\t复读的要求；        另外一个是数据复制的问题，比如会话A先执行了更新语句期间，另外一个会话B做了表结构变更并且先提交，就会导致slave在重做时，先重做alter，再重做update时就会出现复制错误的现象  1、session1: begin;–开启事务select * from mylock;–加MDL读锁2、session2: alter table mylock add f int; – 修改阻塞3、session1：commit; --提交事务 或者 rollback 释放读锁4、session2：Query OK, 0 rows affected (38.67 sec) --修改完成行锁(InnoDB)按照范围分类  记录锁、间隙锁、Next-Key锁  记录锁（Record Locks）:锁定索引中一条记录。 例如主键或唯一索引等值条件指定 where id=3  间隙锁（Gap Locks）: 锁定索引记录之间的间隙，或者是某一条记录之前和之后加锁，该机制主要为了解决幻读问题。  Next-Key 锁: 记录锁 + 间隙锁，RR隔离级下默认使用Next-Key锁，即锁定当前记录也锁定记录间隙。按照功能分类  共享读锁（S）、排他写锁（X）      共享读锁（行读锁）                  行级锁        1、session1: begin;--开启事务未提交  \tselect * from mylock  where id=1 lock in share mode; --手动加id=1的行读锁,使用索引2、session2：update mylock set name='y' where id=2; -- 未锁定该行可以修改3、session2：update mylock set name='y' where id=1; -- 锁定该行修改阻塞ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction -- 锁定超时4、session1: commit; --提交事务 或者 rollback 释放读锁5、session2：update mylock set name='y' where id=1; --修改成功                    行级锁升级为表锁（未使用索引行锁升级为表锁）          1、session1: begin;--开启事务未提交    \tselect * from mylock  where id=1 lock in share mode; --手动加id=1的行读锁,使用索引  2、session2：update mylock set name='y' where id=2; -- 未锁定该行可以修改  3、session2：update mylock set name='y' where id=1; -- 锁定该行修改阻塞  ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction   -- 锁定超时  4、session1: commit; --提交事务 或者 rollback 释放读锁  5、session2：update mylock set name='y' where id=1; --修改成功                  排他写锁（行写锁）行产生写锁时，在MVCC下仍然可读，因为MVCC下的select读不需要获取锁（无锁），所以不会阻塞    1、session1: begin;--开启事务未提交      --手动加id=1的行写锁,      select * from mylock  where id=1 for update;2、session2：select * from mylock  where id=2 ; -- 可以访问3、session2: select * from mylock  where id=1 ; -- 可以读 不加锁 4、session2: select * from mylock  where id=1 lock in share mode ; -- 加读锁被阻塞5、session1：commit; -- 提交事务 或者 rollback 释放写锁5、session2：执行成功        间隙锁    在索引记录之间的间隙中加锁，或者是在某一条索引记录之前或者之后加锁，并不包括该索引记录本身。gap lock的机制主要是解决可重复读模式下的的幻读问题死锁  两个session 互相等待 对方资源释放之后才能释放自己资源造成死锁1、session1: begin;--开启事务未提交      --手动加行写锁 id=1 ，使用索引      update mylock set name='m' where id=1;2、session2：begin;--开启事务未提交--手动加行写锁 id=2 ，使用索引      update mylock set name='m' where id=2;   3、session1: update mylock set name='nn' where id=2; -- 加写锁被阻塞4、session2：update mylock set name='nn' where id=1; -- 加写锁会死锁，不允许操作ERROR 1213 (40001): Deadlock found when trying to get lock; try restartingtransaction避免死锁越是轻量的事务，占有越少的锁资源，这样发生死锁的几率就越小1.避免使用子查询，尽量使用主键等等，以提高SQL运行速度2.尽量快提交事务，减少持有锁的时间"
  },
  
  {
    "title": "docker 实战",
    "url": "/blog.github.io/posts/docker-usr/",
    "categories": "SystemUtils",
    "tags": "Docker",
    "date": "2019-09-03 12:48:54 +0800",
    





    "snippet": "docker 实战docker 基本命令  docker 操作基础命令      docker images    docker image ls    docker ps    docker ps -a    docker stop [CONTAINER ID]    docker rm [CONTAINER ID]    docker restart [CONTAINER ID]    docker start [CONTAINER ID]    docker rm [CONTAINER ID]    docker rmi [IMAGE ID]    docker logs [CONTAINER ID]    docker login –username=[hypeyhyper] [registry.cn-hangzhou.aliyuncs.com]    docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/chaochengli/tcpserverandcluster:[镜像版本号]    docker push registry.cn-hangzhou.aliyuncs.com/chaochengli/tcpserverandcluster:[镜像版本号]    docker pull registry.cn-hangzhou.aliyuncs.com/chaochengli/tcpserverandcluster:[镜像版本号]  Dockerfile  FORM  MAINTAINER  RUN  CMD  EXPOSE  ADD  COPY  ENTRYPOINT  VOLUME  USER  WORKDIR  ONBUILDFORMFROM baseImage、FORM &lt;image&gt;  FROM指定构建镜像的基础源镜像，如果本地没有指定的镜像，则会自动从 Docker 的公共库 pull 镜像下来。  FROM必须是 Dockerfile 中非注释行的第一个指令，即一个 Dockerfile 从FROM语句开始。  FROM可以在一个 Dockerfile 中出现多次，如果有需求在一个 Dockerfile 中创建多个镜像。  如果FROM语句没有指定镜像标签，则默认使用latest标签。MAINTAINERMAINTAINER &lt;name&gt; &lt;email&gt; MAINTAINER Cc \"li_chao_cheng@163.com\"  注： 描述镜像的创建者，名称和邮箱RUNRUN commandRUN [\"./shart.sh\", \"dev\", \"offline\"]# 等价于 RUN ./shart.sh dev offline  注：用于执行后面跟着的命令行命令两种格式 shell 和execRUN yum install wgetRUN wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\"RUN tar -xvf redis.tar.gz# 以上执行会创建 3 层镜像。可简化为以下格式：FROM centosRUN yum install wget \\    &amp;&amp; wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\" \\    &amp;&amp; tar -xvf redis.tar.gzCMD  CMD  \"executable\",\"param1\",\"param2\"  CMD  \"param1\",\"param2\"  CMD command param1 param2 (shell form)          CMD指定在 Dockerfile 中只能使用一次，如果有多个，则只有最后一个会生效。      CMD的目的是为了在启动容器时提供一个默认的命令执行选项。如果用户启动容器时指定了运行的命令，则会覆盖掉CMD指定的命令。      CMD会在启动容器的时候执行，build 时不执行，而RUN只是在构建镜像的时候执行，后续镜像构建完成之后，启动容器就与RUN无关了      ENV# 为我们的镜像设置必要的环境变量 以及可以设置常量ENV GO111MODULE=on \\\tCGO_ENABLED=0 \\    GOOS=linux \\    GOARCH=amd64EXPOSEEXPOSE &lt;port&gt; [&lt;port&gt;...]  告诉 Docker 服务端容器对外映射的本地端口，可以指定tcp 或者udp 需要在 docker run 的时候使用-p或者-P选项生效。LABELENV key=value# 注释LABEL author=\"Cc360428\"LABEL version=\"V1.1\"COPY and ADD  ADD  COPY指令能够将构建命令所在的主机本地的文件或目录，复制到镜像文件系统。  ADD允许``是一个URL，是一个常见的压缩格式，如tar.gz。那么它会被解压。COPY source destADD &lt;src&gt;... &lt;dest&gt;WORKDIRWORKDIR /the/workdir/pathENTRYPOINTENTRYPOINT [\"top\",\"-b\", \"-H\"]ENTRUPOINT and CMD  ENTRYPOINT指令，往往用于设置容器启动后的第一个命令，这对一个容器来说往往是固定的。  CMD指令，往往用于设置容器启动的第一个命令的默认参数，这对一个容器来说可以是变化的。  docker run 往往用于给出替换CMD的临时参数    创建 Dockerfile    创建main.go 执行 go mod init dockerhttppackage mainimport (        \"fmt\"        \"net/http\")func main() {        http.HandleFunc(\"/\", hello)        server := &amp;http.Server{                Addr: \":8888\",        }  fmt.Println(\"server startup...\")        if err := server.ListenAndServe(); err != nil {                fmt.Printf(\"server startup failed, err:%v\\n\", err)        }}func hello(w http.ResponseWriter, _ *http.Request) {        w.Write([]byte(\"docker http yes Cc36048!\"))}  创建Dockerfile# 使用Go的官方映像作为基础映像。这个映像是alpine预安装的。该映像的$GOPATH值已被设置为/go。所有安装在/go/src的程序包都能通过go命令访问。FROM golang:alpine# 注释LABEL author=\"Cc360428\"LABEL version=\"V1.1\"# 为我们的镜像设置必要的环境变量ENV GO111MODULE=on \\    CGO_ENABLED=0 \\    GOOS=linux \\    GOARCH=amd64# 移至工作目录，存在侧移动到此目录，不存在侧创建次目录WORKDIR /opt# 使用 pwd 查看所在当前目录位置COPY . .RUN pwdRUN go mod tidy RUN go build -o imagesServer .# 通过开发计算机上容器的8888端口暴露该应用程序。最后一行，EXPOSE 8888/tcpENTRYPOINT [\"/opt/imagesServer\"]  docker build  进入项目目录下，docker build . -o imagesname   但是需要小写，使用docker 仓库时需要与创库一致  docker run          -dit 交互运行      -P 运行端口与宿主机端口映射        docker run -dit -p 8888:8888  [IMAGE ID]docker run -it --name tcpserver -p 8502:8502 -v /opt/gomod/tcpserver:/go/src/c360428/tcpserver -w /go/src/ningshb/tcpserver tcpserverdocker run -it --name docker_cc -p 8502:8502 -v /opt/gopath/src/Cc360428/docker_cc:/go/src/Cc360428/docker_cc -w /go/src/Cc360428/docker_cc docker_ccdocker Error[root@iz2zeb00z6vr5gix5utl11z ~]# docker imagesCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?  上述错误可能是没有启动docker  [root@iz2zeb00z6vr5gix5utl11z ~]# service docker startRedirecting to /bin/systemctl start docker.service[root@iz2zeb00z6vr5gix5utl11z ~]# docker images;REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE[root@iz2zeb00z6vr5gix5utl11z ~]#  导入导出  导出tardocker  save -o name.tar tcpserver:latestdocker run --name beegoview -d -p 8380:8380 beegoview:latestcontainerdocker container ls -f “status=exited”docker rm $(docker container ls -f \"status=exited\" -p)安装可视化界面  参考[root@Cc ~]# docker run -d -p 9000:9000 \\&gt;     --restart=always \\&gt;     -v /var/run/docker.sock:/var/run/docker.sock \\&gt;     --name prtainer-test \\&gt;     portainer/portainerUnable to find image 'portainer/portainer:latest' locallylatest: Pulling from portainer/portainerd1e017099d17: Pull complete a7dca5b5a9e8: Pull complete Digest: sha256:4ae7f14330b56ffc8728e63d355bc4bc7381417fa45ba0597e5dd32682901080Status: Downloaded newer image for portainer/portainer:latest5742748f575e316b07cdeab8cf4746891179e2ea1169f824336d234ce295e933  填写用户名和密码  选择local即可"
  },
  
  {
    "title": "TCP/IP",
    "url": "/blog.github.io/posts/tcpip/",
    "categories": "ComputerBasics",
    "tags": "network",
    "date": "2019-08-22 12:48:54 +0800",
    





    "snippet": "TCP/IP  TCP/IP 在传输层连个不同协议，传输控制协议(TCP)、用户数据协议(UDP)TCP——UDP  TCP数据传输单位TCP报文段，UDP数据传输单位UDP报文或者用户数据报  TCP面向连接，UDP面向无连接  TCP高度可靠，UDP不能保证数据可靠性传输  TCP复杂性因此开销大，UDP简单性具有较高的传输效率TCP  传输控制协议，面向连接，可靠。一旦数据报被破坏或丢失将会重新传输，TCP 会检测传输错误并予修正，可靠全双工数据传输协议服务主要功能  数据流的多路复用  检测数据段完整性  重新排序  流量监控  复杂的时钟机制  高校的确认方式TCP 报文  端口号：用来标识同一台计算机的不同的应用进程          源端口：源端口和IP地址的作用是标识报文的返回地址      目的端口：端口指明接收方计算机上的应用程序接口        发送序列号  确认号  报头长度  预留  编码位          URG：紧急指针      ACK：确认号有效      PSH：要求接收端尽快将这个报文交给应用层      RST：复位一个TCP连接      SYN：同步序列号用于建立连接      FIN：发送端完成任务并要求终止传输        窗口  紧急指针  选项  填充  数据TCP三次握手      客户端发送—————————–SYN，seq=x—————————————&gt;服务端          SYS（同步信号）、seq（生成序列号）            客户端&lt;—————————SYN，ACK=X+1，seq=y————————服务端发送          SYS（同步信号）、ACK（客户端发送序列号加随机数）、seq（生成序列号）            客户端发送————————–SYN，ACK=y+1———————————–&gt;服务端          SYS（同步信号）、ACK（服务端发送发送序列号加随机数）、seq（生成序列号）      四次挥手      客户端发送———————FIN，ACK—————————-&gt;服务端          FIN（终止传输）、ACK（确认收到最后一个包）            客户端&lt;————————–ACK————————————-服务端发送          ACK（确认收到）            客户端&lt;————————–FIN————————————–服务端发送          FIN（终止发送）            客户端发送———————-ACK———————————–&gt;服务端          ACK（确认终止发送）      UDP"
  },
  
  {
    "title": "IP协议",
    "url": "/blog.github.io/posts/ip/",
    "categories": "ComputerBasics",
    "tags": "network",
    "date": "2019-08-21 12:48:54 +0800",
    





    "snippet": ""
  },
  
  {
    "title": "HTTP协议",
    "url": "/blog.github.io/posts/http/",
    "categories": "ComputerBasics",
    "tags": "network",
    "date": "2019-08-20 12:48:54 +0800",
    





    "snippet": "HTTP协议  Hyper Text Transfer Protocol 超文本传输协议  http 消息结构体、请求方法、响应头信息、状态码、content-type  http 版本：HTTP/0.9、HTTP/1.0、HTTP/1.1、HTTP/2.0消息结构体      客户端            服务端      请求方法  HTTP/1.0：GET、 POST 、 HEAD  HTTP/1.1：增加了OPTIONS、PUT、PATCH、DELETE、TRACE 、 CONNECT            序号      方法      描述                  1      GET      请求指定的页面信息，并返回实体主体。              2      HEAD      类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头              3      POST      向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。              4      PUT      从客户端向服务器传送的数据取代指定的文档的内容。              5      DELETE      请求服务器删除指定的页面。              6      CONNECT      HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。              7      OPTIONS      允许客户端查看服务器的性能。              8      TRACE      回显服务器收到的请求，主要用于测试或诊断。              9      PATCH      是对 PUT 方法的补充，用来对已知资源进行局部更新 。      响应头信息            应答头      说明                  Allow      服务器支持哪些请求方法（如GET、POST等）。              Content-Encoding      文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。              Content-Length      表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。              Content-Type      表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。              Date      当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。              Expires      应该在什么时候认为文档已经过期，从而不再缓存它？              Last-Modified      文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。              Location      表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。              Refresh      表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL=http://host/path”)让浏览器读取指定的页面。 注意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV=”Refresh” CONTENT=”5;URL=http://host/path”＞实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。  注意Refresh的意义是”N秒之后刷新本页面或访问指定页面”，而不是”每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是＜META HTTP-EQUIV=”Refresh” …＞。  注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。              Server      服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。              Set-Cookie      设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。              WWW-Authenticate      客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=＼”executives＼””)。 注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。      状态码  状态码分类            分类      分类描述                  1**      信息，服务器收到请求，需要请求者继续执行操作              2**      成功，操作被成功接收并处理              3**      重定向，需要进一步的操作以完成请求              4**      客户端错误，请求包含语法错误或无法完成请求              5**      服务器错误，服务器在处理请求的过程中发生了错误        状态码列表            状态码      状态码英文名称      中文描述                  100      Continue      服务器收到了请求的初始部分，并且请客户端继续发送              101      Switching Protocols      切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议。扩展（http 请求 websocket 就会提升切换成101）                                           200      OK      请求成功。一般用于GET与POST请求              201      Created      已创建。成功请求并创建了新的资源              202      Accepted      已接受。已经接受请求，但未处理完成              203      Non-Authoritative Information      非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本              204      No Content      无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档              205      Reset Content      重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域              206      Partial Content      部分内容。服务器成功处理了部分GET请求                                           300      Multiple Choices      多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择              301      Moved Permanently      永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替              302      Found      临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI              303      See Other      查看其它地址。与301类似。使用GET和POST请求查看              304      Not Modified      未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源              305      Use Proxy      使用代理。所请求的资源必须通过代理访问              306      Unused      已经被废弃的HTTP状态码              307      Temporary Redirect      临时重定向。与302类似。使用GET请求重定向                                           400      Bad Request      客户端请求的语法错误，服务器无法理解              401      Unauthorized      请求要求用户的身份认证              402      Payment Required      保留，将来使用              403      Forbidden      服务器理解请求客户端的请求，但是拒绝执行此请求              404      Not Found      服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面              405      Method Not Allowed      客户端请求中的方法被禁止              406      Not Acceptable      服务器无法根据客户端请求的内容特性完成请求              407      Proxy Authentication Required      请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权              408      Request Time-out      服务器等待客户端发送的请求时间过长，超时              409      Conflict      服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突              410      Gone      客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置              411      Length Required      服务器无法处理客户端发送的不带Content-Length的请求信息              412      Precondition Failed      客户端请求信息的先决条件错误              413      Request Entity Too Large      由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息              414      Request-URI Too Large      请求的URI过长（URI通常为网址），服务器无法处理              415      Unsupported Media Type      服务器无法处理请求附带的媒体格式              416      Requested range not satisfiable      客户端请求的范围无效              417      Expectation Failed      服务器无法满足Expect的请求头信息                                           500      Internal Server Error      服务器内部错误，无法完成请求              501      Not Implemented      服务器不支持请求的功能，无法完成请求              502      Bad Gateway      作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应              503      Service Unavailable      由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中              504      Gateway Time-out      充当网关或代理的服务器，未及时从远端服务器获取请求              505      HTTP Version not supported      服务器不支持请求的HTTP协议的版本，无法完成处理      content-type  媒体格式类型          text/html ： HTML格式      text/plain ：纯文本格式      text/xml ： XML格式      image/gif ：gif图片格式      image/jpeg ：jpg图片格式      image/png：png图片格式        application开头的媒体格式          application/xhtml+xml ：XHTML格式      application/xml： XML数据格式      application/atom+xml ：Atom XML聚合格式      application/json： JSON数据格式      application/pdf：pdf格式      application/msword ： Word文档格式      application/octet-stream ： 二进制流数据（如常见的文件下载）      application/x-www-form-urlencoded ： &lt;form encType=\"\"&gt;中默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）      "
  },
  
  {
    "title": "物理层",
    "url": "/blog.github.io/posts/bit/",
    "categories": "ComputerBasics",
    "tags": "network",
    "date": "2019-08-19 12:48:54 +0800",
    





    "snippet": "物理层"
  },
  
  {
    "title": "网络基础",
    "url": "/blog.github.io/posts/NetworkEngineerBase/",
    "categories": "ComputerBasics",
    "tags": "network",
    "date": "2019-08-18 12:48:54 +0800",
    





    "snippet": "计算机网络基础OSI与TCP/IPOSITCP/IP物理层  网络接口网际层  IP协议：主要的网际层协议，用于网络互联  ICMP协议：报文协议，用于报告差错，向路由器主机发送差错报文  ARP协议：地址解析协议，用于将IP 解析成物理地址  RARP协议：逆地址协议，物理地址解析到IP地址运输层  TCP：传输控制协议是面向连接协议，提供可靠的主机到主机的数据传输服务。保证数据传输的可靠性、无差错、不丢失、无重复的按序到达  UDP：面向无连接，不可靠的端对端的数据传输服务，UDP减少很多额外开销，因此传输效率高应用层  TELNET  FTP：文件传输协议，用于主机与主机之间文件上传下载  SMTP：邮件传输协议，用于电子邮件  DNS：域名解析协议"
  },
  
  {
    "title": "Golang Gin",
    "url": "/blog.github.io/posts/Gin-bast/",
    "categories": "GoWebServer",
    "tags": "golang, GoWeb, Gin",
    "date": "2019-07-07 13:21:03 +0800",
    





    "snippet": "构建  安装Gin环境go get -u github.com/gin-gonic/gin  安装Gin 工具go get github.com/kardianos/govendorgin_demo  创建文件mkdir gin_demo  初始化构建gingovendor initgovendor fetch github.com/gin-gonic/gin@v1.3  Hello World Ginpackage mainimport (\t\"net/http\"\t\"github.com/gin-gonic/gin\")func setupRouter() *gin.Engine {\tr := gin.Default()\tr.GET(\"/\", func(c *gin.Context) {\t\tc.String(http.StatusOK, \"Hello World Gin\")\t})\treturn r}func main() {\tr := setupRouter()\t_ = r.Run(\":9999\")}"
  },
  
  {
    "title": "Beego Base",
    "url": "/blog.github.io/posts/base-beego/",
    "categories": "Server",
    "tags": "golang, GoWeb, beego",
    "date": "2019-05-06 15:21:24 +0800",
    





    "snippet": "下载安装安装环境go get github.com/astaxie/beego安装bee 工具go get github.com/beego/bee"
  },
  
  {
    "title": "Golang 算法",
    "url": "/blog.github.io/posts/algorithm/",
    "categories": "Server",
    "tags": "golang, GoAdvanced, GoUtils",
    "date": "2019-04-29 22:58:36 +0800",
    





    "snippet": "算法  常见的算法有"
  },
  
  {
    "title": "Day12（反射）",
    "url": "/blog.github.io/posts/reflect/",
    "categories": "Server",
    "tags": "golang, GoBase",
    "date": "2019-04-28 21:04:03 +0800",
    





    "snippet": "反射"
  },
  
  {
    "title": "Day12（Time）",
    "url": "/blog.github.io/posts/time/",
    "categories": "Server",
    "tags": "golang, GoBase",
    "date": "2019-04-28 14:19:29 +0800",
    





    "snippet": "时间包"
  },
  
  {
    "title": "Day11（并发编程）",
    "url": "/blog.github.io/posts/Concurrent/",
    "categories": "Server",
    "tags": "golang, GoBase",
    "date": "2019-04-27 09:19:29 +0800",
    





    "snippet": "并发编程goroutine  时间片轮转以及调度goroutine  协程 使用 go 关键字创建，并发执行package mainimport (\t\"fmt\"\t\"time\")func task() {\tvar i int\tfor {\t\ti++\t\tfmt.Println(\"new Task\")\t\tif i == 3 {\t\t\tbreak\t\t}\t\ttime.Sleep(time.Second)\t}}func main() {\tgo task()\tvar i int\tfor {\t\ti++\t\tfmt.Println(\"main func\")\t\tif i == 3 {\t\t\tbreak\t\t}\t\ttime.Sleep(time.Second)\t}}new Taskmain funcmain funcnew Taskmain func      主协程退出其他子协程也会退出          下面程序只会打印main      package mainimport \"fmt\"func main(){\tgo func ()  {\t\tfor i := 0; i &lt; 5; i++ {\t\t\tfmt.Println(\"子协程\")\t\t\t}\t}()\tfmt.Println(\"main\")}      runtime工具包          Gosched、Goexit、GOMAXPROCS              Gosched 让出时间片 先让别的协程，执行再执行此协程        package main  import (\t\"fmt\"\t\"runtime\")  func main() {\tgo func() {\t\tfor i := 0; i &lt; 3; i++ {\t\t\tfmt.Println(\"Cc\")\t\t}\t}()\tfor i := 0; i &lt; 2; i++ {\t\truntime.Gosched()\t\tfmt.Println(\"Lcc\")\t}}        CcCcCcLccLcc              Goexit 终止此协程与return 不同后者终止次函数        package main  import (\t\"fmt\"\t\"runtime\"\t\"time\")  func exit() {\tfmt.Println(\"exit a\")\t// return\truntime.Goexit()\tfmt.Println(\"exit b\")}  func main() {\tgo func() {\t\tfmt.Println(\"go func 1\")\t\texit()\t\tfmt.Println(\"go fun 2\")\t}()\t// 等待\ttime.Sleep(time.Second * 5)}        go func 1exit a              GOMAXPROCS指定核数运行   1~4 时打印交叉        package main  import (\t\"fmt\"\t\"runtime\"\t\"time\")  func main() {\truntime.GOMAXPROCS(4)\tfor i := 0; i &lt; 100; i++ {\t\tgo fmt.Print(1)\t\tfmt.Print(0)\t}\ttime.Sleep(time.Second * 2)}      channel  资源竞争共享内存  每使用channel 造成资源竞争和共享内存问题，两个协程同时使用printer打印值会造成不一，不会同步，把相关的ch 注释且可以解决package mainimport (\t\"fmt\"\t\"time\")// var ch = make(chan int)func printer(word string) {\tfor _, v := range word {\t\tfmt.Printf(\"%c\", v)\t\ttime.Sleep(time.Second)\t}}// lcc 打印 titlefunc lcc() {   //  ch &lt;- 1\tprinter(\"title\")}// Cc 打印 wordfunc Cc() {  //  &lt;- ch\tprinter(\"word\")}func main() {\tgo lcc()\tgo Cc()\ttime.Sleep(time.Second * 10)}package mainimport (\t\"fmt\")func main() {\t//创建channel\tch := make(chan string)\tdefer fmt.Println(\"main  end\")\tgo func() {\t\tdefer fmt.Println(\"func end\")\t\tfor i := 0; i &lt; 2; i++ {\t\t\tfmt.Println(\"Func for\")\t\t}\t\tch &lt;- \"ch wr\"\t}()\tstr := &lt;-ch //没有数据前，阻塞\tfmt.Println(\"rd  = \", str)}      无缓冲与有缓冲          无缓冲接收前，不会保存任何通道值，需要发送端和接收端同时准备好才能完成操纵，则会造成堵塞等待        package main  import (\t\"fmt\"\t\"time\")  func main() {\t//创建一个无缓存的channel\tch := make(chan int, 0)  \t//len(ch)缓冲区剩余数据个数， cap(ch)缓冲区大小\tfmt.Printf(\"len(ch) = %d, cap(ch)= %d\\n\", len(ch), cap(ch))  \t//新建协程\tgo func() {\t\tfor i := 0; i &lt; 3; i++ {\t\t\tfmt.Printf(\"子协程：i = %d\\n\", i)\t\t\tch &lt;- i //往chan写内容\t\t}\t}()  \t//延时\ttime.Sleep(2 * time.Second)  \tfor i := 0; i &lt; 3; i++ {\t\tnum := &lt;-ch //读管道中内容，没有内容前，阻塞\t\tfmt.Println(\"num = \", num)\t}  }              有缓存接收前，会保存一个或多个通道值，只有通道没有接收值才会堵塞        package main  import (\t\"fmt\"\t\"time\")  func main() {\t//创建一个有缓存的channel\tch := make(chan int, 3)  \t//len(ch)缓冲区剩余数据个数， cap(ch)缓冲区大小\tfmt.Printf(\"len(ch) = %d, cap(ch)= %d\\n\", len(ch), cap(ch))  \t//新建协程\tgo func() {\t\tfor i := 0; i &lt; 10; i++ {\t\t\tch &lt;- i //往chan写内容\t\t\tfmt.Printf(\"子协程[%d]: len(ch) = %d, cap(ch)= %d\\n\", i, len(ch), cap(ch))\t\t}\t}()  \t//延时\ttime.Sleep(2 * time.Second)  \tfor i := 0; i &lt; 10; i++ {\t\tnum := &lt;-ch //读管道中内容，没有内容前，阻塞\t\tfmt.Println(\"num = \", num)\t}  }            关闭  package mainimport \"fmt\"var ch = make(chan int)func main() {\tgo func() {\t\tfor i := 0; i &lt; 5; i++ {\t\t\tch &lt;- i\t\t}\t\tclose(ch)\t}()\tfor {\t\tif i, ok := &lt;-ch; ok == true {\t\t\tfmt.Println(i)\t\t} else {\t\t\tbreak\t\t}\t}}01234  单方向 channel(生产者、消费者)package mainimport \"fmt\"// write 写func write(write chan&lt;- string) {\tfor i := 0; i &lt; 3; i++ {\t\twrite &lt;- fmt.Sprint(\"Cc\", i)\t}\tdefer close(write)}// read 读func read(read &lt;-chan string) {\tfor v := range read {\t\tfmt.Println(v)\t}}func main() {\tch := make(chan string)\tgo write(ch)\tread(ch)}Cc 写0Cc 写1Cc 写2sync  sync.WaitGroup ，等待子协程执行完之后再退出主协程package mainimport (\t\"fmt\"\t\"sync\")func main() {\tvar group sync.WaitGroup\t// 添加两个\tgroup.Add(2)\tgo func() {\t\tfor i := 0; i &lt; 3; i++ {\t\t\tfmt.Println(\"func1 ---&gt;\", i)\t\t}\t\t// 执行完之后去除一个执行完毕\t\tgroup.Done()\t}()\tgo func() {\t\tfor i := 0; i &lt; 4; i++ {\t\t\tfmt.Println(\"func2 ---&gt;\", i)\t\t}\t\t// 去除一个执行完毕\t\tgroup.Done()\t}()\t// 等待group 数量为0 ，如果Done()方法数量和添加数量不一至，会造成deadlock! 死锁！\tgroup.Wait()}func2 ---&gt; 0func2 ---&gt; 1func2 ---&gt; 2func2 ---&gt; 3func1 ---&gt; 0func1 ---&gt; 1func1 ---&gt; 2"
  },
  
  {
    "title": "Day10（接口和错误处理）",
    "url": "/blog.github.io/posts/interfaceAndError/",
    "categories": "Server",
    "tags": "golang, GoBase",
    "date": "2019-04-25 17:02:59 +0800",
    





    "snippet": "interface And Panic、Error  源码interface接口创建使用package mainimport (\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"\t\"github.com/pkg/errors\")// UserInterfacetype UserInterface interface {\tAdd(User) error\tGet(int) (User, error)\tDelete(int) error\tUpdate(User) error\tList(int, int) ([]User, int, error)}// Usertype User struct {\tId   int\tName string\tAge  int}// 获取func (u *User) Get(id int) (user User, err error) {\tif id == 0 {\t\treturn user, errors.New(\"id not\")\t}\tuser.Age = 18\tuser.Name = \"Get\"\tuser.Id = id\treturn}// Addfunc (u *User) Add(user User) error {\treturn nil}// 删除func (u *User) Delete(id int) error {\treturn nil}// 添加func (u *User) Update(user User) error {\treturn nil}// 列表func (u *User) List(l, o int) (list []User, total int, err error) {\treturn}func main() {\tvar userInterface UserInterface\tuserInterface = new(User)\tuser, err := userInterface.Get(1)\tif err != nil {\t\tlogs.Error(err.Error())\t\treturn\t}\tlogs.Info(user)\tu := new(User)\tue, err := u.Get(0)\tif err != nil {\t\tlogs.Error(err.Error())\t\treturn\t}\tlogs.Info(ue)}2020/04/25 17:55:05.333 [I] [day10.go:63]  {1 Get 18}2020/04/25 17:55:05.369 [E] [day10.go:67]  id notPanic、ErrorPanic  recover() 捕捉程序终止异常，正常的打印捕捉异常，可以试试 把 defer func(){}() 代码注释，会不会打印 usr defer ，程序会自动将整个程序全部停止package mainimport (\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"\t\"runtime\")func AddressOrNil(f func()) {\tdefer func() {\t\tif r := recover(); r != nil {\t\t\tswitch r.(type) {\t\t\tcase runtime.Error: // 运行时错误\t\t\t\tlogs.Info(\"runtime error:\", r)\t\t\tdefault: // 非运行时错误\t\t\t\tlogs.Info(\"error:\", r)\t\t\t}\t\t}\t}()\tf()}func main() {\tAddressOrNil(func() {\t\tvar a *struct{ Name string }\t\ta.Name = \"Cc\"\t})\tlogs.Info(\"usr defer \")}2020/04/25 18:24:27.623 [I] [panic.go:13]  runtime error: runtime error: invalid memory address or nil pointer dereference2020/04/25 18:24:27.661 [I] [panic.go:28]  usr defer error  程序中错误处理 大致分两大类：panic会造成程序终止 ， error 程序错误，或者自定义的业务逻辑不合法抛出异常  自定义方法一定业务逻辑返回 error 这个返回值是在最后一个（习惯）"
  },
  
  {
    "title": "Day09（MapAndContainer）",
    "url": "/blog.github.io/posts/mapAndContainer/",
    "categories": "Server",
    "tags": "golang, GoBase",
    "date": "2019-04-25 10:00:24 +0800",
    





    "snippet": "集合(map) 和容器(Container)源码Map  Map是一种无序键值对的集合，通过Key来检索数据，key 类似索引，指向数据值，可以使用for迭代，但是 map是无序的，无法决定他的返回值顺序，这是因为map 是使用hash 来实现的删除元素、判断是否存在package mainimport (\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\")func main() {\tm1 := map[string]string{\t\t\"name1\": \"lcc\",\t\t\"name2\": \"Cc\",\t\t\"name3\": \"Cc360428\"}\tlogs.Info(m1)\tm2 := make(map[int]int)\tm2[1] = 11\tm2[2] = 22\tm2[3] = 33\tm2[4] = 44\tm2[5] = 55\tlogs.Info(m2)\tdelete(m2, 4)\tlogs.Info(m2)\tif v, ok := m2[88]; !ok {\t\t// ok 存在返回true 反之 false\t\tlogs.Info(\"check key no\")\t} else {\t\t// 当不存在就返回默认值\t\tlogs.Info(\"check  key is：\", v)\t}}2020/04/25 10:30:05.829 [I] [map.go:12]  map[name1:lcc name2:Cc name3:Cc360428]2020/04/25 10:30:05.858 [I] [map.go:19]  map[1:11 2:22 3:33 4:44 5:55]2020/04/25 10:30:05.858 [I] [map.go:21]  map[1:11 2:22 3:33 5:55]2020/04/25 10:30:05.858 [I] [map.go:24]  check key noContainer（heap、list、ring）  单链表结构      双链表结构与删除          知道上一个下一个，删除时要告诉上一个下个删除        双向链表与环形链表heap（堆）  源码文档  heap包提供了对任意类型（实现了heap.Interface接口）的堆操作。（最小）堆是具有“每个节点都是以其为根的子树中最小值”属性的树。  树的最小元素为其根元素，索引0的位置。      heap是常用的实现优先队列的方法。要创建一个优先队列，实现一个具有使用（负的）优先级作为比较的依据的Less方法的Heap接口，如此一来可用Push添加项目而用Pop取出队列最高优先级的项目。    实现优先队列package mainimport (\t\"container/heap\"\t\"fmt\")type Item struct {\tvalue    string // 优先级队列中的数据，可以是任意类型，这里使用string\tpriority int    // 优先级队列中节点的优先级\tindex    int    // index是该节点在堆中的位置}// 优先级队列需要实现heap的interfacetype PriorityQueue []*Item// 绑定Len方法func (pq PriorityQueue) Len() int {\treturn len(pq)}// 绑定Less方法，这里用的是小于号，生成的是小根堆func (pq PriorityQueue) Less(i, j int) bool {\treturn pq[i].priority &lt; pq[j].priority}// 绑定swap方法func (pq PriorityQueue) Swap(i, j int) {\tpq[i], pq[j] = pq[j], pq[i]\tpq[i].index, pq[j].index = i, j}// 绑定put方法，将index置为-1是为了标识该数据已经出了优先级队列了func (pq *PriorityQueue) Pop() interface{} {\told := *pq\tn := len(old)\titem := old[n-1]\t*pq = old[0 : n-1]\titem.index = -1\treturn item}// 绑定push方法func (pq *PriorityQueue) Push(x interface{}) {\tn := len(*pq)\titem := x.(*Item)\titem.index = n\t*pq = append(*pq, item)}// 更新修改了优先级和值的item在优先级队列中的位置func (pq *PriorityQueue) update(item *Item, value string, priority int) {\titem.value = value\titem.priority = priority\theap.Fix(pq, item.index)}func main() {\t// 创建节点并设计他们的优先级\titems := map[string]int{\"二毛\": 5, \"张三\": 3, \"狗蛋\": 9}\ti := 0\tpq := make(PriorityQueue, len(items)) // 创建优先级队列，并初始化\tfor k, v := range items {             // 将节点放到优先级队列中\t\tpq[i] = &amp;Item{\t\t\tvalue:    k,\t\t\tpriority: v,\t\t\tindex:    i}\t\ti++\t}\theap.Init(&amp;pq) // 初始化堆\titem := &amp;Item{ // 创建一个item\t\tvalue:    \"李四\",\t\tpriority: 1,\t}\theap.Push(&amp;pq, item)           // 入优先级队列\tpq.update(item, item.value, 6) // 更新item的优先级\tfor len(pq) &gt; 0 {\t\titem := heap.Pop(&amp;pq).(*Item)\t\tfmt.Printf(\"%.2d:%s index:%.2d\\n\", item.priority, item.value, item.index)\t}}03:张三 index:-0105:二毛 index:-0106:李四 index:-0109:狗蛋 index:-01list（双向链表）  源码文档  双向链表 ，Element 元素是链接列表的元素  MoveBefore：给定的元素移动到另一个元素的前面  MoveAfter：给定的元素移动到另一个元素的后面  MoveToFront：把给定的元素移动到链表的最前端  MoveToBack：把给定的元素移动到链表的最后端  Front：获取链表中最前端  Back：获取链表中最后端  InsertBefore：指定的元素之前插入新元素  InsertAfter：指定的元素之后插入新元素  PushFront：用于在链表的最前端插入新元素。  PushBack：用于在链表的最前端插入新元素。package mainimport (\t\"container/list\"\t\"fmt\"\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\")func main() {\tlistType := list.New()\t// 尾部添加\tlistType.PushFront(\"lcc\")\tlistType.PushFront(18)\t// 头部添加\tlistType.PushFront(\"hello\")\tfor e := listType.Front(); e != nil; e = e.Next() {\t\tfmt.Print(e.Value, \" \")\t}\tfmt.Print(\"\\n\")\tfor e := listType.Front(); e != nil; e = e.Next() {\t\tif e.Value == \"hello\" {\t\t\t// 指定元素之后插入新元素\t\t\tlistType.InsertAfter(\"World\", e)\t\t}\t\tif e.Value == \"lcc\" {\t\t\t// 指定元素之前插入新元素\t\t\tlistType.InsertBefore(\"Cc\", e)\t\t}\t}\tfor e := listType.Front(); e != nil; e = e.Next() {\t\tfmt.Print(e.Value, \" \")\t}\tfmt.Print(\"\\n\")\tfor e := listType.Back(); e != nil; e = e.Next() {\t\tfmt.Print(e.Value)\t}\t// 最前元素\tlogs.Info(listType.Front().Value)\t// 最后元素\tlogs.Info(listType.Back().Value)\tfor e := listType.Front(); e != nil; e = e.Next() {\t\tif e.Value == \"lcc\" {\t\t\t// 指定元素之前插入新元素\t\t\tlistType.MoveBefore(e, e)\t\t}\t}}hello 18 lcc hello World 18 Cc lcc lcc2020/04/25 16:16:21.548 [I] [list.go:39]  hello2020/04/25 16:16:21.577 [I] [list.go:41]  lccring（环）  源码文档  ring实现了环形链表的操作package mainimport (\t\"container/ring\"\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\")func main() {\tring1 := ring.New(3)\tfor i := 1; i &lt;= 3; i++ {\t\tring1.Value = i\t\tring1 = ring1.Next()\t}\tring2 := ring.New(3)\tfor i := 0; i &lt;= ring2.Len(); i++ {\t\tring2.Value = i\t\tring2 = ring2.Next()\t}\tr := ring1.Link(ring2)\tlogs.Info(r.Len())\tr.Do(func(p interface{}) {\t\tlogs.Info(p.(int))\t})\tlogs.Info(r.Value)\tlogs.Info(r.Next().Value)\tlogs.Info(r.Prev().Value)\t// ring 的遍历\tfor p := r.Next(); p != r; p = p.Next() {\t\tlogs.Info(p.Value.(int))\t}}2020/04/25 16:15:42.181 [I] [ring.go:20]  62020/04/25 16:15:42.216 [I] [ring.go:23]  22020/04/25 16:15:42.216 [I] [ring.go:23]  32020/04/25 16:15:42.216 [I] [ring.go:23]  12020/04/25 16:15:42.216 [I] [ring.go:23]  12020/04/25 16:15:42.216 [I] [ring.go:23]  22020/04/25 16:15:42.216 [I] [ring.go:23]  32020/04/25 16:15:42.216 [I] [ring.go:25]  22020/04/25 16:15:42.216 [I] [ring.go:26]  32020/04/25 16:15:42.216 [I] [ring.go:27]  32020/04/25 16:15:42.216 [I] [ring.go:30]  32020/04/25 16:15:42.216 [I] [ring.go:30]  12020/04/25 16:15:42.217 [I] [ring.go:30]  12020/04/25 16:15:42.218 [I] [ring.go:30]  22020/04/25 16:15:42.218 [I] [ring.go:30]  3"
  },
  
  {
    "title": "openCV",
    "url": "/blog.github.io/posts/base/",
    "categories": "AI",
    "tags": "golang, openCV",
    "date": "2019-04-24 22:37:18 +0800",
    





    "snippet": "OpenCV地址goCvgocv参考网址csdn"
  },
  
  {
    "title": "Day08（切片 slice 和 range）",
    "url": "/blog.github.io/posts/sliceAndRanger/",
    "categories": "Server",
    "tags": "golang, GoBase",
    "date": "2019-04-24 22:37:18 +0800",
    





    "snippet": "切片（slice） 和range 使用源码切片（slice）  Go 数组在一定情况下，不能满足开发业务需求（数组固定长度、有很多局限性），切片是可变长度序列，切片底层就是数组做了一层封装（也叫做动态数组）。切片可以自动扩容，切片是引用类型，包含地址、长度（len）、容量（cap）切片什么时候扩容  如果切片的容量小于1024个元素，那么扩容的时候slice的cap就翻番，乘以2；一旦元素个数超过1024个元素，增长因子就变成1.25，即每次增加原来容量的四分之一。  如果扩容之后，还没有触及原数组的容量，那么，切片中的指针指向的位置，就还是原数组，如果扩容之后，超过了原数组的容量，那么，Go就会开辟一块新的内存，把原来的值拷贝过来，这种情况丝毫不会影响到原数组  首先判断，如果新申请容量（cap）大于2倍的旧容量（old.cap），最终容量（newcap）就是新申请的容量（cap）。  否则判断，如果旧切片的长度小于1024，则最终容量(newcap)就是旧容量(old.cap)的两倍，即（newcap=doublecap），  否则判断，如果旧切片长度大于等于1024，则最终容量（newcap）从旧容量（old.cap）开始循环增加原来的1/4，即（newcap=old.cap,for {newcap += newcap/4}）直到最终容量（newcap）大于等于新申请的容量(cap)，即（newcap &gt;= cap）  如果最终容量（cap）计算值溢出，则最终容量（cap）就是新申请容量（cap）。基本使用  定义方式  指定长度与容量：make([]Type, length, capacity)  指定长度：make([]Type, length)package mainimport \"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"func main() {\tvar slice1 []string\tlogs.Info(slice1)\tslice2 := make([]int, 1, 2)\tlogs.Info(len(slice2), cap(slice2))}2020/04/24 23:47:25.578 [I] [slice.go:7]  []2020/04/24 23:47:25.621 [I] [slice.go:9]  1 2  初始化以及切割a[2:]  // 等同于 a[2:len(a)]a[:3]  // 等同于 a[0:3]a[:]   // 等同于 a[0:len(a)]package mainimport \"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"func main() {\ts := []int{1, 2, 3}\tlogs.Info(s)\ts1 := s[:1]\tlogs.Info(s1)\ts2 := s[1:]\tlogs.Info(s2)\ts3 := s[1:2]\tlogs.Info(s3)}2020/04/24 23:55:30.339 [I] [slice2.go:7]  [1 2 3]2020/04/24 23:55:30.366 [I] [slice2.go:9]  [1]2020/04/24 23:55:30.366 [I] [slice2.go:11]  [2 3]2020/04/24 23:55:30.366 [I] [slice2.go:13]  [2]  len()和cap()package mainimport \"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"func main() {\t// 定义长度为：1 ，容量为2\ts1 := make([]int, 1, 2)\tlogs.Info(len(s1), cap(s1))\ts2 := make([]int,6)\ts1 = append(s1, s2...)\tlogs.Info(len(s1), cap(s1))}2020/04/25 00:01:32.871 [I] [slice3.go:8]  1 22020/04/25 00:01:32.899 [I] [slice3.go:11]  7 8  append() 和copy()package mainimport \"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"func main() {\tvar s []int\tlogs.Info(s, len(s), cap(s))\ts = append(s, 0)\tlogs.Info(s, len(s), cap(s))\ts = append(s, 612, 12, 3132, 1024)\tlogs.Info(s, len(s), cap(s))\ts2 := make([]int, len(s))\ts2[0] = 888\ts2[1] = 999\ts2[2] = 666\ts = append(s, s2 ...)\tlogs.Info(s, len(s), cap(s))\ts3 := make([]int,5)\tcopy(s3, s2)\tlogs.Info(s3, len(s3), cap(s3))}2020/04/25 00:14:53.179 [I] [slice4.go:7]  [] 0 02020/04/25 00:14:53.213 [I] [slice4.go:9]  [0] 1 12020/04/25 00:14:53.213 [I] [slice4.go:11]  [0 612 12 3132 1024] 5 62020/04/25 00:14:53.213 [I] [slice4.go:17]  [0 612 12 3132 1024 888 999 666 0 0] 10 122020/04/25 00:14:53.213 [I] [slice4.go:20]  [888 999 666 0 0] 5 5删除元素和sort.Ints()排序  总结一下就是：要从切片a中删除索引为index的元素，操作方法是a = append(a[:index], a[index+1:]...)package mainimport (\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"\t\"sort\")// 删除索引为2func main() {\ta := []int{1, 2, 3,9, 5, 6, 7, 8}\ta = append(a[:2], a[3:]...)\tlogs.Info(a)\tsort.Ints(a)\tlogs.Info(a)}2020/04/25 00:21:05.501 [I] [slice5.go:12]  [1 2 9 5 6 7 8]2020/04/25 00:21:05.535 [I] [slice5.go:14]  [1 2 5 6 7 8 9]range  for遍历循环迭代array、slice、channel、mapfor k ,v := range Type{    fmt.Println(k,v)}package mainimport (\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\")func main() {\t// array\tarray := []int{1, 2, 3, 4}\tfor k, v := range array {\t\tlogs.Info(k, v)\t}\tslice := make([]int, 3)\tfor k, v := range slice {\t\tlogs.Info(k, v)\t}\t// slice\tchannel := make(chan int, 2)\tgo func() {\t\tfor i := 1; i &lt;= 3; i++ {\t\t\tchannel &lt;- 8 * i\t\t}\t\tdefer close(channel)\t\t// !close(channel) --&gt; fatal error: all goroutines are asleep - deadlock!\t}()\t// channel\tfor k := range channel {\t\tlogs.Info(\"channel\", k)\t}\t// map\tmapType := make(map[string]interface{})\tmapType[\"name\"] = \"lcc\"\tmapType[\"age\"] = 18\tfor k, v := range mapType {\t\tlogs.Info(k, v)\t}}2020/04/25 09:47:23.485 [I] [range.go:11]  0 12020/04/25 09:47:23.510 [I] [range.go:11]  1 22020/04/25 09:47:23.510 [I] [range.go:11]  2 32020/04/25 09:47:23.510 [I] [range.go:11]  3 42020/04/25 09:47:23.510 [I] [range.go:15]  0 02020/04/25 09:47:23.510 [I] [range.go:15]  1 02020/04/25 09:47:23.510 [I] [range.go:15]  2 02020/04/25 09:47:23.510 [I] [range.go:28]  channel 82020/04/25 09:47:23.510 [I] [range.go:28]  channel 162020/04/25 09:47:23.511 [I] [range.go:28]  channel 242020/04/25 09:47:23.511 [I] [range.go:35]  name lcc2020/04/25 09:47:23.511 [I] [range.go:35]  age 18"
  },
  
  {
    "title": "Day07（指针和结构体）",
    "url": "/blog.github.io/posts/PointerAndstruct/",
    "categories": "Server",
    "tags": "golang, GoBase",
    "date": "2019-04-23 22:04:03 +0800",
    





    "snippet": "指针和结构体源码指针  Go 语言指针与C语言指针不一样理解,一个指针变量指向了一个值的内存地址。  类似于变量和常量，在使用指针前你需要声明指针示例      示例一：          func new(Type) *Type 说明 new()方法 返回值就是指针      package mainimport (\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\")func main() {\tintType := new(int)\tlogs.Info(intType)\tvar intType1 *int\tlogs.Info(intType1)\tvar intType2 int\tlogs.Info(intType2)}2020/04/23 22:21:59.542 [I] [pointer.go:9]  0xc0000123802020/04/23 22:21:59.566 [I] [pointer.go:11]  &lt;nil&gt;2020/04/23 22:21:59.566 [I] [pointer.go:13]  0  示例2package mainimport (\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\")func main() {\tvar a int = 20 // 声明实际变量\tvar ip *int    // 声明指针变量\tip = &amp;a        // 将变量 a 的指针复制给 ip\tlogs.Info(&amp;a)\tlogs.Info(ip)  // 指针变量的存储地址\tlogs.Info(*ip) // 使用指针访问值}2020/04/23 22:30:34.230 [I] [pointer2.go:11]  0xc0000882d02020/04/23 22:30:34.273 [I] [pointer2.go:12]  0xc0000882d02020/04/23 22:30:34.273 [I] [pointer2.go:13]  2结构体基础语法package mainimport \"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"// User 用户结构体type User struct {\tName   string `json:\"name\"`\tAge    int    `json:\"age\"`\tEmail  string `json:\"email\"`\tStatuc bool   `json:\"statuc\"`}func main() {\tvar user User\tlogs.Info(user)\tlogs.Info(User{\"lcc\", 18, \"lcc@lcc.com\", false})\tvar user2 User\tuser2.Age = 23\tuser2.Name = \"Cc\"\tuser2.Email = \"Cc@cc.com\"\tuser2.Statuc = true\tlogs.Info(user2)\tlogs.Info(user2.Age)\tlogs.Info(user2.Name)}2020/04/23 22:45:58.034 [I] [struct.go:15]  { 0  false}2020/04/23 22:45:58.061 [I] [struct.go:16]  {lcc 18 lcc@lcc.com false}2020/04/23 22:45:58.061 [I] [struct.go:22]  {Cc 23 Cc@cc.com true}2020/04/23 22:45:58.061 [I] [struct.go:23]  232020/04/23 22:45:58.061 [I] [struct.go:24]  Cc进阶package mainimport \"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"// User 用户结构体type User struct {\tName   string `json:\"name\"`\tAge    int    `json:\"age\"`\tEmail  string `json:\"email\"`\tStatuc bool   `json:\"statuc\"`}// InitUser 获取Userfunc (u *User) InitUser(name string) (*User, error) {\tu.Name = name\treturn u, nil}func main() {\tuser := new(User)\tuser.Age = 6\tuser2, _ := user.InitUser(\"lcc\")\tlogs.Info(user2)}2020/04/23 22:51:45.282 [I] [struct2.go:22]  &amp;{lcc 6  false}"
  },
  
  {
    "title": "Day06（作用域与数组）",
    "url": "/blog.github.io/posts/variableAndArray/",
    "categories": "Server",
    "tags": "golang, GoBase",
    "date": "2019-04-07 22:58:36 +0800",
    





    "snippet": "作用域与数组源码变量作用域局部变量  函数内定义的变量package mainimport (\t\"fmt\")func main() {\tvar a, b, c = 1, 2, 3\tfmt.Println(a, b, c)}全局变量  函数外定义的变量package mainimport \"fmt\"// 定义全局变量var h intfunc main() {\tvar a, b int\ta = 1\tb = 2\th = a + b\tfmt.Println(h)}形式参数  函数定义中的变量package mainimport \"fmt\"// 声明全局变量var a = 20func main() {\t// main 函数中声明局部变量\tvar a = 10\tvar b = 20\tvar c = 0\tfmt.Printf(\"main()函数中 a = %d\\n\", a)\tc = sum(a, b)\tfmt.Printf(\"main()函数中 c = %d\\n\", c)}// 函数定义-两数相加func sum(a, b int) int {\tfmt.Printf(\"sum() 函数中 a = %d\\n\", a)\tfmt.Printf(\"sum() 函数中 b = %d\\n\", b)\treturn a + b}main()函数中 a = 10sum() 函数中 a = 10sum() 函数中 b = 20main()函数中 c = 30数组  数组是Go 语言中一个数据结构  数组元素可以通过索引（位置）来读取（或者修改），索引从 0 开始，第一个元素索引为 0，第二个索引为 1，以此类推数组声明、初始化、访问元素package mainimport (\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\")func main() {\tvar array = [2]int{1, 2}\tlogs.Info(array)\tvar array1 = [...]int{1, 2, 2, 3, 4, 4, 3, 23, 6, 6, 2}\tlogs.Info(array1)\tvar n [10]int // n 是一个长度为 10 的数组\tvar i, j int\t// 为数组 n 初始化元素\tfor i = 0; i &lt; 10; i++ {\t\tn[i] = i + 100 /* 设置元素为 i + 100 */\t}\t// 输出每个数组元素的值\tfor j = 0; j &lt; 10; j++ {\t\tlogs.Info(\"Element[%d] = %d \", j, n[j])\t}}2020/04/07 23:26:07.885 [I] [array.go:10]  [1 2]2020/04/07 23:26:07.886 [I] [array.go:12]  [1 2 2 3 4 4 3 23 6 6 2]2020/04/07 23:26:07.886 [I] [array.go:23]  Element[0] = 1002020/04/07 23:26:07.886 [I] [array.go:23]  Element[1] = 1012020/04/07 23:26:07.886 [I] [array.go:23]  Element[2] = 1022020/04/07 23:26:07.886 [I] [array.go:23]  Element[3] = 1032020/04/07 23:26:07.886 [I] [array.go:23]  Element[4] = 1042020/04/07 23:26:07.886 [I] [array.go:23]  Element[5] = 1052020/04/07 23:26:07.886 [I] [array.go:23]  Element[6] = 1062020/04/07 23:26:07.886 [I] [array.go:23]  Element[7] = 1072020/04/07 23:26:07.886 [I] [array.go:23]  Element[8] = 1082020/04/07 23:26:07.886 [I] [array.go:23]  Element[9] = 109多维数组、向数组传递数组多维数组package mainimport (\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\")func main() {\t// 数组 - 5 行 2 列\tvar a = [5][2]int{ {0, 0}, {1, 2}, {2, 4}, {3, 6}, {4, 8}}\tvar i, j int\t// 输出数组元素\tfor i = 0; i &lt; 5; i++ {\t\tfor j = 0; j &lt; 2; j++ {\t\t\tlogs.Info(\"a[%d][%d] = %d\", i, j, a[i][j])\t\t}\t}}2020/04/07 23:28:47.448 [I] [array2.go:15]  a[0][0] = 02020/04/07 23:28:47.449 [I] [array2.go:15]  a[0][1] = 02020/04/07 23:28:47.449 [I] [array2.go:15]  a[1][0] = 12020/04/07 23:28:47.449 [I] [array2.go:15]  a[1][1] = 22020/04/07 23:28:47.449 [I] [array2.go:15]  a[2][0] = 22020/04/07 23:28:47.449 [I] [array2.go:15]  a[2][1] = 42020/04/07 23:28:47.449 [I] [array2.go:15]  a[3][0] = 32020/04/07 23:28:47.449 [I] [array2.go:15]  a[3][1] = 62020/04/07 23:28:47.449 [I] [array2.go:15]  a[4][0] = 42020/04/07 23:28:47.449 [I] [array2.go:15]  a[4][1] = 8向数组传递数组package mainimport (\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\")func main() {\t//  数组长度为 5\tvar balance = [5]int{1000, 2, 3, 17, 50}\tvar avg float32\t// 数组作为参数传递给函数\tavg = getAverage(balance, 5)\t// 输出返回的平均值\tlogs.Info(\"平均值为: %f \", avg)}func getAverage(arr [5]int, size int) float32 {\tvar i, sum int\tvar avg float32\tfor i = 0; i &lt; size; i++ {\t\tsum += arr[i]\t}\tavg = float32(sum) / float32(size)\treturn avg}2020/04/07 23:31:06.475 [I] [array3.go:16]  平均值为: 214.399994"
  },
  
  {
    "title": "Day05（函数）",
    "url": "/blog.github.io/posts/func/",
    "categories": "Server",
    "tags": "golang, GoBase",
    "date": "2019-04-06 22:05:18 +0800",
    





    "snippet": "函数源码  go 至少一个函数 主函数package mainimport (\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\")func main() {\t_, _, _, err := FuncName(\"\", \"\", false)\tif err != nil {\t\tlogs.Error(err.Error())\t}}// FuncName func FuncName(args1, args2 string, args3 bool) (return1, return2 string, return3 bool, return4 error) {\t/**\t函数体\t */\treturn}说明  可以return 多个返回值  方法名返回值最后一个值，一般为 error   接收的时候判断 error是否为nil 就像其他域名中的异常处理  使用方法时候，如果不想接收该参数可是使用 _来拒收使用格式      格式一          注：如果在定义返回值时定义好返回值名字，就可以直接 return 在方法体内需要对事先定义好的返回值名进行赋值 如果没有赋值，则return  为该类型的默认值      package mainimport \"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"func main() {\tmax, _, err := max(66, 99, \"lcc\")\tif err != nil {\t\tlogs.Error(err.Error())\t}\tlogs.Info(\"%d最大值\", max)\tstr := IsNull(\"66\")\tlogs.Info(str)}// max 格式一：func max(a, b int, name string) (max int, v string, err error) {\tlogs.Info(\"this name %s\", name)\tif a &gt; b {\t\treturn a, name, nil\t}\tmax = b\treturn}// IsNull 格式一：func IsNull(str string) bool {\tif len(str) == 0 &amp;&amp; str == \"\" {\t\treturn true\t}\treturn false}2020/04/06 22:47:04.408 [I] [func1.go:19]  this name lcc2020/04/06 22:47:04.421 [I] [func1.go:11]  99最大值2020/04/06 22:47:04.421 [I] [func1.go:13]  false函数值传递与引用传递值传递  传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。默认情况下，Go 语言使用的是值传递，即在调用过程中不会影响到实际参数package mainimport (\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\")func main() {\t/* 定义局部变量 */\tvar a int = 100\tvar b int = 200\tlogs.Info(\"交换前，a 的值 : %d\", a)\tlogs.Info(\"交换前，b 的值 : %d\", b)\t/* 调用 swap() 函数\t* &amp;a 指向 a 指针，a 变量的地址\t* &amp;b 指向 b 指针，b 变量的地址\t*/\tswap(&amp;a, &amp;b)\tlogs.Info(\"交换后，a 的值 : %d\", a)\tlogs.Info(\"交换后，b 的值 : %d\", b)}func swap(x *int, y *int) {\tvar temp int\ttemp = *x /* 保存 x 地址上的值 */\t*x = *y   /* 将 y 值赋给 x */\t*y = temp /* 将 temp 值赋给 y */}2020/04/06 23:02:06.856 [I] [func3.go:12]  交换前 a 的值为 : 1002020/04/06 23:02:06.858 [I] [func3.go:13]  交换前 b 的值为 : 2002020/04/06 23:02:06.858 [I] [func3.go:18]  交换后 a 的值 : 1002020/04/06 23:02:06.858 [I] [func3.go:19]  交换后 b 的值 : 200引用传递  引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。package mainimport (\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\")func main() {\t/* 定义局部变量 */\tvar a = 100\tvar b int = 200\tlogs.Info(\"交换前 a 的值为 : %d\", a)\tlogs.Info(\"交换前 b 的值为 : %d\", b)\t/* 通过调用函数来交换值 */\tswap(a, b)\tlogs.Info(\"交换后 a 的值 : %d\", a)\tlogs.Info(\"交换后 b 的值 : %d\", b)}/* 定义相互交换值的函数 */func swap(x, y int) int {\tvar temp int\ttemp = x /* 保存 x 的值 */\tx = y    /* 将 y 值赋给 x */\ty = temp /* 将 temp 值赋给 y*/\treturn temp;}```2020/04/06 23:00:31.757 [I] [func2.go:12]  交换前，a 的值 : 1002020/04/06 23:00:31.759 [I] [func2.go:13]  交换前，b 的值 : 2002020/04/06 23:00:31.759 [I] [func2.go:21]  交换后，a 的值 : 2002020/04/06 23:00:31.759 [I] [func2.go:22]  交换后，b 的值 : 100### 函数用法#### 函数作为参数&gt;Go 语言可以很灵活的创建函数，并作为另外一个函数的实参```gopackage mainimport (\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"\t\"math\")func main() {\t/* 声明函数变量 */\tgetSquareRoot := func(x float64) float64 {\t\treturn math.Sqrt(x)\t}\t/* 使用函数 */\tlogs.Info(getSquareRoot(9))}2020/04/06 23:09:46.897 [I] [func4.go:15]  3闭包  Go 语言支持匿名函数，可作为闭包。匿名函数是一个”内联”语句或表达式。匿名函数的优越性在于可以直接使用函数内的变量，不必申明。package mainimport \"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"func getSequence() func() int {\ti := 0\treturn func() int {\t\ti += 1\t\treturn i\t}}func main() {\t/* nextNumber 为一个函数，函数 i 为 0 */\tnextNumber := getSequence()\t/* 调用 nextNumber 函数，i 变量自增 1 并返回 */\tlogs.Info(nextNumber())\tlogs.Info(nextNumber())\tlogs.Info(nextNumber())\t/* 创建新的函数 nextNumber1，并查看结果 */\tnextNumber1 := getSequence()\tlogs.Info(nextNumber1())\tlogs.Info(nextNumber1())}2020/04/06 23:12:15.449 [I] [func5.go:19]  12020/04/06 23:12:15.450 [I] [func5.go:20]  22020/04/06 23:12:15.450 [I] [func5.go:21]  32020/04/06 23:12:15.450 [I] [func5.go:25]  12020/04/06 23:12:15.450 [I] [func5.go:26]  2方法  Go 语言中同时有函数和方法。一个方法就是一个包含了接受者的函数，接受者可以是命名类型或者结构体类型的一个值或者是一个指针。所有给定类型的方法属于该类型的方法集。package mainimport \"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"// 定义结构体type Circle struct {\tradius float64}func main() {\tvar c1 Circle\tc1.radius = 10.00\tlogs.Info(\"圆的面积 = \", c1.getArea())}// 该 method 属于 Circle 类型对象中的方法func (c Circle) getArea() float64 {\t//c.radius 即为 Circle 类型对象中的属性\treturn 3.14 * c.radius * c.radius}2020/04/06 23:14:50.249 [I] [func6.go:13]  圆的面积 =  314"
  },
  
  {
    "title": "Day04（循环语句）",
    "url": "/blog.github.io/posts/LoopStatementFunc/",
    "categories": "Server",
    "tags": "golang, GoBase",
    "date": "2019-04-03 00:10:00 +0800",
    





    "snippet": "循环语句源代码forpackage mainimport \"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"func main() {\tarray := make([]int, 5)\tlogs.Info(array)\tfor i := 0; i &lt; len(array); i++ {\t\tarray[i] = i\t}\tlogs.Info(array)\tb := 3\tfor b &gt;= 1 {\t\tb--\t\tlogs.Debug(b)\t}\ta := 5\tfor a &gt;= 2 {\t\tlogs.Info(a)\t\ta--\t}}2020/04/06 22:50:49.220 [I] [for.go:7]  [0 0 0 0 0]2020/04/06 22:50:49.242 [I] [for.go:11]  [0 1 2 3 4]2020/04/06 22:50:49.242 [D] [for.go:15]  22020/04/06 22:50:49.242 [D] [for.go:15]  12020/04/06 22:50:49.242 [D] [for.go:15]  02020/04/06 22:50:49.242 [I] [for.go:19]  52020/04/06 22:50:49.242 [I] [for.go:19]  42020/04/06 22:50:49.242 [I] [for.go:19]  32020/04/06 22:50:49.242 [I] [for.go:19]  2  遍历： 切片、数组、mappackage mainimport \"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"func main() {\tmapType := make(map[string]int, 3)\tmapType[\"Cc\"] = 18\tmapType[\"Lcc\"] = 20\tmapType[\"Hyper\"] = 23\tfor i := 0; i &lt; len(mapType); i++ {\t\tlogs.Info(mapType)\t}\tsli := make([]int, 3)\tfor i := 0; i &lt; len(sli); i++ {\t\tsli[i] = i\t}\tfor i := 0; i &lt; len(sli); i++ {\t\tlogs.Info(sli[i])\t}\tlogs.Info(sli)\tvar array [2]int\tarray[0] = 100\tarray[1] = 300\tlogs.Info(array)\tfor i := 0; i &lt; len(array); i++ {\t\tlogs.Info(array[i])\t}}2020/04/05 15:05:47.631 [I] [for_2.go:11]  map[Cc:18 Hyper:23 Lcc:20]2020/04/05 15:05:47.656 [I] [for_2.go:11]  map[Cc:18 Hyper:23 Lcc:20]2020/04/05 15:05:47.656 [I] [for_2.go:11]  map[Cc:18 Hyper:23 Lcc:20]2020/04/05 15:05:47.656 [I] [for_2.go:18]  02020/04/05 15:05:47.656 [I] [for_2.go:18]  12020/04/05 15:05:47.656 [I] [for_2.go:18]  22020/04/05 15:05:47.656 [I] [for_2.go:20]  [0 1 2]2020/04/05 15:05:47.656 [I] [for_2.go:24]  [100 300]2020/04/05 15:05:47.656 [I] [for_2.go:26]  1002020/04/05 15:05:47.656 [I] [for_2.go:26]  300  无限for循环package mainimport \"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"func main() {\tvar i int\tfor {\t\ti++\t\tlogs.Info(i)\t}}  1秒钟会执行 80000 多行2020/04/06 22:29:35.521 [I] [for.go:9]  855012020/04/06 22:29:35.521 [I] [for.go:9]  855022020/04/06 22:29:35.521 [I] [for.go:9]  855032020/04/06 22:29:35.522 [I] [for.go:9]  855042020/04/06 22:29:35.522 [I] [for.go:9]  855052020/04/06 22:29:35.522 [I] [for.go:9]  855062020/04/06 22:29:35.522 [I] [for.go:9]  85507嵌套for循环（99乘法表）package mainimport (\t\"fmt\")func main() {\tfor i := 1; i &lt;= 9; i++ {\t\tfor j := 1; j &lt;= i; j++ {\t\t\tfmt.Printf(\"%d*%d=%d  \", j, i, j*i)\t\t}\t\tfmt.Println()\t}}  讲解：第二层来控制第二层循环次数，当第二层循环j=1时 判断 刚好i 也等于1 就循环一次，一次类推1*1=1  1*2=2  2*2=4  1*3=3  2*3=6  3*3=9  1*4=4  2*4=8  3*4=12  4*4=16  1*5=5  2*5=10  3*5=15  4*5=20  5*5=25  1*6=6  2*6=12  3*6=18  4*6=24  5*6=30  6*6=36  1*7=7  2*7=14  3*7=21  4*7=28  5*7=35  6*7=42  7*7=49  1*8=8  2*8=16  3*8=24  4*8=32  5*8=40  6*8=48  7*8=56  8*8=64  1*9=9  2*9=18  3*9=27  4*9=36  5*9=45  6*9=54  7*9=63  8*9=72  9*9=81    留下一个小思考（反着输出99乘法表）答案在今天day4[991.go]中1*1=1   1*2=2   2*2=4   1*3=3   2*3=6   3*3=9   1*4=4   2*4=8   3*4=12   4*4=16   1*5=5   2*5=10   3*5=15   4*5=20   5*5=25   1*6=6   2*6=12   3*6=18   4*6=24   5*6=30   6*6=36   1*7=7   2*7=14   3*7=21   4*7=28   5*7=35   6*7=42   7*7=49   1*8=8   2*8=16   3*8=24   4*8=32   5*8=40   6*8=48   7*8=56   8*8=64   1*9=9   2*9=18   3*9=27   4*9=36   5*9=45   6*9=54   7*9=63   8*9=72   9*9=81   1*9=9   2*9=18   3*9=27   4*9=36   5*9=45   6*9=54   7*9=63   8*9=72   9*9=81   1*8=8   2*8=16   3*8=24   4*8=32   5*8=40   6*8=48   7*8=56   8*8=64   1*7=7   2*7=14   3*7=21   4*7=28   5*7=35   6*7=42   7*7=49   1*6=6   2*6=12   3*6=18   4*6=24   5*6=30   6*6=36   1*5=5   2*5=10   3*5=15   4*5=20   5*5=25   1*4=4   2*4=8   3*4=12   4*4=16   1*3=3   2*3=6   3*3=9   1*2=2   2*2=4   1*1=1   冒泡排序package mainimport (\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\")func main() {\tarray := []int{1, 3, 4, 7, 2}\tlogs.Info(array)\tBubbleASort(array)\tBubbleZSort(array)}func BubbleASort(values []int) {\tfor i := 0; i &lt; len(values)-1; i++ {\t\tfor j := i + 1; j &lt; len(values); j++ {\t\t\tif values[i] &gt; values[j] {\t\t\t\tvalues[i], values[j] = values[j], values[i]\t\t\t}\t\t}\t}\tlogs.Info(values)}func BubbleZSort(values []int) {\tfor i := 0; i &lt; len(values)-1; i++ {\t\tfor j := i + 1; j &lt; len(values); j++ {\t\t\tif values[i] &lt; values[j] {\t\t\t\tvalues[i], values[j] = values[j], values[i]\t\t\t}\t\t}\t}\tlogs.Info(values)}2020/04/06 23:46:03.032 [I] [BubbleSort.go:9]  [1 3 4 7 2]2020/04/06 23:46:03.058 [I] [BubbleSort.go:23]  [1 2 3 4 7]2020/04/06 23:46:03.058 [I] [BubbleSort.go:34]  [7 4 3 2 1]流程控制brackpackage mainimport \"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"func main() {\tfor i := 0; i &lt;= 10; i++ {\t\tlogs.Info(i)\t\tif i == 4 {\t\t\t// 跳出本次循环\t\t\tbreak\t\t}\t}}2020/04/06 23:50:00.181 [I] [brack.go:7]  02020/04/06 23:50:00.200 [I] [brack.go:7]  12020/04/06 23:50:00.200 [I] [brack.go:7]  22020/04/06 23:50:00.201 [I] [brack.go:7]  32020/04/06 23:50:00.201 [I] [brack.go:7]  4continuepackage mainimport \"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"func main() {\tfor i := 0; i &lt;= 5; i++ {\t\tif i == 3 {\t\t\t// 跳过本次循环\t\t\tcontinue\t\t}\t\tlogs.Info(i)\t}}2020/04/06 23:53:07.823 [I] [contiune.go:11]  02020/04/06 23:53:07.837 [I] [contiune.go:11]  12020/04/06 23:53:07.837 [I] [contiune.go:11]  22020/04/06 23:53:07.837 [I] [contiune.go:11]  42020/04/06 23:53:07.837 [I] [contiune.go:11]  5gotopackage mainimport \"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"func main() {\t// 你放这里就成无限循环，j == 5 就执行下面代码LCC:\tfor i := 0; i &lt;= 10; i++ {\t\tfor j := 0; j &lt;= 10; j++ {\t\t\tlogs.Info(i, j)\t\t\tif j == 5 {\t\t\t\tgoto LCC\t\t\t}\t\t}\t}LCC:\tlogs.Info(\"LCC知识标签而已除了内置关键字，跳出循环\")}2020/04/07 00:01:00.314 [I] [goto.go:9]  0 02020/04/07 00:01:00.334 [I] [goto.go:9]  0 12020/04/07 00:01:00.334 [I] [goto.go:9]  0 22020/04/07 00:01:00.334 [I] [goto.go:9]  0 32020/04/07 00:01:00.334 [I] [goto.go:9]  0 42020/04/07 00:01:00.334 [I] [goto.go:9]  0 52020/04/07 00:01:00.334 [I] [goto.go:16]  LCC知识标签而已除了内置关键字，跳出循环"
  },
  
  {
    "title": "Day03（运算符与条件语句）",
    "url": "/blog.github.io/posts/OperatorCondition/",
    "categories": "Server",
    "tags": "golang, GoBase",
    "date": "2019-04-02 13:13:45 +0800",
    





    "snippet": "运算符与条件语句  本章源码  运算符算数运算符  假定 A 值为 10，B 值为 20| 运算符 | 描述 |        实例        || :—– | :— | :—————-: || +      | 相加 | A + B 输出结果 30  || -      | 相减 | A - B 输出结果 -10 || *      | 相乘 | A * B 输出结果 200 || /      | 相除 |  B / A 输出结果 2  || %      | 求余 |  B % A 输出结果 0  || ++     | 自增 |  A++ 输出结果 11   || –     | 自减 |   A– 输出结果 9   |关系运算符  假定 A 值为 10，B 值为 20            运算符      描述      实例                  ==      检查两个值是否相等，如果相等返回 True 否则返回 False。      (A == B) 为 False              !=      检查两个值是否不相等，如果不相等返回 True 否则返回 False。      (A != B) 为 True              &gt;      检查左边值是否大于右边值，如果是返回 True 否则返回 False。      (A &gt; B) 为 False              &lt;      检查左边值是否小于右边值，如果是返回 True 否则返回 False。      (A &lt; B) 为 True              &gt;=      检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。      (A &gt;= B) 为 False              &lt;=      检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。      (A &lt;= B) 为 True      逻辑运算符  假定 A 值为 True，B 值为 False。            运算符      描述      实例                  &amp;&amp;      逻辑 AND 运算符。 如果两边的操作数都是 True，则条件 True，否则为 False。      (A &amp;&amp; B) 为 False              ||      逻辑 OR 运算符。 如果两边的操作数有一个 True，则条件 True，否则为 False。      (A || B) 为 True              !      逻辑 NOT 运算符。 如果条件为 True，则逻辑 NOT 条件 False，否则为 True。      !(A &amp;&amp; B) 为 True      位运算符            p      q      p &amp; q      p | q      p ^ q                  0      0      0      0      0              0      1      0      1      1              1      1      1      1      0              1      0      0      1      1        假定 A 为60，B 为13            运算符      描述      实例                  &amp;      按位与运算符”&amp;”是双目运算符。 其功能是参与运算的两数各对应的二进位相与。      (A &amp; B) 结果为 12, 二进制为 0000 1100              |      按位或运算符”|”是双目运算符。 其功能是参与运算的两数各对应的二进位相或      (A | B) 结果为 61, 二进制为 0011 1101              ^      按位异或运算符”^”是双目运算符。 其功能是参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。      (A ^ B) 结果为 49, 二进制为 0011 0001              «      左移运算符”«“是双目运算符。左移n位就是乘以2的n次方。 其功能把”«“左边的运算数的各二进位全部左移若干位，由”«“右边的数指定移动的位数，高位丢弃，低位补0。      A « 2 结果为 240 ，二进制为 1111 0000              »      右移运算符”»“是双目运算符。右移n位就是除以2的n次方。 其功能是把”»“左边的运算数的各二进位全部右移若干位，”»“右边的数指定移动的位数。      A » 2 结果为 15 ，二进制为 0000 1111      赋值运算符            运算符      描述      实例                  =      简单的赋值运算符，将一个表达式的值赋给一个左值      C = A + B 将 A + B 表达式结果赋值给 C              +=      相加后再赋值      C += A 等于 C = C + A              -=      相减后再赋值      C -= A 等于 C = C - A              *=      相乘后再赋值      C *= A 等于 C = C * A              /=      相除后再赋值      C /= A 等于 C = C / A              %=      求余后再赋值      C %= A 等于 C = C % A              «=      左移后赋值      C «= 2 等于 C = C « 2              »=      右移后赋值      C »= 2 等于 C = C » 2              &amp;=      按位与后赋值      C &amp;= 2 等于 C = C &amp; 2              ^=      按位异或后赋值      C ^= 2 等于 C = C ^ 2              |=      按位或后赋值      C |= 2 等于 C = C | 2      其他运算符            运算符      描述      实例                  &amp;      返回变量存储地址      &amp;a; 将给出变量的实际地址。              *      指针变量。      *a; 是一个指针变量      条件语句ifpackage mainimport \"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"func main() {\tvar age int\tage = 18\tif age &gt;= 18 {\t\tlogs.Info(\"你已经成年了！\")\t}\tlogs.Info(\"判断结果\", age &gt;= 18)}2020/04/02 13:43:26.410 [I] [main.go:9]  你已经成年了！2020/04/02 13:43:26.432 [I] [main.go:11]  判断结果 trueif elsepackage mainimport \"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"func main() {\tvar name string\tname = \"Cc\"\tif name == \"Lcc\" {\t\tlogs.Info(\"我的名字叫%s\", name)\t} else {\t\tlogs.Info(\"我的名字叫%s\", name)\t}}2020/04/02 13:54:26.758 [I] [ifelse.go:11]  我的名字叫Ccif 嵌套package mainimport \"github.com/Cc360428/HelpPackage/UtilsHelp/logs\"func main() {\tvar age int\tage = 18\tif age &gt;= 18 {\t\tlogs.Info(\"你已经成年了！\")\t\tif true {\t\t\tlogs.Info(\"你现在%d了，可以开车了！\", age)\t\t}\t}\tlogs.Info(\"判断结果\", age &gt;= 18)}2020/04/02 14:00:13.685 [I] [ifelse2.go:9]  你已经成年了！2020/04/02 14:00:13.704 [I] [ifelse2.go:11]  你现在18了，可以开车了！2020/04/02 14:00:13.705 [I] [ifelse2.go:14]  判断结果 true switch  switch   可以做类型判断package mainimport (\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\")func main() {\t/* 定义局部变量 */\tvar grade = \"B\"\tvar marks int = 90\tswitch marks {\tcase 90:\t\tgrade = \"A\"\tcase 80:\t\tgrade = \"B\"\tcase 50, 60, 70:\t\tgrade = \"C\"\tdefault:\t\tgrade = \"D\"\t}\tswitch {\tcase grade == \"A\":\t\tlogs.Info(\"优秀!\")\tcase grade == \"B\", grade == \"C\":\t\tlogs.Info(\"良好\")\tcase grade == \"D\":\t\tlogs.Info(\"及格\")\tcase grade == \"F\":\t\tlogs.Info(\"不及格\")\tdefault:\t\tlogs.Info(\"差\")\t}\tlogs.Info(\"你的等级是 %s\", grade)}2020/04/06 14:46:51.571 [I] [switch.go:21]  优秀!2020/04/06 14:46:51.595 [I] [switch.go:31]  你的等级是 Aselectpackage mainimport (\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\")func main() {\tvar c1, c2, c3 chan int\tvar i1, i2 int\tselect {\tcase i1 = &lt;-c1:\t\tlogs.Info(\"received \", i1, \" from c1\")\tcase c2 &lt;- i2:\t\tlogs.Info(\"sent \", i2, \" to c2\\n\")\tcase i3, ok := &lt;-c3:\t\tif ok {\t\t\tlogs.Info(\"received \", i3, \" from c3\")\t\t} else {\t\t\tlogs.Info(\"c3 is closed \")\t\t}\tdefault:\t\tlogs.Info(\"no communication\")\t}}2020/04/06 14:51:51.093 [I] [select.go:22]  no communication"
  },
  
  {
    "title": "Day02（入门基础）",
    "url": "/blog.github.io/posts/datatype/",
    "categories": "Server",
    "tags": "golang, GoBase",
    "date": "2019-03-31 21:18:30 +0800",
    





    "snippet": "数据类型、变量、常量本章源码数据类型  package builtin  可以看数据包builtin  布尔类型          默认值为：false        数字类型                  整形                  默认值为：0                            浮点型                  默认值为：0                          字符串类型          默认值为：“”（空字符串）        派生类型                  指针类型                  默认值为：nil                    数组类型      结构体      Channel      函数类型      切片      接口      Map（集合）        下载依赖              下载依赖包 go get -u github.com/Cc360428/HelpPackage  这个人自己写的工具包，在终端执行即可，代码回在环境变量 GOPATH   下src面 。设置过环境变量（go 1.11以上）,会在GOPATH  下pkg/mod面，这里连带讲下GOPATH 下三个文件夹剩下 bin 这个文件夹，使用go build 带一定参数执行会把windows -&gt; .exe 执行文件自动放到这个文件，在任何终端就可以执行你go build  文件命令$ go env |grep GOPATH;pwd;ll -lset GOPATH=D:\\file\\gopath/d/file/gopathtotal 20drwxr-xr-x 1 Cc 197121 0  3月 28 21:58 bin/drwxr-xr-x 1 Cc 197121 0  1月 14 16:30 pkg/drwxr-xr-x 1 Cc 197121 0  3月 29 21:33 src/变量  变量声明之后没有赋值，所有的都为默认值常量注意事项  iota 表示从 0 开始自动加 1，所以 i=1«0, j=3«1（« 表示左移的意思），即：i=1, j=6，这没问题，关键在 k 和 l，从输出结果看 k=3«2，l=3«3。简单表述:  i=1  ：左移 0 位,不变仍为 1;  j=3：左移 1 位,变为二进制 110, 即 6;  k=3：左移 2 位,变为二进制 1100, 即 12;  l=3：左移 3 位,变为二进制 11000,即 24。  注：&lt;示例源码地址package main// 要使用的包在 importimport (\t\"errors\"\t\"fmt\"\t\"github.com/Cc360428/HelpPackage/UtilsHelp/logs\")func main() {\tstr := \"可以使用  := 快速定义类型  := 后面是什么类型就是什么类型\"\tfmt.Println(str)\tvar b bool\tfmt.Println(b)\tvar age int\tage = 18\tlogs.Info(age)\tvar name string\tname = \"lcc\" + \"Hyper\" + \"Cc\"\tlogs.Info(name)\tlogs.Info(name, age)\tvar p float64\tp = 1.11*22/2 + 100 - 112.21\tlogs.Info(p)\tvar a, d string\ta = \"a\"\td = \"d\"\tlogs.Info(a, d)\tvar a1, a2 = 12, 22\tlogs.Info(a1, a2)\ts1, s2 := \"lcc\", \"ok\"\tlogs.Info(s1, s2)\tvar f float64\tlogs.Info(f)\tvar s *string\tlogs.Info(s)\tvar err error\terr = errors.New(\"error 为错误类型\")\tif err != nil {\t\tlogs.Error(err.Error())\t}\tvar array [2]int\tarray[0] = 2\tarray[1] = 2323\tres := fmt.Sprintf(\"长度%d,容量%d\", len(array), cap(array))\tlogs.Info(res, \"内容\", array, \"可以通过下标查找更改\", array[1])\tvar chanType chan int\tlogs.Info(chanType)\tmapType := make(map[string]interface{})\tmapType[\"name\"] = \"lcc\"\tmapType[\"age\"] = \"18\"\tlogs.Info(mapType)\ttype User struct {\t\tName string\t\tAge  int\t}\tuser := new(User)\tuser.Name = \"Cc\"\tuser.Age = 23\tlogs.Info(user.Age, user.Name)\tlogs.Info(user)\t// 常量\tconst LENGTH int = 10\tconst WIDTH int = 5\tvar area int\tarea = LENGTH * WIDTH\tlogs.Info(\"面积为 : %d ,可以做运算\", area)\tconst (\t\taa1 = iota\t\taa2\t\taa3\t)\tlogs.Info(aa1, aa2, aa3)\tconst (\t\ta11 = iota // 0\t\tb12        // 1\t\tc13        // 2\t\td14 = \"ha\" // 独立值，iota += 1\t\te15        // \"ha\"   iota += 1\t\tf16 = 100  // iota +=1\t\tg17        // 100  iota +=1\t\th18 = iota // 7,恢复计数\t\ti19        // 8\t)\tlogs.Info(a11, b12, c13, d14, e15, f16, g17, h18, i19)\tconst (\t\ti = 1 &lt;&lt; iota\t\tj = 3 &lt;&lt; iota\t\tk\t\tl\t)\tlogs.Info(i, j, k, l)}执行结果可以使用  := 快速定义类型  := 后面是什么类型就是什么类型false2020/03/31 22:51:28.340 [I] [main.go:17]  182020/03/31 22:51:28.360 [I] [main.go:20]  lccHyperCc2020/03/31 22:51:28.360 [I] [main.go:21]  lccHyperCc 182020/03/31 22:51:28.360 [I] [main.go:24]  02020/03/31 22:51:28.360 [I] [main.go:28]  a d2020/03/31 22:51:28.360 [I] [main.go:30]  12 222020/03/31 22:51:28.361 [I] [main.go:32]  lcc ok2020/03/31 22:51:28.361 [I] [main.go:34]  02020/03/31 22:51:28.361 [I] [main.go:36]  &lt;nil&gt;2020/03/31 22:51:28.361 [E] [main.go:40]  error 为错误类型2020/03/31 22:51:28.361 [I] [main.go:46]  长度2,容量2 内容 [2 2323] 可以通过下标查找更改 23232020/03/31 22:51:28.361 [I] [main.go:48]  &lt;nil&gt;2020/03/31 22:51:28.361 [I] [main.go:52]  map[age:18 name:lcc]2020/03/31 22:51:28.361 [I] [main.go:60]  23 Cc2020/03/31 22:51:28.361 [I] [main.go:61]  &amp;{Cc 23}2020/03/31 22:51:28.361 [I] [main.go:67]  面积为 : 50 ,可以做运算2020/03/31 22:51:28.361 [I] [main.go:73]  0 1 22020/03/31 22:51:28.361 [I] [main.go:85]  0 1 2 ha ha 100 100 7 82020/03/31 22:51:28.361 [I] [main.go:92]  1 6 12 24"
  },
  
  {
    "title": "Golang 入门介绍",
    "url": "/blog.github.io/posts/base/",
    "categories": "Server",
    "tags": "golang, GoBase",
    "date": "2019-03-30 23:31:59 +0800",
    





    "snippet": "Golang基础本章源码初步认识Golang  Go 跨平台（linux、windows、mac），只要编写完代码之后交叉编译即可  Go 语言单一、简洁、天生高并发、CGO  Go  应用广（web应用、区块链、运维、云计算、大数据）Go环境  不管学那一语言都有自己运行环境（html5除外），对于Go环境golang 官网有windows、linux、mac ，源码安装以及对应安装包，自己安装即可安装打开计算机终端检查是否安装成功C:\\Users\\Cc&gt;go versiongo version go1.13.4 windows/amd64C:\\Users\\Cc&gt;go envset GO111MODULE=set GOARCH=amd64set GOBIN=set GOCACHE=C:\\Users\\Cc\\AppData\\Local\\go-buildset GOENV=C:\\Users\\Cc\\AppData\\Roaming\\go\\envset GOEXE=.exeset GOFLAGS=set GOHOSTARCH=amd64set GOHOSTOS=windowsset GONOPROXY=set GONOSUMDB=set GOOS=windowsset GOPATH=D:\\file\\gopathset GOPRIVATE=set GOPROXY=https://goproxy.ioset GOROOT=C:\\Program Files\\Golangset GOSUMDB=sum.golang.orgset GOTMPDIR=set GOTOOLDIR=C:\\Program Files\\Golang\\pkg\\tool\\windows_amd64set GCCGO=gccgoset AR=arset CC=gccset CXX=g++set CGO_ENABLED=1set GOMOD=set CGO_CFLAGS=-g -O2set CGO_CPPFLAGS=set CGO_CXXFLAGS=-g -O2set CGO_FFLAGS=-g -O2set CGO_LDFLAGS=-g -O2set PKG_CONFIG=pkg-configset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\Cc\\AppData\\Local\\Temp\\go-build742472330=/tmp/go-build -gno-record-gcc-switchesC:\\Users\\Cc&gt;环境变量  注：GOROOT、GOPATH、GOOS、GOHOSTARCH  、GO111MODULE、GOPROXY 重要Git 工具安装  go get 下载代码需要 依赖 gitGolang 开发工具  推荐开发工具  Goland  vs code  vimGolang HelloWorld 在某个目录下面创建 main.gopackage mainimport \"fmt\"func main() {\tfmt.Println(\"Hello World!\")}编译运行D:\\file\\gopath\\src\\Cc360428\\helloWorld&gt;go build -o helloWorld.exeD:\\file\\gopath\\src\\Cc360428\\helloWorld&gt;helloWorld.exeHello World!D:\\file\\gopath\\src\\Cc360428\\helloWorld&gt;基础语法分隔符一行代表一个结束，每一句不需要与其他语言一行;来表示结束，Go语言在编译时i自动会完成注释// 单行注释/**多行注释*/标识符  标识符用来命名变量、常量、实体  不能以数字开头  Go语言关键字不能使用  运算符不能使用关键字  25个关键保留字  36个预定义标识符常见  变量的声明必须使用空格隔开  运算符之间加空格，一定时候加空格会跟好看，不要怕会占空间、go 语言编译时候可以去掉空格和换行  未使用的变量会编译不通过  写完代码之后常见使用go fmt [*.go]格式化代码      pubulic And private          不管变量名或者是方法名，如果首字母大写就是(pubulic) ，首字母小写就是(private)      基础学习路线        数据类型  变量  常量  运算符  条件语句  循环语句  函数  变量作用域  数组  指针  结构体  切片（Slice）  range使用  Map（集合）  Container  接口  错误处理  并发本教程代码所有都会公开到 gitee.com  为什么不使用 github.com  因为github 下载会受到网络影响，所以 go 教程代码会使用gitee  代码管理，在此也谢谢 gitee gitee 仓库地址gitee 地址"
  },
  
  {
    "title": "Golang Base",
    "url": "/blog.github.io/posts/baseAll/",
    "categories": "Server",
    "tags": "golang, GoBase",
    "date": "2019-03-07 09:21:03 +0800",
    





    "snippet": "GoLangGoLanghttps://go-zh.org/基础包、变量和函数、基本类型  包  package  每个程序都是由包组成  导入  import  圆括号可以组合导入  导出  在Go语言中首字母大写的名称是被导出的          导入了一个包后，可以导出名称来调用他      Foo 和 FOO 都是被导出的名称。名称 foo 是不会被导出的        函数          函数可以返回任意数量的返回值        变量          var      :=        基本类型          bool      string      int int8 int64 int32 int64      byte      rune      float32 float64      complex64 complex128                  定义是未明确初始化值为：数值类型为0、布尔类型为 false 字符类型为””                      类型转换  常量          关键字定义：const                  注： 不能使用 :=                    流程控制语句  for  if  else  switch    复杂类型    defer          defer 语句会延迟函数的执行上层函数返回      延迟的函数调用被压入一个栈中。当函数返回时， 会按照后进先出的顺序调用被延迟的函数调用                  个人理解就是，最后执行内容                      指针          Go具有指针，指针保存了变量的内存地址      通俗的说就是间接引用和非直接引用        struct（结构体）          就是字段集合      结构体字段使用点号来访问        数组          var a [10]int64        slice(切片)          切片会指向一个序列的值      切片可以用:符号来切开 接下来可以看一段代码      \tp := []int{2, 3, 5, 7, 11, 13}  \tfmt.Println(\"p ==\", p)  \tfmt.Println(\"p[1:4] ==\", p[1:4])  \t// 省略下标代表从 0 开始   \tfmt.Println(\"p[:3] ==\", p[:3])  \t\t// 省略上标代表到 len(s) 结束  \t\tfmt.Println(\"p[4:] ==\", p[4:])\t3. 切片有长度和容量(可以看以下代码)\t1. 长度可以看现在有多少\t2. 容量可以看出这个切片最多能容纳多少切片\tslice 有函数make 创建然后分配长度和容量  \t在工作中   \ta := make([]int64 ,5)  \t长度为5 // len(a)=5  \t标准的用法和官网实例如下：  \tb := make([]int, 0, 5) // len(b)=0, cap(b)=5   \tb = b[:cap(b)] // len(b)=5, cap(b)=5  \tb = b[1:]  // len(b)=4, cap(b)=4 4. slice 的零值为 nil\t\t一个nil的slice的长度和容量都是05. slice 可以添加元素有相应的AIP文档自行去查找 - rangefor 循环 可以对slice 和 map 进行迭代循环\t - map1. map 键值对的形式存储2. map 使用前必须用make而不是new来创建 值为nil的map 并不能赋值3. map 增删改查\tm[key] = elem (增、改)  \tdelete(m, key) （删）  \telem = m[key] （查）  \telem, ok = m[key] （校验是否存在)  函数值          函数也可以当做变量使用      \thypot := func(x, y float64) float64 {  \t\treturn math.Sqrt(x*x + y*y)  \t\t}   \tfmt.Println(hypot(3, 4))  函数闭包  其实闭包方通俗的讲就是，这个函数被绑定这个变量上    方法和接口    Go 没有Java类似的类，但是可以在结构体上定义方法    方法和接口          你可以对包中的 任意 类型定义任意方法，而不仅仅是针对结构体（可以看一段代码 你就明白了怎么回事）          \tpackage main      import (          \"fmt\"          \"math\"      )\t\t      type MyFloat float64\t\t      func (f MyFloat) Abs() float64 {          if f &lt; 0 {              return float64(-f)          }          return float64(f)      }\t\t      func main() {          f := MyFloat(-math.Sqrt2)          fmt.Println(f.Abs())      }            接收者为指针的方法 方法可以与命名类型或命名类型的指针关联。     刚刚看到的两个 Abs 方法。一个是在 *Vertex 指针类型上，而另一个在 MyFloat 值类型上。 有两个原因需要使用指针接收者。首先避免在每个方法调用中拷贝值（如果值类型是大的结构体的话会更有效率）。其次，方法可以修改接收者指向的值。     尝试修改 Abs 的定义，同时 Scale 方法使用 Vertex 代替 *Vertex 作为接收者。     当 v 是 Vertex 的时候 Scale 方法没有任何作用。Scale 修改 v。当 v 是一个值（非指针），方法看到的是 Vertex 的副本，并且无法修改原始值。     Abs 的工作方式是一样的。只不过，仅仅读取 v。所以读取的是原始值（通过指针）还是那个值的副本并没有关系。     \tpackage main\t\t     import (         \"fmt\"         \"math\"     )\t\t     type Vertex struct {         X, Y float64     }\t\t     func (v *Vertex) Scale(f float64) {         v.X = v.X * f         v.Y = v.Y * f     }\t\t     func (v *Vertex) Abs() float64 {         return math.Sqrt(v.X*v.X + v.Y*v.Y)     }\t\t     func main() {         v := &amp;Vertex{3, 4}         v.Scale(5)         fmt.Println(v, v.Abs())     }        接口          接口是一组方法定义的集合，接口类型的值可以存放实现这些方法的任何值。      隐式接口      \tpackage main\timport (\t\t\"fmt\"\t\t\"math\"\t)\ttype Abser interface {\t\tAbs() float64\t}\tfunc main() {\t\tvar a Abser\t\tf := MyFloat(-math.Sqrt2)\t\tv := Vertex{3, 4}\t\t\ta = f  // a MyFloat 实现了 Abser\t\ta = &amp;v // a *Vertex 实现了 Abser\t\t\t// 下面一行，v 是一个 Vertex（而不是 *Vertex）\t\t// 所以没有实现 Abser。 指针类型\t\ta = v\t\t\t\tfmt.Println(a.Abs())\t}\ttype MyFloat float64\t\tfunc (f MyFloat) Abs() float64 {\t\tif f &lt; 0 {\t\t\treturn float64(-f)\t\t}\t\treturn float64(f)\t}\t\ttype Vertex struct {\t\tX, Y float64\t}\t\tfunc (v *Vertex) Abs() float64 {\t\treturn math.Sqrt(v.X*v.X + v.Y*v.Y)\t}  错误          errorerror 为 nil 时表示成功；非 nil 的 error 表示错误。      并发      goroutine      goroutine 是由 Go 运行时环境管理的轻量级线程。示例```go      package main          import (      \"fmt\"      \"time\"  )\t  func say(s string) {      for i := 0; i &lt; 5; i++ {          time.Sleep(100 * time.Millisecond)          fmt.Println(s)      }  }\t  func main() {      go say(\"world\")      say(\"hello\")  } ``` ##### channel    1. channel 是有类型的管道，可以用 channel 操作符 &lt;- 对其发送或者接收值。   示例： ```go   package main        import “fmt”    func sum(a []int, c chan int) {      sum := 0      for _, v := range a {          sum += v      }      c &lt;- sum // 将和送入 c  }    func main() {      a := []int{7, 2, 8, -9, 4, 0}    c := make(chan int)  go sum(a[:len(a)/2], c)  go sum(a[len(a)/2:], c)  x, y := &lt;-c, &lt;-c // 从 c 中获取    fmt.Println(x, y, x+y)  }```      2. channel 可以是 带缓冲的ch := make(chan int, 100)向缓冲 channel 发送数据的时候，只有在缓冲区满的时候才会阻塞。当缓冲区清空的时候接受阻塞。修改例子使得缓冲区被填满，然后看看会发生什么。  range 和 close发送者可以 close 一个 channel 来表示再没有值会被发送了。接收者可以通过赋值语句的第二参数来测试 channel 是否被关闭：当没有值可以接收并且 channel 已经被关闭，那么经过v, ok := &lt;-ch之后 ok 会被设置为 false。循环 for i := range c 会不断从 channel 接收值，直到它被关闭。注意： 只有发送者才能关闭 channel，而不是接收者。向一个已经关闭的 channel 发送数据会引起 panic。 还要注意：   channel 与文件不同；通常情况下无需关闭它们。只有在需要告诉接收者没有更多的数据的时候才有必要进行关闭，例如中断一个 range。\tpackage main\timport (\t\t\"fmt\"\t)\t\tfunc fibonacci(n int, c chan int) {\t\tx, y := 0, 1\t\tfor i := 0; i &lt; n; i++ {\t\t\tc &lt;- x\t\t\tx, y = y, x+y\t\t}\t\tclose(c)\t}\t\tfunc main() {\t\tc := make(chan int, 10)\t\tgo fibonacci(cap(c), c)\t\tfor i := range c {\t\t\tfmt.Println(i)\t\t}\t}select      select 语句使得一个 goroutine 在多个通讯操作上等待。 select 会阻塞，直到条件分支中的某个可以继续执行，这时就会执行那个条件分支。当多个都准备好的时候，会随机选择一个。 ```go     package main     import \"fmt\"     func fibonacci(c, quit chan int) { \tx, y := 0, 1 \tfor { \t\tselect { \t\tcase c &lt;- x: \t\t\tx, y = y, x+y \t\tcase &lt;-quit: \t\t\tfmt.Println(\"quit\") \t\t\treturn \t\t} \t} }     func main() { \tc := make(chan int) \tquit := make(chan int) \tgo func() { \t\tfor i := 0; i &lt; 10; i++ { \t\t\tfmt.Println(&lt;-c) \t\t} \t\tquit &lt;- 0 \t}() \tfibonacci(c, quit) } ```        select 默认分支 当 select 中的其他条件分支都没有准备好的时候，default 分支会被执行。 为了非阻塞的发送或者接收，可使用 default 分支：    select {case i := &lt;-c:// 使用 idefault:// 从 c 读取会阻塞}        等价二叉树        实现 Walk 函数。        测试 Walk 函数。    函数 tree.New(k) 构造了一个随机结构的二叉树，保存了值 k，2k，3k，…，10k。 创建一个新的 channel ch 并且对其进行步进：    go Walk(tree.New(1), ch) 然后从 channel 中读取并且打印 10 个值。应当是值 1，2，3，…，10。        用 Walk 实现 Same 函数来检测是否 t1 和 t2 存储了相同的值。    测试 Same 函数。     Same(tree.New(1), tree.New(1)) 应当返回 true，而 Same(tree.New(1), tree.New(2)) 应当返回 false。package mainimport \"code.google.com/p/go-tour/tree\"// Walk 步进 tree t 将所有的值从 tree 发送到 channel ch。func Walk(t *tree.Tree, ch chan int)// Same 检测树 t1 和 t2 是否含有相同的值。func Same(t1, t2 *tree.Tree) boolfunc main() {}"
  },
  
  {
    "title": "Reids 安装",
    "url": "/blog.github.io/posts/redis-centos-7/",
    "categories": "SystemUtils",
    "tags": "Redis",
    "date": "2019-01-26 12:48:54 +0800",
    





    "snippet": "方法一：源文件安装（推荐安装）在CentOS和Red Hat系统中，首先添加EPEL仓库，然后更新yum源：sudo yum install epel-releasesudo yum update然后安装Redis数据库：sudo yum -y install redis安装好后启动Redis服务即可：sudo systemctl start redis这里同样可以使用redis-cli进入Redis命令行模式操作。另外，为了可以使Redis能被远程连接，需要修改配置文件，路径为/etc/redis.confvi /etc/redis.conf需要修改的地方：首先，注释这一行：#bind 127.0.0.1另外，推荐给Redis设置密码，取消注释这一行：#requirepass foobaredfoobared即当前密码，可以自行修改为requirepass 密码然后重启Redis服务，使用的命令如下：sudo systemctl restart redissystemctl start redis.service #启动redis服务器systemctl stop redis.service #停止redis服务器systemctl restart redis.service #重新启动redis服务器systemctl status redis.service #获取redis服务器的运行状态systemctl enable redis.service #开机启动redis服务器systemctl disable redis.service #开机禁用redis服务器详情可参考链接：Linux CentOS 7安装Redis服务器教程​www.centos.bz方法二；压缩包安装一、安装1、在官网下载tar.gz的安装包，或者通过wget的方式下载　　wget http://download.redis.io/releases/redis-4.0.1.tar.gz2、解压tar -zxvf redis-4.0.1.tar.gz3、编译通过make来编译，make是自动编译，会根据Makefile中描述的内容来进行编译。cd redis-4.0make可以看到在src目录下生成了几个新的文件。4、安装make install实际上，就是将这个几个文件加到/usr/local/bin目录下去。这个目录在Path下面的话，就可以直接执行这几个命令了。可以看到，这几个文件就已经被加载到bin目录下了5、启动服务器，来看看安装是否成功。使用redis-server命令。再启动一个linux客户端，redis-cli打开客户端　　6、关闭服务器再启动一个linux客户端，通过server-cli shutdown来关闭服务器。二、配置1、设置redis服务器后台启动前面在启动redis服务器后，都是在前台启动的，需要重新启动一个客户端来进行登陆操作。这样非常不方便，所以，我们需要设置后台启动。daemonize no修改为：daemonize yes卸载redis卸载redis服务，只需把/usr/local/bin/目录下的redis删除即可rm -rf /usr/local/bin/redis*甚至可以把解压包也删除掉rm -rf /root/redis-stablewindows redis 加入开机自启redis-server --service-install redis.windows-service.conf  --loglevel verboseredis-server –service-install redis.windows.confredis-cli.exeauth rootconfig set requirepass root CONFIG SET requirepass \"123456\"  AUTH 123456"
  },
  
  {
    "title": "Redis 汇总",
    "url": "/blog.github.io/posts/redis-all/",
    "categories": "SystemUtils",
    "tags": "Redis",
    "date": "2019-01-26 12:48:54 +0800",
    





    "snippet": "Redis（Remote Dictionary Server）什么是Redis  是一个使用 C 语言编写的，开源的（BSD许可）高性能非关系型（NoSQL）的键值对数据库。  Redis 可以存储键和五种不同类型的值之间的映射。键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。  与传统数据库不同的是 Redis 的数据是存在内存中的，所以读写速度非常快，因此 redis 被广泛应用于缓存方向，每秒可以处理超过 10万次读写操作，是已知性能最快的Key-Value DB。另外，Redis 也经常用来做分布式锁。除此之外，Redis 支持事务 、持久化、LUA脚本、LRU驱动事件、多种集群方案。Redis 优缺点优点  读写性能优异， Redis能读的速度是110000次/s，写的速度是81000次/s。  支持数据持久化，支持AOF和RDB两种持久化方式。  支持事务，Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行。  数据结构丰富，除了支持string类型的value外还支持hash、set、zset、list等数据结构。  支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。缺点  数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。  Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。  主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。  Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。为什么要使用Redis高性能  假如用户第一次访问数据库中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。将该用户访问的数据存在数缓存中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！高并发  直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。Redis 为什么这么快1、完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是O(1)；2、数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的；3、采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；4、使用多路 I/O 复用模型，非阻塞 IO；5、使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；数据类型  5种主要数据类型（string 、list、set、zset、hash）应用场景计数器可以对 String 进行自增自减运算，从而实现计数器功能。Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。缓存将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。会话缓存可以使用 Redis 来统一存储多台应用服务器的会话信息。当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。全页缓存（FPC）除基本的会话token之外，Redis还提供很简便的FPC平台。以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。此外，对WordPress的用户来说，Pantheon有一个非常好的插件 wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。查找表例如 DNS 记录就很适合使用 Redis 进行存储。查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。消息队列(发布/订阅功能)List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息。不过最好使用 Kafka、RabbitMQ 等消息中间件。分布式锁实现在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。其它Set 可以实现交集、并集等操作，从而实现共同好友等功能。ZSet 可以实现有序性操作，从而实现排行榜等功能。应用场景总结  string——适合最简单的k-v存储，类似于memcached的存储结构，短信验证码，配置信息等，就用这种类型来存储。  hash——一般key为ID或者唯一标示，value对应的就是详情了。如商品详情，个人信息详情，新闻详情等。  list——因为list是有序的，比较适合存储一些有序且数据相对固定的数据。如省市区表、字典表等。因为list是有序的，适合根据写入的时间来排序，如：最新的，消息队列等  set——可以简单的理解为ID-List的模式，如微博中一个人有哪些好友，set最牛的地方在于，可以对两个set提供交集、并集、差集操作。例如：查找两个人共同的好友等。  Sorted Set——是set的增强版本，增加了一个score参数，自动会根据score的值进行排序。比较适合类似于top 10等不根据插入的时间来排序的数据。持久化  提供两种持久化机制 RDB（默认） 和 AOF 机制RDB(Redis Data Base)  RDB是默认持久化，按照一定时间将内存中数据把保存硬盘中，会产出数据文件dump.rdb，时间可以通过配置文件save 参数配置  自动触发save 900 1：表示900 秒内如果至少有 1 个 key 的值变化，则保存save 300 10：表示300 秒内如果至少有 10 个 key 的值变化，则保存save 60 10000：表示60 秒内如果至少有 10000 个 key 的值变化，则保存      手动触发          save        　该命令会阻塞当前Redis服务器，执行save命令期间，Redis不能处理其他命令，直到RDB过程完成为止。    　　显然该命令对于内存比较大的实例会造成长时间阻塞，这是致命的缺陷，为了解决此问题，Redis提供了第二种方式。          bgsave        执行该命令时，Redis会在后台异步进行快照操作，快照同时还可以响应客户端请求。具体操作是Redis进程执行fork操作创建子进程，RDB持久化过程由子进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短。          基本上 Redis 内部所有的RDB操作都是采用 bgsave 命令。      执行执行 flushall 命令，也会产生dump.rdb文件，但里面是空的      优点：1、只有一个文件 dump.rdb，方便持久化。2、容灾性好，一个文件可以保存到安全的磁盘。3、性能最大化，fork 子进程来完成写操作，让主进程继续处理命令，所以是 IO 最大化。使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis 的高性能4.相对于数据集大时，比 AOF 的启动效率更高。缺点：1、数据安全性低。RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候)2、AOF（Append-only file)持久化方式：是指所有的命令行记录以 redis 命令请 求协议的格式完全持久化存储)保存为 aof 文件AOF (Append Only File)  每次写命令记录到单独文件日志文件中，当重启讲持久化日志中文件恢复数据优点：1、数据安全，aof 持久化可以配置 appendfsync 属性，有 always，每进行一次 命令操作就记录到 aof 文件中一次。2、通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。3、AOF 机制的 rewrite 模式。AOF 文件没被 rewrite 之前（文件过大时会对命令 进行合并重写），可以删除其中的某些命令（比如误操作的 flushall）)缺点：1、AOF 文件比 RDB 文件大，且恢复速度慢。2、数据集大的时候，比 rdb 启动效率低。RDB and AOF  AOF文件比RDB更新频率高，优先使用AOF还原数据。  AOF比RDB更安全也更大  RDB性能比AOF好  如果两个都配了优先加载AOF如何选择持久化方式  一般来说， 如果想达到足以媲美PostgreSQL的数据安全性，你应该同时使用两种持久化功能。在这种情况下，当 Redis 重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。  如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失，那么你可以只使用RDB持久化。  有很多用户都只使用AOF持久化，但并不推荐这种方式，因为定时生成RDB快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比AOF恢复的速度要快，除此之外，使用RDB还可以避免AOF程序的bug。  如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化方式。事务127.0.0.1:6379&gt; MULTIOK127.0.0.1:6379&gt; SET name lccQUEUED127.0.0.1:6379&gt; get nameQUEUED127.0.0.1:6379&gt; sadd tags \"java\" \"golang\"QUEUED127.0.0.1:6379&gt; smembers tagQUEUED127.0.0.1:6379&gt; exec1) OK2) \"lcc\"3) (integer) 24) (empty list or set)127.0.0.1:6379&gt;            序号      命令及描述                  1      DISCARD 取消事务，放弃执行事务块内的所有命令。              2      EXEC 执行所有事务块内的命令。              3      MULTI 标记一个事务块的开始。              4      UNWATCH 取消 WATCH 命令对所有 key 的监视。              5      WATCH key [key …]] 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。      集群方案  哨兵模式缓存异常缓存雪崩  缓存雪崩是指缓存同一时间大面积的失效，所以，后面的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩掉。解决方案  缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。  一般并发量不是特别多的时候，使用最多的解决方案是加锁排队。  给每一个缓存数据增加相应的缓存标记，记录缓存的是否失效，如果缓存标记失效，则更新数据缓存。缓存穿透  缓存穿透是指缓存和数据库中都没有的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉解决方案  接口层增加校验，如用户鉴权校验，id做基础校验，id&lt;=0的直接拦截；  从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击  采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力缓存击穿Redis 与 Mysql 同步机制Mysql 同步到Redis      在redis数据库设置缓存时间，当该条数据缓存时间过期之后自动释放，去数据库进行重新查询，但这样的话，我们放在缓存中的数据对数据的一致性要求不是很高才能放入缓存当中          缓存量大但又不常变化的数据，比如商品信息的评论            基于binlog使用mysql_udf_redis，将数据库中的数据同步到Redis          无论MySQL还是Redis，自身都带有数据同步的机制，像比较常用的MySQL的Master/Slave模式，就是由Slave端分析Master的binlog来实现的，这样的数据其实还是一个异步过程，只不过当服务器都在同一内网时，异步的延迟几乎可以忽略。      那么理论上我们也可以用同样方式，分析MySQL的binlog文件并将数据插入Redis。但是这需要对binlog文件以及MySQL有非常深入的理解，同时由于binlog存在Statement/Row/Mixedlevel多种形式，分析binlog实现同步的工作量是非常大的            通过MySQL自动同步刷新Redis          当我们在业务层有数据查询需求时，先到Redis缓存中查询，如果查不到，再到MySQL数据库中查询，同时将查到的数据更新到Redis里；当我们在业务层有修改插入数据需求时，直接向MySQL发起请求，同时更新Redis缓存。 就是MySQL的CRUD发生后自动地更新到Redis里，这需要通过MySQL UDF来实现。具体来说，我们把更新Redis的逻辑放到MySQL中去做，即定义一个触发器Trigger，监听CRUD这些操作，当操作发生后，调用对应的UDF函数，远程写回Redis，所以业务逻辑只需要负责更新MySQL就行了，剩下的交给MySQL UDF去完成。            在我们的实际开发当中往往采用如下方式实现实现Mysql和Redis数据同步：当我们在MySQL数据库中进行增删改的时候，我们在增删改的service层将缓存中的数据清除，这个时候用户在此请求的时候我们缓存中没有数据了，直接去数据库中查询，查询回来之后将缓存中的数据放缓存当中，这个时候缓存中的数据就是最新的数据。  Redis同步到MySql  redis读取速度快，也没有必要把所有的数据都放到redis里面，redis里面只放使用频繁，用户操作量较大的数据，或者用户近期使用的数据  不是很重要可以设置定时器，在晚上用户访问少时候同步"
  },
  
  {
    "title": "idea 使用",
    "url": "/blog.github.io/posts/idea%E4%BD%BF%E7%94%A8/",
    "categories": "System",
    "tags": "DevTools",
    "date": "2019-01-26 12:48:54 +0800",
    





    "snippet": "Alt+回车 导入包,自动修正 Ctrl+N 查找类 Ctrl+Shift+N 查找文件 Ctrl+Alt+L 格式化代码 Ctrl+Alt+O 优化导入的类和包 Alt+Insert 生成代码(如get,set方法,构造函数等) Ctrl+E或者Alt+Shift+C 最近更改的代码 Ctrl+R 替换文本 Ctrl+F 查找文本 Ctrl+Shift+Space 自动补全代码 Ctrl+空格 代码提示 Ctrl+Alt+Space 类名或接口名提示 Ctrl+P 方法参数提示 Ctrl+Shift+Alt+N 查找类中的方法或变量 Alt+Shift+C 对比最近修改的代码Shift+F6 重构-重命名 Ctrl+X 删除行 Ctrl+D 复制行 Ctrl+/ 或 Ctrl+Shift+/ 注释（// 或者/…/ ） Ctrl+J 自动代码 Ctrl+E 最近打开的文件 Ctrl+H 显示类结构图 Ctrl+Q 显示注释文档 Alt+F1 查找代码所在位置 Alt+1 快速打开或隐藏工程面板 Ctrl+Alt+ left/right 返回至上次浏览的位置 Alt+ left/right 切换代码视图 Alt+ Up/Down 在方法间快速移动定位 Ctrl+Shift+Up/Down 代码向上/下移动。 F2 或Shift+F2 高亮错误或警告快速定位代码标签输入完成后，按Tab，生成代码。 选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。 Ctrl+W 选中代码，连续按会有其他效果 选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。 Ctrl+Up/Down 光标跳转到第一行或最后一行下 Ctrl+B 快速打开光标处的类或方法"
  },
  
  {
    "title": "Doker 安装",
    "url": "/blog.github.io/posts/docker%E5%AE%89%E8%A3%85/",
    "categories": "utils",
    "tags": "Syetem",
    "date": "2019-01-26 12:48:54 +0800",
    





    "snippet": "Doker 安装卸载就版本sudo apt-get remove docker docker-engine docker.io containerd runc"
  },
  
  {
    "title": "docker 安装实例",
    "url": "/blog.github.io/posts/docker-install/",
    "categories": "SystemUtils",
    "tags": "Docker",
    "date": "2019-01-05 12:48:54 +0800",
    





    "snippet": "安装redis拉去镜像  docker pull redis:latest启动  docker run -d –name redis -p 6379:6379 redis –requirepass “redispassword”docker容器设置开机自启动：--restart具体参数值详细信息no - 容器退出时，不重启容器on-failure - 只有在非0状态退出时才从新启动容器always - 无论退出状态是如何，都重启容器还可以在使用 on-failure 策略时，指定 Docker 将尝试重新启动容器的最大次数；默认情况下，Docker 将尝试永远重新启动容器；　　如果创建时未指定 --restart=always ,可通过 update 命令更改；docker update --restart=always 容器ID配置文件的修改  方法为成功```shell/root/redis/redis/conf/redis.conf 中daemonize=NO。非后台模式，如果为YES 会的导致 redis 无法启动，因为后台会导致docker无任务可做而退出。三 执行dockerdocker run -p 6378:6379 –name redis -v /root/redis/redis/conf/redis.conf:/etc/redis/redis.conf -v /root/redis/redis/data:/data -d redis redis-server /etc/redis/redis.conf –appendonly yes      -p 6378:6379  容器redis 端口6379 映射 宿主机未6378        –name redis01 容器 名字 为 redis01        -v /root/redis/redis/conf/redis.conf:/etc/redis/redis.conf   容器 /etc/redis/redis.conf 配置文件 映射宿主机 /root/redis/redis/conf/redis.conf。  会将宿主机的配置文件复制到docker中。  重要： 配置文件映射，docker镜像redis 默认无配置文件。4 -v /root/redis/redis/data:/data  容器 /data 映射到宿主机 /root/redis/redis/data5.-d redis  后台模式启动 redis  redis-server /etc/redis/redis.conf    redis 将以 /etc/redis/redis.conf 为配置文件启动  –appendonly yes  开启redis 持久化重要:  docker 镜像reids 默认 无配置文件启动```"
  },
  
  {
    "title": "阿里云docker 镜像仓库",
    "url": "/blog.github.io/posts/%E9%98%BF%E9%87%8C%E4%BA%91docker-%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/",
    "categories": "SystemUtils",
    "tags": "Docker",
    "date": "2019-01-01 12:48:54 +0800",
    





    "snippet": "阿里云docker 镜像仓库1. 登录阿里云Docker Registry$ sudo docker login --username=hypeyhyper registry.cn-hangzhou.aliyuncs.com用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。您可以在访问凭证页面修改凭证密码。2. 从Registry中拉取镜像$ sudo docker pull registry.cn-hangzhou.aliyuncs.com/chaochengli/tcpserverandcluster:[镜像版本号]3. 将镜像推送到Registry$ sudo docker login --username=hypeyhyper registry.cn-hangzhou.aliyuncs.com$ sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/chaochengli/tcpserverandcluster:[镜像版本号]$ sudo docker push registry.cn-hangzhou.aliyuncs.com/chaochengli/tcpserverandcluster:[镜像版本号]请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。4. 选择合适的镜像仓库地址从ECS推送镜像时，可以选择使用镜像仓库内网地址。推送速度将得到提升并且将不会损耗您的公网流量。如果您使用的机器位于VPC网络，请使用 registry-vpc.cn-hangzhou.aliyuncs.com 作为Registry的域名登录，并作为镜像命名空间前缀。5. 示例使用\"docker tag\"命令重命名镜像，并将它通过专有网络地址推送至Registry。$ sudo docker imagesREPOSITORY                                                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZEregistry.aliyuncs.com/acs/agent                                    0.7-dfb6816         37bb9c63c8b2        7 days ago          37.89 MB$ sudo docker tag 37bb9c63c8b2 registry-vpc.cn-hangzhou.aliyuncs.com/acs/agent:0.7-dfb6816使用\"docker images\"命令找到镜像，将该镜像名称中的域名部分变更为Registry专有网络地址。$ sudo docker push registry-vpc.cn-hangzhou.aliyuncs.com/acs/agent:0.7-dfb6816参考地址"
  },
  
  {
    "title": "Docker 理论知识",
    "url": "/blog.github.io/posts/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8docker/",
    "categories": "utils",
    "tags": "Syetem",
    "date": "2019-01-01 12:48:54 +0800",
    





    "snippet": "为什么要使用docker简易部署兼容平台简化配置"
  },
  
  {
    "title": "MySQL 入门介绍",
    "url": "/blog.github.io/posts/day01/",
    "categories": "SystemUtils",
    "tags": "Mysql",
    "date": "2018-12-08 22:21:48 +0800",
    





    "snippet": "mysql 环境搭建      安装mysql    mysql&gt; select version();+------------+| version()  |+------------+| 5.7.17-log |+------------+1 row in set (0.03 sec)        创建数据库，与查看          CREATE DATABASE mysql_crash_course CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci';        mysql&gt; show databases;+------------------------------+| Database                     |+------------------------------+| information_schema           || accesshubTest                || beego_view                   || casbin                       || gogs                         || hr                           || hyper_lichaocheng_top_server || images                       || mysql                        || mysql_crash_course           || performance_schema           || radius                       || share                        || sys                          || test                         || tuzi                         |+------------------------------+16 rows in set (0.10 sec)        下载需要的sql 文件、与导入文件          下载文件 打开里面.sql文件 里面有创建数据库语句、先创建数据库然后、进入创建的数据库、再导入文件，下载文件地址download、或者直接查看sql地址，导入或者执行语句、没有报错即可            查看以上导入的数据表    mysql&gt; show tables;+------------------------------+| Tables_in_mysql_crash_course |+------------------------------+| customers                    || orderitems                   || orders                       || productnotes                 || products                     || vendors                      |+------------------------------+6 rows in set (0.03 sec)  第4章（检索数据）4.5 检索不同的行SELECT\tvend_id FROM\tproducts;4.6 限制结果SELECT\tprod_name FROM\tproducts \tLIMIT 5,\t5;第6章（过滤数据）6.1 where 字句SELECT\tprod_name,\tprod_price FROM\tproducts WHERE\tprod_price = 2.50;6.2 where 字句操作符  =  &lt;&gt;不等  !=  &gt;  &gt;=  &lt;=  &lt;  BETWEEN  指定两者之间6.2.1SELECT\tprod_name,\tprod_price FROM\tproducts WHERE\tprod_price &lt; 10;第7章（数据过滤）第14章（使用子查询）14.2SELECT\tcust_id FROM\torders WHERE\torder_num IN ( SELECT order_num FROM orderitems WHERE prod_id = 'TNT2' )\tif else 语句EXPLAIN SELECT\tnattr.vpcname,CASE\t( SELECT attr.STATUS FROM tb_nasnetattr attr WHERE nasid = 92 ) \tWHEN 0 THEN\t'查询原来的表' \tWHEN 1 THEN\t'查询修改的表' \tEND AS long_and_lati FROM\ttb_nasnetattr nattr WHERE\tnattr.nasid = 92;"
  },
  
  {
    "title": "Vue",
    "url": "/blog.github.io/posts/vue/",
    "categories": "Client",
    "tags": "Vue",
    "date": "2018-10-12 22:58:36 +0800",
    





    "snippet": "vue学习网址https://developer.aliyun.com/mirror/NPM?from=tnpm脚手架#全局安装vue的命令行工具npm install -g @vue/cli#验证Vue是否安装成功vue -V#通过脚手架命令行方式创建vue项目vue create vue-demo#通过vue提供的界面来创建vue项目vue ui#启动工程cd vue-demoyarn serve或者npm run dev路径node_modules - 依赖包public 入口页面，ico文件存放位置，一般不动src业务代码书写位置.env.环境名，要配合package.json内的 script脚本使用,例如：“serve”: “vue-cli-service serve --mode development”babel.config.js是对babel语法编译的配置文件package.json项目脚本，以来插件等配置信息postcss.config.js css预处理器配置文件vue.config.js 可选配置文件，如果文件存在，那么它就会被@vue/cli-service自动加载vue-cli脚手架生成的文件有assets、components、router、views、App.vue、main.js上图为我单独配置的一些文件api - 所有api接口都放在此文件夹下assets - 静态文件存放位置，例如：图片，css，万年不变的jscomponents- 所有页面的组件放在此文件夹下，按照页面模块划分filters - 全局过滤器layout - 整体外层布局mixins - 混入存放位置，分为全局混入和组件混入mock - 配置mock数据信息router - 页面路由配置store - 状态管理配置utils - js工具main.js入口函数"
  },
  
  {
    "title": "Vue 创建项目",
    "url": "/blog.github.io/posts/createVue/",
    "categories": "Client",
    "tags": "Vue",
    "date": "2018-10-11 22:58:36 +0800",
    





    "snippet": "检查安装环境  nodenode 下载  cnpm          npm install cnpm -g –registry=https://registry.npm.taobao.org        npm      D:\\file\\vue\\vue&gt;node -v  v10.16.3      D:\\file\\vue\\vue&gt;npm 0v  ^C终止批处理操作吗(Y/N)?  ^C  D:\\file\\vue\\vue&gt;npm -v  6.9.0      D:\\file\\vue\\vue&gt;cnpm -v  cnpm@6.1.0 (C:\\Users\\Cc\\AppData\\Roaming\\npm\\node_modules\\cnpm\\lib\\parse_argv.js)  npm@6.11.3 (C:\\Users\\Cc\\AppData\\Roaming\\npm\\node_modules\\cnpm\\node_modules\\npm\\lib\\npm.js)  node@10.16.3 (C:\\Program Files\\nodejs\\node.exe)  npminstall@3.23.0 (C:\\Users\\Cc\\AppData\\Roaming\\npm\\node_modules\\cnpm\\node_modules\\npminstall\\lib\\ind  ex.js)  prefix=C:\\Users\\Cc\\AppData\\Roaming\\npm  win32 x64 6.3.9600  registry=https://r.npm.taobao.org      vue-cli 脚手架构建全局安装 vue-cli$ cnpm install --global vue-cli或者$ cnpm install vue-cli -g搭建      vue init webpack server-client    需要注意的是项目的名称不能大写，不然会报错。    Project name (my-project) # 项目名称（我的项目）    Project description (A Vue.js project) # 项目描述一个Vue.js 项目    Author 作者（你的名字）    Install vue-router? (Y/n) # 是否安装Vue路由，也就是以后是spa（但页面应用需要的模块）    Use ESLint to lint your code? (Y/n) # 使用 ESLint 到你的代码？ （Y [ yes ] / N [ no ]）    Pick an ESLint preset (Use arrow keys) # 选择一个预置ESLint（使用箭头键）    Setup unit tests with Karma + Mocha? (Y/n) # 设置单元测Karma + Mocha？ （Y/ N）    Setup e2e tests with Nightwatch? (Y/n) # 设置端到端测试，Nightwatch？ （Y/ N）    当然这些都看你自己个人的情况，我这里是全选了是。        启动项目      To get started:        cd server-client    npm run dev      Documentation can be found at https://vuejs-templates.github.io/webpack              D:\\file\\vue\\vue&gt;cd server-client      D:\\file\\vue\\vue\\server-client&gt;npm run dev      "
  },
  
  {
    "title": "佳能入门",
    "url": "/blog.github.io/posts/%E4%BD%B3%E8%83%BD/",
    "categories": "me",
    "tags": "love",
    "date": "2018-06-06 12:48:54 +0800",
    





    "snippet": "安装镜头与卸载安装  镜头上有个白色的正方快点  与机身上的白色点对应起来  向下旋转镜头  可以听到一声卡住的响声卸载  按住镜头上的白色对应的半椭圆形的按键按钮  按住同时向上旋转镜头镜头上 stabilizer 开关防抖开关，区别就是在快门速度较慢的情况下，辅助稳定画质AF 和 MF 区别  AF：自动对焦  MF：手动对焦          主要是在拍照的时候，摄影者是习惯手动对焦还是自动对焦。      AF 代表自动对焦，由相机自动控制镜头进行对焦。      "
  },
  
  {
    "title": "java base",
    "url": "/blog.github.io/posts/base/",
    "categories": "Server",
    "tags": "java, JavaBase",
    "date": "2018-01-26 12:48:54 +0800",
    





    "snippet": "基础project_url = “https://github.com/spf13/hugo”"
  },
  
  {
    "title": "C",
    "url": "/blog.github.io/posts/base/",
    "categories": "Server",
    "tags": "C",
    "date": "2015-10-12 22:58:36 +0800",
    





    "snippet": "C 基础#include &lt;stdio.h&gt;int main(void){ printf(\"Hello World!\\n\");}"
  },
  
  {
    "title": "Base",
    "url": "/blog.github.io/posts/base/",
    "categories": "",
    "tags": "",
    "date": "2015-10-12 00:00:00 +0800",
    





    "snippet": "+++date = 2018-01-26T12:48:54+08:00draft= truetitle = “Python base”tags = [ “python” ]categories = [ “Python基础” ]#series = [ “base” ]slug = “hugo”project_url = “https://github.com/spf13/hugo”+++Python 基础"
  },
  
  {
    "title": "9（系统启动控制、进程管理）",
    "url": "/blog.github.io/posts/9-%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%8E%A7%E5%88%B6-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/",
    "categories": "",
    "tags": "",
    "date": "2015-10-12 00:00:00 +0800",
    





    "snippet": "+++title = “linux(CentOS7) 系统启动控制、进程管理”date = “2020-03-29T00:48:12+08:00”draft= falsetags = [ “RedHad” ]categories = [ “SystemUtils” ]description = “9（系统启动控制、进程管理）” +++系统启动控制、进程管理系统启动控制  0—-停机  1—单用户模式  2—多用户模式（没有网络文件系统）  3—完全多用户模式  4—忽略  5—X11 一般图形界面  6— 重新启动（不推荐这操作，请谨慎操作）  如果你远程黑进了系统 可以试试这个 6 操作 应该会一直重启设置操作  runleve 查看当前系统启动状态，N代表代表上次运行级别  init 设置启动状态[root@Cc RedHad]# runlevelN 3[root@Cc RedHad]# init 5Linux 初始化脚本 /etc/inittab  的解析Linux 启动服务控制  start 开启  ` stop` 停止[root@Cc RedHad]# /etc/init.d/network startStarting network (via systemctl):                          [  确定  ][root@Cc RedHad]# /etc/init.d/network stop使用chkconfig  查看各个服务运行级别情况  查看[root@Cc RedHad]# chkconfig --list注：该输出结果只显示 SysV 服务，并不包含原生 systemd 服务。SysV 配置数据可能被原生 systemd 配置覆盖。       要列出 systemd 服务，请执行 'systemctl list-unit-files'。      查看在具体 target 启用的服务请执行      'systemctl list-dependencies [target]'。aegis           0:关    1:关    2:开    3:开    4:开    5:开    6:关cloudmonitor    0:关    1:关    2:开    3:开    4:开    5:开    6:关netconsole      0:关    1:关    2:关    3:关    4:关    5:关    6:关network         0:关    1:关    2:开    3:开    4:开    5:开    6:关[root@Cc RedHad]#   设置[root@Cc ~]# chkconfig --list network network        \t0:off\t1:off\t2:on\t3:on\t4:on\t5:on\t6:off[root@Cc ~]# chkconfig --level 6 network on[root@Cc ~]# chkconfig --list network network        \t0:off\t1:off\t2:on\t3:on\t4:on\t5:on\t6:on[root@Cc ~]#   添加  chkconfig ---add [服务名]  service [服务名] start   开始  service [服务名] stop     停止  service [服务名] restart 重启进程管理概述      分类          交互进程      批处理进程      守护进程            父进程和子进程          两者管理关系和被管理关系，父进程终止时子进程也随之终止。但是子进程终止父进程不会因子进程终止而终止。      进程管理工具、常用命令进程监视ps    ps -u\t\t按用户名启动时间顺序监视    ps -a\t\t显示所用用户进程    ps -x\t\t显示无控制终端进程    ps -l\t\t长格式输出    ps -j\t\t任务格式显示    ps -r\t\t显示运行中进程    ps -f\t\t列出全部进程相关信息系统状态监视top    top -n 1\t\t\t显示一次退出    top -n 1 -p  1\t\t显示某一进程状态且显示一次退出    top -u testUser\t\t显示指定用户进程信息终止进程下载web程序  windows体验  Linux 运行：示例  kill [进程ID]  进程号终止进程[root@Cc ~]# ps -ef  |grep HelloWorldroot     18233 10980  0 21:38 pts/1    00:00:00 ./HelloWorldroot     21817 17944  0 21:40 pts/4    00:00:00 grep --color=auto HelloWorld[root@Cc ~]# kill -9 18233[root@Cc ~]# ps -ef  |grep HelloWorldroot     23420 17944  0 21:41 pts/4    00:00:00 grep --color=auto HelloWorld[root@Cc ~]#   killall [进程ID]  终止一批进程[root@Cc ~]# killall -9 HelloWorld系统管理员常见操作更改sshd 默认端口[root@Cc src]# vim /etc/ssh/sshd_config# semanage port -a -t ssh_port_t -p tcp #PORTNUMBER#Port 22Port 23456#ListenAddress 0.0.0.0#ListenAddress ::# 建议保留 22 # 防火墙需要放行 设置端口[root@Cc RedHad]# semanage port -l|grep sshssh_port_t                     tcp      22[root@Cc RedHad]# semanage port -a -t ssh_port_t -p tcp 23456[root@Cc RedHad]# semanage port -l|grep sshssh_port_t                     tcp      23456, 22[root@Cc RedHad]# netstat -ntlp |grep sshdtcp        0      0 0.0.0.0:23456           0.0.0.0:*    LISTEN      18631/sshd          tcp        0      0 0.0.0.0:22              0.0.0.0:*    LISTEN      18631/sshd          [root@Cc RedHad]#   通过另个服务器远程修改过端口的服务器  [root@Lgr init.d]# ssh -p 23456 root@lichaocheng.toproot@lichaocheng.top's password: Last login: Sat Mar 28 21:38:24 2020 from 113.118.200.16Welcome to Alibaba Cloud Elastic Compute Service ![root@Cc ~]#   查看某个用户所有进程[root@Cc RedHad]# ps -ef |grep userTestroot     32651 10980  0 23:07 pts/1    00:00:00 grep --color=auto userTest[root@Cc RedHad]# 终止某个用户所有进程testUser:x:1004:10002::/home/testUser:/bin/bash[root@Cc ~]# killall -u testUser[root@Cc ~]# 根据端口查对应的进程[root@Cc ~]# yum install -y lsof# 在联网的情况下可以直接使用以上命令# 如果没有联网使用 rpm 或者源码安装[root@Cc ~]# lsof -i:8180COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAMEserver  2155 root    6u  IPv6  40398      0t0  TCP *:8180 (LISTEN)[root@Cc ~]# 通过以上知识可以做进程监控（shell）  可能会用到 rsync  命令 安装即可#!/bin/bash## 进程监控"
  },
  
  {
    "title": "8（应用程序管理）",
    "url": "/blog.github.io/posts/8-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%AE%A1%E7%90%86/",
    "categories": "",
    "tags": "",
    "date": "2015-10-12 00:00:00 +0800",
    





    "snippet": "+++title = “linux(CentOS7) 应用程序管理”date = “2020-03-28T16:11:12+08:00”draft= falsetags = [ “RedHad” ]categories = [ “SystemUtils” ]description = “8（应用程序管理）” +++应用程序管理软件包基础常见安装工具包  RPM  DPKGRPM使用安装软件 （rz示例）  都和以下载  ftp://ftp.pbone.net/mirror/ftp.centos.org/7.7.1908/os/x86_64/Packages/lrzsz-0.12.20-36.el7.x86_64.rpm  wget http://images.lichaocheng.top/static/upload/2020/03/28/6fc647af1780ffc0b127510a418445a1.rpm[root@Cc rpm]#  wget ftp://ftp.pbone.net/mirror/ftp.centos.org/7.7.1908/os/x86_64/Packages/lrzsz-0.12.20-36.el7.x86_64.rpm[root@Cc rpm]# pwd/root/RedHad/8/rpm[root@Cc rpm]# ll总用量 80-rw-r--r-- 1 root root 79376 3月  28 15:10 6fc647af1780ffc0b127510a418445a1.rpm[root@Cc rpm]# rpm -ivh lrzsz-0.12.20-36.el7.x86_64.rpm 准备中...                          ################################# [100%]正在升级/安装...   1:lrzsz-0.12.20-36.el7             ################################# [100%][root@Cc rpm]# rz --versionrz (lrzsz) 0.12.20[root@Cc rpm]# 升级[root@Cc rpm]# rpm -Uvh lrzsz-0.12.20-36.el7.x86_64.rpm 查看已安装的软件包、和查看安装位置[root@Cc rpm]# rpm -qa |grep rzlrzsz-0.12.20-36.el7.x86_64卸载[root@Cc rpm]# rpm -qa |grep rzlrzsz-0.12.20-36.el7.x86_64[root@Cc rpm]# rpm -e lrzsz-0.12.20-36.el7.x86_64[root@Cc rpm]# rz --version-bash: /usr/bin/rz: 没有那个文件或目录[root@Cc rpm]# 查看文件属于哪个文件[root@Cc rpm]# which go/usr/local/go/go/bin/go[root@Cc rpm]# 查看rpm说明信息[root@Cc rpm]# rpm -qip lrzsz-0.12.20-36.el7.x86_64.rpm Name        : lrzszVersion     : 0.12.20Release     : 36.el7Architecture: x86_64Install Date: (not installed)Group       : Applications/CommunicationsSize        : 184846License     : GPLv2+Signature   : RSA/SHA256, 2014年07月04日 星期五 11时35分32秒, Key ID 24c6a8a7f4a80eb5Source RPM  : lrzsz-0.12.20-36.el7.src.rpmBuild Date  : 2014年06月10日 星期二 07时29分11秒Build Host  : worker1.bsys.centos.orgRelocations : (not relocatable)Packager    : CentOS BuildSystem &lt;http://bugs.centos.org&gt;Vendor      : CentOSURL         : http://www.ohse.de/uwe/software/lrzsz.htmlSummary     : The lrz and lsz modem communications programsDescription :Lrzsz (consisting of lrz and lsz) is a cosmetically modifiedzmodem/ymodem/xmodem package built from the public-domain version ofthe rzsz package. Lrzsz was created to provide a working GNUcopylefted Zmodem solution for Linux systems.[root@Cc rpm]# 源码安装  主要是依赖 make 和Makefile 编译  make install ，执行完之后，安装一般会被安装在/uer/local下对应的文件夹，部分二进制文件放在usr/bin或在/usr/local/bin  对应的头文件被安装至/usr/include，帮助文档安装至/usr/local/share ,如果指定目录请加到环境变量里面去yum installLinux 函数库从源码安装web 服务软件Nginx  下载地址【http://nginx.org/】  创建预知准备好的Nginx目录  rpm、源码、yum install都可以          yum install nginx 【个人觉得最实用了】      对于相关 应用程序安装blog.lichaocheng.top 下的相关安装文章"
  },
  
  {
    "title": "7（用户和组）",
    "url": "/blog.github.io/posts/7-%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84/",
    "categories": "",
    "tags": "",
    "date": "2015-10-12 00:00:00 +0800",
    





    "snippet": "+++title = “linux(CentOS7) 用户和组”date = “2020-03-28T00:03:12+08:00”draft= falsetags = [ “RedHad” ]categories = [ “SystemUtils” ]description = “7（用户和组）” +++用户和组Linux 用户管理登录时发生了什么  不管是终端还是图像界面登录系统校验  检查这个用户是否   /etc/passwd   中  再校验  /etc/shadow  密码是否正确  密码输入次数大于默认值3次重新输入用户名再输入密码用户类型      超级用户：超级用户USER ID 为0   root:x:0:0:root:/root:/bin/bash    系统用户  普通用户  root 用户可以更改任何用户密码用户管理机制  用户账号文件【/etc/passwd】  密码文件【/etc/shadow】  用户组文件【/etc/group】/etc/passwd  文件中  *  表示该用户已被禁止，无法登录`用户名:密码:USER ID:GROUP ID :相关注释:主目录:使用shell``root:x:0:0:root:/root:/bin/bash`  USER ID :最多为65535，UID 相同可人为同一用户，也具有相同权限如果该更改某些用户权限可以使用这方法  GROUP ID: 用户可以是用多个组，组可以有多个权限，和  windows 差不多/etc/shadow`用户名:密码:上次修改时间:两次修改密码间隔最少天数:两次修改密码间隔最多天数:提前多少天警告用户密码过期:在密码多少天过期后禁用用户:用户过期时间:保留字段``root:$6DQIY.H35tynh7gf2xB5jzrs8zYu.:18205:0:99999:7:::`  密码：x 表示用户禁止使用，不能登录  上次修改密码时间：单位天  两次修改间隔最少天数：0表示此功能被禁用，反则  两次修改间隔最多天数：99999  表示基本不需要修改/etc/group用户组名:用户组密码:用户组标识号:组内用户列表root:x:0:  组内用户列表：不同用户之间用逗号分隔，不能有空格用户管理命令添加用户【useradd】[root@Cc ~]# useradd --help用法：useradd [选项] 登录      useradd -D      useradd -D [选项]选项：  -b, --base-dir BASE_DIR       新账户的主目录的基目录  -c, --comment COMMENT         新账户的 GECOS 字段  -d, --home-dir HOME_DIR       新账户的主目录  -D, --defaults                显示或更改默认的 useradd 配置  -e, --expiredate EXPIRE_DATE  新账户的过期日期  -f, --inactive INACTIVE       新账户的密码不活动期  -g, --gid GROUP               新账户主组的名称或 ID  -G, --groups GROUPS   \t\t新账户的附加组列表  -h, --help                    显示此帮助信息并推出  -k, --skel SKEL_DIR   \t\t使用此目录作为骨架目录  -K, --key KEY=VALUE           不使用 /etc/login.defs 中的默认值  -l, --no-log-init     \t\t不要将此用户添加到最近登录和登录失败数据库  -m, --create-home     \t\t创建用户的主目录  -M, --no-create-home          不创建用户的主目录  -N, --no-user-group   \t\t不创建同名的组  -o, --non-unique              允许使用重复的 UID 创建用户  -p, --password PASSWORD       加密后的新账户密码  -r, --system                  创建一个系统账户  -R, --root CHROOT_DIR         chroot 到的目录  -P, --prefix PREFIX_DIR       prefix directory where are located the /etc/* files  -s, --shell SHELL             新账户的登录 shell  -u, --uid UID                 新账户的用户 ID  -U, --user-group              创建与用户同名的组  -Z, --selinux-user SEUSER     为 SELinux 用户映射使用指定 SEUSER[root@Cc ~]# 更改用户[usermod][root@Cc ~]# usermod --help用法：usermod [选项] 登录选项：  -c, --comment 注释             GECOS 字段的新值  -d, --home HOME_DIR           用户的新主目录  -e, --expiredate EXPIRE_DATE  设定帐户过期的日期为 EXPIRE_DATE  -f, --inactive INACTIVE       过期 INACTIVE 天数后，设定密码为失效状态  -g, --gid GROUP               强制使用 GROUP 为新主组  -G, --groups GROUPS           新的附加组列表 GROUPS  -a, --append GROUP            将用户追加至上边 -G 中提到的附加组中，                                并不从其它组中删除此用户  -h, --help                    显示此帮助信息并推出  -l, --login LOGIN             新的登录名称  -L, --lock                    锁定用户帐号  -m, --move-home               将家目录内容移至新位置 (仅于 -d 一起使用)  -o, --non-unique              允许使用重复的(非唯一的) UID  -p, --password PASSWORD       将加密过的密码 (PASSWORD) 设为新密码  -R, --root CHROOT_DIR         chroot 到的目录  -P, --prefix PREFIX_DIR       prefix directory where are located the /etc/* files  -s, --shell SHELL             该用户帐号的新登录 shell  -u, --uid UID                 用户帐号的新 UID  -U, --unlock                  解锁用户帐号  -v, --add-subuids FIRST-LAST  add range of subordinate uids  -V, --del-subuids FIRST-LAST  remove range of subordinate uids  -w, --add-subgids FIRST-LAST  add range of subordinate gids  -W, --del-subgids FIRST-LAST  remove range of subordinate gids  -Z, --selinux-user  SEUSER    用户账户的新 SELinux 用户映射[root@Cc ~]# 删除用户[userdel][root@Cc ~]# userdel --help用法：userdel [选项] 登录选项：  -f, --force                   force some actions that would fail otherwise                                e.g. removal of user still logged in                                or files, even if not owned by the user  -h, --help                    显示此帮助信息并推出  -r, --remove                  删除主目录和邮件池  -R, --root CHROOT_DIR         chroot 到的目录  -P, --prefix PREFIX_DIR       prefix directory where are located the /etc/* files  -Z, --selinux-user            为用户删除所有的 SELinux 用户映射[root@Cc ~]# 更改或者设置用户密码 [passwd][root@Cc ~]# passwd --help用法: passwd [选项...] &lt;帐号名称&gt;  -k, --keep-tokens       保持身份验证令牌不过期  -d, --delete            删除已命名帐号的密码(只有根用户才能进行此操作)  -l, --lock              锁定指名帐户的密码(仅限 root 用户)  -u, --unlock            解锁指名账户的密码(仅限 root 用户)  -e, --expire            终止指名帐户的密码(仅限 root 用户)  -f, --force             强制执行操作  -x, --maximum=DAYS      密码的最长有效时限(只有根用户才能进行此操作)  -n, --minimum=DAYS      密码的最短有效时限(只有根用户才能进行此操作)  -w, --warning=DAYS      在密码过期前多少天开始提醒用户(只有根用户才能进行此操作)  -i, --inactive=DAYS     当密码过期后经过多少天该帐号会被禁用(只有根用户才能进行此操作)  -S, --status            报告已命名帐号的密码状态(只有根用户才能进行此操作)  --stdin                 从标准输入读取令牌(只有根用户才能进行此操作)Help options:  -?, --help              Show this help message  --usage                 Display brief usage message[root@Cc ~]# 切换用户[su][root@Cc ~]# su --help用法：su [选项] [-] [USER [参数]...]将有效用户 id 和组 id 更改为 USER 的 id。单个 - 视为 -l。如果未指定 USER，将假定为 root。选项： -m, -p, --preserve-environment  不重置环境变量 -g, --group &lt;组&gt;             指定主组 -G, --supp-group &lt;组&gt;        指定一个辅助组 -, -l, --login                  使 shell 成为登录 shell -c, --command &lt;命令&gt;            使用 -c 向 shell 传递一条命令 --session-command &lt;命令&gt;        使用 -c 向 shell 传递一条命令                                 而不创建新会话 -f, --fast                      向shell 传递 -f 选项(csh 或 tcsh) -s, --shell &lt;shell&gt;             若 /etc/shells 允许，则运行 shell -h, --help     显示此帮助并退出 -V, --version  输出版本信息并退出[root@Cc ~]# 普通用户获取超级权限[sudo][root@Cc ~]# sudo --help;sudo - 以其他用户身份执行一条命令usage: sudo -h | -K | -k | -Vusage: sudo -v [-AknS] [-g group] [-h host] [-p prompt] [-u user]usage: sudo -l [-AknS] [-g group] [-h host] [-p prompt] [-U user] [-u user] [command]usage: sudo [-AbEHknPS] [-r role] [-t type] [-C num] [-g group] [-h host] [-p prompt] [-T timeout] [-u user] [VAR=value] [-i|-s] [&lt;command&gt;]usage: sudo -e [-AknS] [-r role] [-t type] [-C num] [-g group] [-h host] [-p prompt] [-T timeout] [-u user] file ...选项：  -A, --askpass                 使用助手程序进行密码提示  -b, --background              在后台运行命令  -C, --close-from=num          关闭所有 &gt;= num 的文件描述符  -E, --preserve-env            在执行命令时保留用户环境      --preserve-env=list       保留特定的环境变量  -e, --edit                    编辑文件而非执行命令  -g, --group=group             以指定的用户组或 ID 执行命令  -H, --set-home                将 HOME 变量设为目标用户的主目录。  -h, --help                    显示帮助消息并退出  -h, --host=host               在主机上运行命令(如果插件支持)  -i, --login                   以目标用户身份运行一个登录 shell；可同时指定一条命令  -K, --remove-timestamp        完全移除时间戳文件  -k, --reset-timestamp         无效的时间戳文件  -l, --list                    列出用户权限或检查某个特定命令；对于长格式，使用两次  -n, --non-interactive         非交互模式，不提示  -P, --preserve-groups         保留组向量，而非设置为目标的组向量  -p, --prompt=prompt           使用指定的密码提示  -r, --role=role               以指定的角色创建 SELinux 安全环境  -S, --stdin                   从标准输入读取密码  -s, --shell                   以目标用户运行 shell；可同时指定一条命令  -t, --type=type               以指定的类型创建 SELinux 安全环境  -T, --command-timeout=timeout 在达到指定时间限制后终止命令  -U, --other-user=user         在列表模式中显示用户的权限  -u, --user=user               以指定用户或 ID 运行命令(或编辑文件)  -V, --version                 显示版本信息并退出  -v, --validate                更新用户的时间戳而不执行命令  --                            停止处理命令行参数[root@Cc ~]# 用户管理示例[root@Cc ~]# useradd testUser[root@Cc ~]# useradd testUserName[root@Cc ~]# cat /etc/passwd# 只复制了最后几行yf:x:1001:1001::/home/yf:/bin/bashlcc:x:1002:1002::/home/lcc:/bin/bashlccs:x:1003:1003::/home/ch:/bin/bashtestUser:x:1004:1004::/home/testUser:/bin/bashtestUserName:x:1005:1005::/home/testUserName:/bin/bash[root@Cc ~]# userdel yf[root@Cc ~]# userdel lcc[root@Cc ~]# userdel lccs[root@Cc ~]# cat /etc/passwd# 只复制了最后几行admin:x:1000:1000::/home/admin:/bin/bashnginx:x:996:994:nginx user:/var/cache/nginx:/sbin/nologinmysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/falseredis:x:995:993:Redis Database Server:/var/lib/redis:/sbin/nologindockerroot:x:994:991:Docker User:/var/lib/docker:/sbin/nologintestUser:x:1004:1004::/home/testUser:/bin/bashtestUserName:x:1005:1005::/home/testUserName:/bin/bash[root@Cc ~]# passwd testUser更改用户 testUser 的密码 。新的 密码：重新输入新的 密码：passwd：所有的身份验证令牌已经成功更新。[root@Cc ~]# su testUser[testUser@Cc root]$ su root密码：[root@Cc ~]# su testUser[testUser@Cc root]$ llls: 无法打开目录.: 权限不够[testUser@Cc root]$ sudo ll我们信任您已经从系统管理员那里了解了日常注意事项。总结起来无外乎这三点：    #1) 尊重别人的隐私。    #2) 输入前要先考虑(后果和风险)。    #3) 权力越大，责任越大。[sudo] testUser 的密码：testUser 不在 sudoers 文件中。此事将被报告。[testUser@Cc ~]$ pwd/home/testUser[testUser@Cc ~]$ 用户组管理命令添加用户组【groupadd】[testUser@Cc ~]$ groupadd --help用法：groupadd [选项] 组选项:  -f, --force           如果组已经存在则成功退出                        并且如果 GID 已经存在则取消 -g  -g, --gid GID                 为新组使用 GID  -h, --help                    显示此帮助信息并推出  -K, --key KEY=VALUE           不使用 /etc/login.defs 中的默认值  -o, --non-unique              允许创建有重复 GID 的组  -p, --password PASSWORD       为新组使用此加密过的密码  -r, --system                  创建一个系统账户  -R, --root CHROOT_DIR         chroot 到的目录  -P, --prefix PREFIX_DIR       directory prefix[testUser@Cc ~]$ 删除用户组【groupdel】[testUser@Cc ~]$ groupadd --help用法：groupadd [选项] 组选项:  -f, --force           如果组已经存在则成功退出                        并且如果 GID 已经存在则取消 -g  -g, --gid GID                 为新组使用 GID  -h, --help                    显示此帮助信息并推出  -K, --key KEY=VALUE           不使用 /etc/login.defs 中的默认值  -o, --non-unique              允许创建有重复 GID 的组  -p, --password PASSWORD       为新组使用此加密过的密码  -r, --system                  创建一个系统账户  -R, --root CHROOT_DIR         chroot 到的目录  -P, --prefix PREFIX_DIR       directory prefix[testUser@Cc ~]$ groupdel --help用法：groupdel [选项] 组选项:  -h, --help                    显示此帮助信息并推出  -R, --root CHROOT_DIR         chroot 到的目录  -P, --prefix PREFIX_DIR       prefix directory where are located the /etc/* files  -f, --force                   delete group even if it is the primary group of a user[testUser@Cc ~]$ 修改用户组【groupmod】[testUser@Cc ~]$ groupdel --help用法：groupdel [选项] 组选项:  -h, --help                    显示此帮助信息并推出  -R, --root CHROOT_DIR         chroot 到的目录  -P, --prefix PREFIX_DIR       prefix directory where are located the /etc/* files  -f, --force                   delete group even if it is the primary group of a user[testUser@Cc ~]$ groupmod --help用法：groupmod [选项] 组选项:  -g, --gid GID                 将组 ID 改为 GID  -h, --help                    显示此帮助信息并推出  -n, --new-name NEW_GROUP      改名为 NEW_GROUP  -o, --non-unique              允许使用重复的 GID  -p, --password PASSWORD       将密码更改为(加密过的) PASSWORD  -R, --root CHROOT_DIR         chroot 到的目录  -P, --prefix PREFIX_DIR       prefix directory where are located the /etc/* files[testUser@Cc ~]$ 查看用户所在用户组【id 与 grep 组合 】[root@Cc testUser]# id testUseruid=1004(testUser) gid=1004(testUser) 组=1004(testUser)[root@Cc testUser]# id rootuid=0(root) gid=0(root) 组=0(root)[root@Cc testUser]# grep testUser /etc/passwdtestUser:x:1004:1004::/home/testUser:/bin/bashtestUserName:x:1005:1005::/home/testUserName:/bin/bash[root@Cc testUser]# grep 1004 /etc/grouptestUser:x:1004:[root@Cc testUser]# 示例[root@Cc testUser]# groupadd testUserGroup [root@Cc testUser]# cat /etc/group |grep testtestUser:x:1004:testUserGroup:x:1005:[root@Cc testUser]# useradd -g testUserGroup testUserInGroup[root@Cc testUser]# groupdel testUserGroupgroupdel：不能移除用户“testUserInGroup”的主组[root@Cc testUser]# userdel -r testUserInGroup[root@Cc testUser]# groupdel testUserGroup[root@Cc testUser]# groupdel testUserGroup[root@Cc testUser]# cat /etc/group |grep testtestUser:x:1004:[root@Cc testUser]# groupmod -g 10002 testUsertestUser:x:10002:[root@Cc testUser]# groupmod -n lccGroup testUser[root@Cc testUser]# cat /etc/group |grep lcclccGroup:x:10002:[root@Cc testUser]# 批量添加用户并设置密码预留应用程序管理"
  },
  
  {
    "title": "6（日志系统）",
    "url": "/blog.github.io/posts/6-%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/",
    "categories": "",
    "tags": "",
    "date": "2015-10-12 00:00:00 +0800",
    





    "snippet": "+++title = “linux(CentOS7) 日志系统”date = “2020-03-26T23:24:12+08:00”draft= falsetags = [ “RedHad” ]categories = [ “SystemUtils” ]description = “6（日志系统）” +++Linux 日志系统  日志用途      系统审计    检测追踪    分析统计              Web 应用请求量        错误码分布        性能        是否需要扩容        多少用户量            常见的日志文件  登录日志[root@Cc log]# lastlog用户名           端口     来自             最后登陆时间root             pts/1    113.118.200.16   四 3月 26 21:38:34 +0800 2020ftp                                        **从未登录过**sshd                                       **从未登录过**ntp                                        **从未登录过**nginx                                      **从未登录过**mysql                                      **从未登录过**redis                                      **从未登录过**dockerroot                                 **从未登录过**yf               pts/5                     一 3月 23 21:14:45 +0800 2020[root@Cc log]#   who  users（查看当前用户）  最近重启日志[root@Cc log]# last rebootreboot   system boot  3.10.0-1062.4.1. Fri Mar 20 17:14 - 22:55 (6+05:41)   reboot   system boot  3.10.0-1062.4.1. Fri Mar 20 17:14 - 09:14  (-7:-59)  日志文件说明/var/log/message 系统启动后的信息和错误日志，是Red Hat Linux中最常用的日志之一/var/log/secure 与安全相关的日志信息/var/log/maillog 与邮件相关的日志信息/var/log/cron 与定时任务相关的日志信息/var/log/spooler 与UUCP和news设备相关的日志信息/var/log/boot.log 守护进程启动和停止相关的日志消息日志系统rsyslog 日志系统  /etc/rsyslog.conf  默认配置，该配置文件对应日志文件请看上面【日志文件说明】使用日志轮转  主要配置文件  /etc/logrotate.conf  主要配置目录\t/etc/logrotate.d[root@Cc etc]# logrotate --help;用法: logrotate [OPTION...] &lt;configfile&gt;  -d, --debug               详细显示指令执行过程  -f, --force               强行启动记录文件维护  -m, --mail=command        发送邮件的命令 (而不是 `/bin/mail')  -s, --state=statefile     指定状态文件  -v, --verbose             执行日志滚动式显示详细信息  -l, --log=STRING          Log file  -?\t\t\t\t\t\t帮助文档查看nginx[root@Cc logrotate.d]# cat -n /etc/logrotate.d/nginx      1  /var/log/nginx/*.log {     2          daily     3          missingok     4          rotate 52     5          compress     6          delaycompress     7          notifempty     8          create 640 nginx adm     9          sharedscripts    10          postrotate    11                  if [ -f /var/run/nginx.pid ]; then    12                          kill -USR1 `cat /var/run/nginx.pid`    13                  fi    14          endscript    15  }[root@Cc logrotate.d]# 范例—————利用系统日志定位问题这个预留，动手利用第五章知识完成7 用户和组"
  },
  
  {
    "title": "5（文件管理与磁盘管理）",
    "url": "/blog.github.io/posts/5-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E4%B8%8E%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/",
    "categories": "",
    "tags": "",
    "date": "2015-10-12 00:00:00 +0800",
    





    "snippet": "+++title = “linux(CentOS7) 文件管理与磁盘管理”tags = [ “RedHad” ]categories = [ “SystemUtils” ]date = “2020-03-26T23:23:12+08:00”draft= falsedescription = “5（文件管理与磁盘管理）” +++文件管理认识分区[root@Cc ~]# df -hFilesystem      Size  Used Avail Use% Mounted ondevtmpfs        909M     0  909M   0% /dev[root@Cc ~]# df -h文件系统        容量  已用  可用 已用% 挂载点devtmpfs        909M     0  909M    0% /dev文件管理文件类型  普通文件\t\t\t-  目录文件\t\t\td  块设备文件\t\td/c  连接文件  字符设备文件\td/c  socket文件\t\ts  管道文件\t\t\tp文件属性权限  读…………………………r  写…………………………w  可执行…………………X示例-rwxrw-r--[-]表示普通文件[rwx]表示读写执行权限[rw-]所属与同一组的用户就有读写权限[r--]表示其他用户对该文件只有读权限  -rwxrwxrx：为文件最大权限，对应的编码为777，表示任何用户都有读写执行此文件改变文件所有权  chown  chgrp改变文件权限chmod  r—-4—–读———read  w—2—–写——–write  x—-1—–执行—–[execute]示例[root@Cc 5]# touch test.sh[root@Cc 5]# ll总用量 0-rw-r--r-- 1 root root 0 3月  26 22:02 test.sh[root@Cc 5]# ./test.sh-bash: ./test.sh: 权限不够[root@Cc 5]#   test.sh没有执行权限[root@Cc 5]# chmod u+x test.sh [root@Cc 5]# ./test.sh  加上权限[root@Cc 5]# chmod o-r test.sh [root@Cc 5]# ll总用量 0-rwxr----- 1 root root 0 3月  26 22:02 test.sh[root@Cc 5]#   设置其他用户不可读[root@Cc 5]# ll总用量 0-rwxr----- 1 root root 0 3月  26 22:02 test.sh-rwxrwxr-x 1 root root 0 3月  26 22:11 test.txt[root@Cc 5]# chmod ugo+r test.txt [root@Cc 5]# chmod a+r test.txt [root@Cc 5]# chmod ug+w,o-w test.txt [root@Cc 5]# chmod u+x test.txt [root@Cc 5]# chmod -R a+r *[root@Cc 5]# chmod a-x test.txt       设置所有人可读    设置所有人可读    设置文件拥有者，其他所属群体可写入，其他用户则不能    设置该文件用者可执行    讲目录下所有文件子目录都设置为可读取    收回所有用户对test.txt执行权限  磁盘管理查看磁盘占用空间  df -ah    其中h是单位有k查看文件或者目录所占用空间  du示例[root@Cc lichaocheng]# du -sh1.9G    .[root@Cc lichaocheng]# du --max-depth=1 -h4.0K    ./vimTest78M     ./gogs181M    ./java130M    ./sonsul85M     ./rabbitmq1.2G    ./harbor6.5M    ./hugo112K    ./hf80K     ./sll11M     ./frp24K     ./file20K     ./C16M     ./frp116K     ./ssl111M    ./mongodb1.9G    .[root@Cc lichaocheng]#   统计大小  按照层级文件大小一些冷门命令  tune2fs（调整查看文件系统参数）  mkfs（格式化文件系统）挂在/卸载文件系统  mount  如果在windows、mac 、或者自己电脑装了linux 就可以使用到这个命令，这个只给你看下帮助文档[root@Cc lichaocheng]# mount --help;用法： mount [-lhV] mount -a [选项] mount [选项] [--source] &lt;源&gt; | [--target] &lt;目录&gt; mount [选项] &lt;源&gt; &lt;目录&gt; mount &lt;操作&gt; &lt;挂载点&gt; [&lt;目标&gt;]选项： -a, --all               挂载 fstab 中的所有文件系统 -c, --no-canonicalize   不对路径规范化 -f, --fake              空运行；跳过 mount(2) 系统调用 -F, --fork              对每个设备禁用 fork(和 -a 选项一起使用) -T, --fstab &lt;路径&gt;      /etc/fstab 的替代文件 -h, --help              显示此帮助并退出 -i, --internal-only     不调用 mount.&lt;类型&gt; 助手程序 -l, --show-labels       列出所有带有指定标签的挂载 -n, --no-mtab           不写 /etc/mtab -o, --options &lt;列表&gt;    挂载选项列表，以英文逗号分隔 -O, --test-opts &lt;列表&gt;  限制文件系统集合(和 -a 选项一起使用) -r, --read-only         以只读方式挂载文件系统(同 -o ro) -t, --types &lt;列表&gt;      限制文件系统类型集合     --source &lt;源&gt;       指明源(路径、标签、uuid)     --target &lt;目标&gt;     指明挂载点 -v, --verbose           打印当前进行的操作 -V, --version           显示版本信息并退出 -w, --rw, --read-write  以读写方式挂载文件系统(默认) -h, --help     显示此帮助并退出 -V, --version  输出版本信息并退出源： -L, --label &lt;标签&gt;      同 LABEL=&lt;label&gt; -U, --uuid &lt;uuid&gt;       同 UUID=&lt;uuid&gt; LABEL=&lt;标签&gt;            按文件系统标签指定设备 UUID=&lt;uuid&gt;             按文件系统 UUID 指定设备 PARTLABEL=&lt;标签&gt;        按分区标签指定设备 PARTUUID=&lt;uuid&gt;         按分区 UUID 指定设备 &lt;设备&gt;                  按路径指定设备 &lt;目录&gt;                  绑定挂载的挂载点(参阅 --bind/rbind) &lt;文件&gt;                  用于设置回环设备的常规文件操作： -B, --bind              挂载其他位置的子树(同 -o bind) -M, --move              将子树移动到其他位置 -R, --rbind             挂载其他位置的子树及其包含的所有挂载 --make-shared           将子树标记为 共享 --make-slave            将子树标记为 从属 --make-private          将子树标记为 私有 --make-unbindable       将子树标记为 不可绑定 --make-rshared          递归地将整个子树标记为 共享 --make-rslave           递归地将整个子树标记为 从属 --make-rprivate         递归地将整个子树标记为 私有 --make-runbindable      递归地将整个子树标记为 不可绑定基本磁盘管理  fdisk  类似windows 下PQMagic工具 ，这个只给帮助文档[root@Cc lichaocheng]# fdisk --helpfdisk：无效选项 -- -用法： fdisk [选项] &lt;磁盘&gt;    更改分区表 fdisk [选项] -l &lt;磁盘&gt; 列出分区表 fdisk -s &lt;分区&gt;        给出分区大小(块数)选项： -b &lt;大小&gt;             扇区大小(512、1024、2048或4096) -c[=&lt;模式&gt;]           兼容模式：“dos”或“nondos”(默认) -h                    打印此帮助文本 -u[=&lt;单位&gt;]           显示单位：“cylinders”(柱面)或“sectors”(扇区，默认) -v                    打印程序版本 -C &lt;数字&gt;             指定柱面数 -H &lt;数字&gt;             指定磁头数 -S &lt;数字&gt;             指定每个磁道的扇区数交换空间管理磁盘冗余阵列RAID监控硬盘空间（shell）是个联系暂时不写#!/bin/shfunction LOG(){\techo \"用于记录执行日志\"}function sendmsg(){\techo \"告警发生详细\"}function process(){\techo \"主处理逻辑\"}function main(){\tprocess}LOG \"process start\"mainLOG \"process end\""
  },
  
  {
    "title": "4.5(目录管理、系统管理)",
    "url": "/blog.github.io/posts/4.5(%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86)/",
    "categories": "",
    "tags": "",
    "date": "2015-10-12 00:00:00 +0800",
    





    "snippet": "+++title = “linux(CentOS7) 目录管理、系统管理”date = “2020-03-25T23:48:12+08:00”draft= falsetags = [ “RedHad” ]categories = [ “SystemUtils” ]description = “4.5(目录管理、系统管理)” +++目录管理命令nkdri  指定权限创建  -p递归创建    [root@Cc 20200326]# mkdir -m777 mkdira[root@Cc 20200326]# ll总用量 8drwxrwxrwx 2 root root 4096 3月  25 22:52 mkdiradrwxr-xr-x 2 root root 4096 3月  25 22:39 pwd[root@Cc 20200326]#        rmdir    删除    ls    ls -lk k、h为 k、M、G  大小显示排序```shell[root@Cc lichaocheng]#  ls -lhS总用量 31M-rw-r–r– 1 root  root   25M 11月  7 23:31 gogs_0.11.91_linux_amd64.tar.gz-rw-r–r– 1 root  root  5.8M 2月  26 09:29 hugo.filepartdrwxr-xr-x 2 root  root  4.0K 2月   7 12:51 Cdrwxr-xr-x 3 root  root  4.0K 12月 17 11:31 filedrwxr-xr-x 3 root  root  4.0K 1月  17 17:34 frpdrwxr-xr-x 2 root  root  4.0K 11月 13 10:37 frp1drwxr-xr-x 8 admin admin 4.0K 1月  16 16:54 gogsdrwxr-xr-x 3 root  root  4.0K 11月 28 20:26 harbordrwxr-xr-x 2 root  root  4.0K 12月 19 15:54 hfdrwxr-xr-x 3 root  root  4.0K 2月  28 23:03 hugo### pwd- 当前目录### cd- `cd -`- `cd /root`###  tree- 查看目录### tar- 打包不压缩```shell[root@Cc tar]# tar -cvf tarTest.txt.tar tarTest.txt tarTest.txt[root@Cc tar]# ll总用量 16drwxr-xr-x 2 root root  4096 3月  25 22:59 lcc-rw-r--r-- 1 root root     0 3月  25 23:01 tarTest.txt-rw-r--r-- 1 root root 10240 3月  25 23:01 tarTest.txt.tar[root@Cc tar]#   打包并使用gzip压缩```shell[root@Cc tar]# tar -zcvf tarTest.txt.tar.gz ./lcc/./lcc/./lcc/b./lcc/a[root@Cc tar]# ll总用量 20drwxr-xr-x 2 root root  4096 3月  25 22:59 lcc-rw-r–r– 1 root root     0 3月  25 23:01 tarTest.txt-rw-r–r– 1 root root 10240 3月  25 23:01 tarTest.txt.tar-rw-r–r– 1 root root   144 3月  25 23:02 tarTest.txt.tar.gz[root@Cc tar]#- 使用bzip2```shell[root@Cc tar]# tar -jcvf tarTest.txt.tar.bz2 ./lcc/./lcc/./lcc/b./lcc/atar (child): bzip2：无法 exec: 没有那个文件或目录tar (child): Error is not recoverable: exiting nowtar: Child returned status 2tar: Error is not recoverable: exiting now[root@Cc tar]# ll总用量 20drwxr-xr-x 2 root root  4096 3月  25 22:59 lcc-rw-r--r-- 1 root root     0 3月  25 23:01 tarTest.txt-rw-r--r-- 1 root root 10240 3月  25 23:01 tarTest.txt.tar-rw-r--r-- 1 root root     0 3月  25 23:04 tarTest.txt.tar.bz2-rw-r--r-- 1 root root   144 3月  25 23:02 tarTest.txt.tar.gz[root@Cc tar]#   查看当前压缩包    [root@Cc tar]# tar -ztvf tarTest.txt.tar.gz drwxr-xr-x root/root         0 2020-03-25 22:59 ./lcc/-rw-r--r-- root/root         0 2020-03-25 22:59 ./lcc/b-rw-r--r-- root/root         0 2020-03-25 22:59 ./lcc/a[root@Cc tar]#         解压之中指定文件```shell[root@Cc tar]# rm -rf lcc/[root@Cc tar]# ll总用量 16-rw-r–r– 1 root root     0 3月  25 23:01 tarTest.txt-rw-r–r– 1 root root 10240 3月  25 23:01 tarTest.txt.tar-rw-r–r– 1 root root     0 3月  25 23:05 tarTest.txt.tar.bz2-rw-r–r– 1 root root   144 3月  25 23:02 tarTest.txt.tar.gz[root@Cc tar]# tar -zxvf tarTest.txt.tar.gz ./lcc/b./lcc/b[root@Cc tar]# tree.├── lcc│   └── b├── tarTest.txt├── tarTest.txt.tar├── tarTest.txt.tar.bz2└── tarTest.txt.tar.gz1 directory, 5 files[root@Cc tar]#- 保留文件属性`[root@Cc tar]# tar -zxvpf tarTest.txt.tar.gz ./lcc/`- 排除某些文件`tar --exclude  /home/*log -zcvf tarTest.txt.tar.gz ./lcc/`### zip/uzip### gzip/gunzip### bzip2/bunzip2#### 以上三种自己百度谷歌，我有时间会补上去## 系统管理### man&gt; 可以查看yum 命令手册，按q退出```shell[root@Cc system]# man -c您需要什么手册页？[root@Cc system]# man yumexport（导出环境变量）  修改go 环境变量为例    [root@Cc system]# go env |grep GOPATHGOPATH=\"/opt/gopath\"[root@Cc system]# export GOPATH=\"/root\"[root@Cc system]# go env |grep GOPATHGOPATH=\"/root\"[root@Cc system]# export GOPATH=\"/opt/gopath\"        export -n          删除指定变量      history（查看历史）        将当前写入到文件    [root@Cc history]# history -w history.txt         清楚当前historyhistory -c  删除所有历史命令    [root@Cc history]# rm -rf ~/.bash_history [root@Cc history]# history -c        可以配合history |grep [docker]查找    date(时间操作)          不让费时间了      clear(清除屏幕)      ctrl + l      uptime(查看系统负载)      [root@Cc history]# uptime 23:33:15 up 5 days, 14:18,  2 users,  load average: 0.21, 0.32, 0.31[root@Cc history]#             free(显示系统内存状况)      [root@Cc history]# free -m      dd(转换或者复制)      百度 填补      任务管理      at(单词任务)      指定时间输入到文件内部[root@Cc history]# at 17:20 tomorrow      crond(周期任务)      TODO 找时间填补      关机命令      shutdown (关机)      halt      reboot(重启)      poweroff(终止系统运行)      init(改变系统允许级别)        0 停机  1 单用户模式  2 多用户模式  3 完全多用户模式  4 么有用到  5 X11  6 重新启动          配置 ` /etc/inittab `      文本操作        vi  vim    最后总结（个人shell）          用所学的shell 备份重要的文件目录      下次补上      "
  },
  
  {
    "title": "4.4（目录结构）",
    "url": "/blog.github.io/posts/4.4-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/",
    "categories": "",
    "tags": "",
    "date": "2015-10-12 00:00:00 +0800",
    





    "snippet": "+++title = “linux(CentOS7) 目录结构”date = “2020-03-24T23:17:54+08:00”tags = [ “RedHad” ]categories = [ “SystemUtils” ]description = “linux 目录 cp mv diff cat tail ……” +++linux目录结构常用命令cp[root@Cc RedHad]#  cp /etc/nginx/conf.d/default.conf .[root@Cc RedHad]# ll总用量 4-rw-r--r-- 1 root root 750 3月  24 22:17 default.conf[root@Cc RedHad]# cp –help[root@Cc RedHad]# cp --help;用法：cp [选项]... [-T] 源文件 目标文件　或：cp [选项]... 源文件... 目录　或：cp [选项]... -t 目录 源文件...Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.Mandatory arguments to long options are mandatory for short options too.  -a, --archive                 等于-dR --preserve=all      --attributes-only 仅复制属性而不复制数据      --backup[=CONTROL           为每个已存在的目标文件创建备份  -b                            类似--backup 但不接受参数      --copy-contents           在递归处理是复制特殊文件内容  -d                            等于--no-dereference --preserve=links  -f, --force                  if an existing destination file cannot be                                 opened, remove it and try again (this option                                 is ignored when the -n option is also used)  -i, --interactive            prompt before overwrite (overrides a previous -n                                  option)  -H                           follow command-line symbolic links in SOURCE  -l, --link                   hard link files instead of copying  -L, --dereference            always follow symbolic links in SOURCE  -n, --no-clobber              不要覆盖已存在的文件(使前面的 -i 选项失效)  -P, --no-dereference          不跟随源文件中的符号链接  -p                            等于--preserve=模式,所有权,时间戳      --preserve[=属性列表      保持指定的属性(默认：模式,所有权,时间戳)，如果                                        可能保持附加属性：环境、链接、xattr 等  -c                           deprecated, same as --preserve=context      --sno-preserve=属性列表   不保留指定的文件属性      --parents                 复制前在目标目录创建来源文件路径中的所有目录  -R, -r, --recursive           递归复制目录及其子目录内的所有内容      --reflink[=WHEN]          控制克隆/CoW 副本。请查看下面的内如。      --remove-destination      尝试打开目标文件前先删除已存在的目的地                                        文件 (相对于 --force 选项)      --sparse=WHEN             控制创建稀疏文件的方式      --strip-trailing-slashes  删除参数中所有源文件/目录末端的斜杠  -s, --symbolic-link           只创建符号链接而不复制文件  -S, --suffix=后缀             自行指定备份文件的后缀  -t,  --target-directory=目录  将所有参数指定的源文件/目录                                           复制至目标目录  -T, --no-target-directory     将目标目录视作普通文件  -u, --update                  只在源文件比目标文件新，或目标文件                                        不存在时才进行复制  -v, --verbose         显示详细的进行步骤  -x, --one-file-system 不跨越文件系统进行操作  -Z                           set SELinux security context of destination                                 file to default type      --context[=CTX]          like -Z, or if CTX is specified then set the                                 SELinux or SMACK security context to CTX      --help            显示此帮助信息并退出      --version         显示版本信息并退出默认情况下，源文件的稀疏性仅仅通过简单的方法判断，对应的目标文件目标文件也被为稀疏。这是因为默认情况下使用了--sparse=auto 参数。如果明确使用--sparse=always 参数则不论源文件是否包含足够长的0 序列也将目标文件创文建为稀疏件。使用--sparse=never 参数禁止创建稀疏文件。当指定了--reflink[=always] 参数时执行轻量化的复制，即只在数据块被修改的情况下才复制。如果复制失败或者同时指定了--reflink=auto，则返回标准复制模式。The backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.The version control method may be selected via the --backup option or throughthe VERSION_CONTROL environment variable.  Here are the values:  none, off       不进行备份(即使使用了--backup 选项)  numbered, t     备份文件加上数字进行排序  existing, nil   若有数字的备份文件已经存在则使用数字，否则使用普通方式备份  simple, never   永远使用普通方式备份操作示例[root@Cc cp]# tree.├── file1│   └── file1.txt├── file2│   ├── file2.exe│   └── file2.txt└── file33 directories, 3 files[root@Cc cp]# 复制多个文件[root@Cc cp]# cp -v file1/file1.txt  file2/file2.txt file3\"file1/file1.txt\" -&gt; \"file3/file1.txt\"\"file2/file2.txt\" -&gt; \"file3/file2.txt\"[root@Cc cp]# tree.├── file1│   └── file1.txt├── file2│   ├── file2.exe│   └── file2.txt└── file3    ├── file1.txt    └── file2.txt3 directories, 5 files[root@Cc cp]# 复制文件夹[root@Cc cp]# cp -rv file3 file5[root@Cc cp]# tree.├── file1│   └── file1.txt├── file2│   ├── file2.exe│   └── file2.txt├── file3│   ├── file1.txt│   └── file2.txt└── file5    └── file3        ├── file1.txt        └── file2.txt5 directories, 7 files[root@Cc cp]# 保留属性复制[root@Cc cp]# cp -a /etc/nginx/conf.d/default.conf .[root@Cc cp]# ll总用量 20-rw-r--r-- 1 root root  750 3月  23 11:51 default.confdrwxr-xr-x 2 root root 4096 3月  24 22:21 file1drwxr-xr-x 2 root root 4096 3月  24 22:22 file2drwxr-xr-x 2 root root 4096 3月  24 22:23 file3drwxr-xr-x 3 root root 4096 3月  24 22:25 file5并不复制本身，而是创建软链接  注释：修改软链接文件 本身文件也跟着改变  [root@Cc cp]# ll总用量 20-rw-r--r-- 1 root root  750 3月  23 11:51 default.confdrwxr-xr-x 2 root root 4096 3月  24 22:21 file1drwxr-xr-x 2 root root 4096 3月  24 22:22 file2drwxr-xr-x 2 root root 4096 3月  24 22:23 file3drwxr-xr-x 3 root root 4096 3月  24 22:25 file5lrwxrwxrwx 1 root root   12 3月  24 22:31 testCP_S -&gt; default.conf[root@Cc cp]# cat testCP_S server {      listen 443 ssl default;  # 1.1版本后这样写      server_name lichaocheng.top; #填写绑定证书的域名      ssl_certificate  /opt/lichaocheng.top/lichaocheng.top/sll/lichaocheng.top.pem;  # 指定证书的位置，绝对路径      ssl_certificate_key /opt/lichaocheng.top/lichaocheng.top/sll/lichaocheng.top.key;  # 绝对路径，同上      ssl_session_timeout 5m;      ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置      ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置      ssl_prefer_server_ciphers on;      location / {          root   /opt/lichaocheng.top/lichaocheng.top; #站点目录，绝对路径          index  index.html index.htm;    }}[root@Cc cp]# cat default.conf server {      listen 443 ssl default;  # 1.1版本后这样写      server_name lichaocheng.top; #填写绑定证书的域名      ssl_certificate  /opt/lichaocheng.top/lichaocheng.top/sll/lichaocheng.top.pem;  # 指定证书的位置，绝对路径      ssl_certificate_key /opt/lichaocheng.top/lichaocheng.top/sll/lichaocheng.top.key;  # 绝对路径，同上      ssl_session_timeout 5m;      ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置      ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置      ssl_prefer_server_ciphers on;      location / {          root   /opt/lichaocheng.top/lichaocheng.top; #站点目录，绝对路径          index  index.html index.htm;    }}[root@Cc cp]#   mvmv –help[root@Cc cp]# mv --help用法：mv [选项]... [-T] 源文件 目标文件　或：mv [选项]... 源文件... 目录　或：mv [选项]... -t 目录 源文件...Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.Mandatory arguments to long options are mandatory for short options too.      --backup[=CONTROL]       为每个已存在的目标文件创建备份  -b                           类似--backup 但不接受参数  -f, --force                  覆盖前不询问  -i, --interactive            覆盖前询问  -n, --no-clobber             不覆盖已存在文件如果您指定了-i、-f、-n 中的多个，仅最后一个生效。      --strip-trailing-slashes  去掉每个源文件参数尾部的斜线  -S, --suffix=SUFFIX           替换常用的备份文件后缀  -t, --target-directory=DIRECTORY  move all SOURCE arguments into DIRECTORY  -T, --no-target-directory    treat DEST as a normal file  -u, --update                 move only when the SOURCE file is newer                                 than the destination file or when the                                 destination file is missing  -v, --verbose                explain what is being done  -Z, --context                set SELinux security context of destination                                 file to default type      --help            显示此帮助信息并退出      --version         显示版本信息并退出  none, off       不进行备份(即使使用了--backup 选项)  numbered, t     备份文件加上数字进行排序  existing, nil   若有数字的备份文件已经存在则使用数字，否则使用普通方式备份  simple, never   永远使用普通方式备份[root@Cc cp]# touchtouch –help[root@Cc cp]# touch --help;用法：touch [选项]... 文件...  -a                    只更改访问时间  -c, --no-create       不创建任何文件  -d, --date=字符串     使用指定字符串表示时间而非当前时间  -f                    (忽略)  -h, --no-dereference          会影响符号链接本身，而非符号链接所指示的目的地                                (当系统支持更改符号链接的所有者时，此选项才有用)  -m                    只更改修改时间  -r, --reference=FILE   use this file's times instead of current time  -t STAMP               use [[CC]YY]MMDDhhmm[.ss] instead of current time      --time=WORD        change the specified time:                           WORD is access, atime, or use: equivalent to -a                           WORD is modify or mtime: equivalent to -m      --help            显示此帮助信息并退出      --version         显示版本信息并退出请注意，-d 和-t 选项可接受不同的时间/日期格式。示例  时间格式[CCYYMMDDhhmm]touch -t \"01231215\" t3      CC 年份前两位    YY 年份后两位    MM 月    DD 天    hh 时    mm 分一位数0补全      [root@Cc touch]# touch t1[root@Cc touch]# stat t1文件：\"t1\"大小：0               块：0          IO 块：4096   普通空文件设备：fd01h/64769d      Inode：668181      硬链接：1权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)最近访问：2020-03-24 22:44:43.908405308 +0800最近更改：2020-03-24 22:44:43.908405308 +0800最近改动：2020-03-24 22:44:43.908405308 +0800创建时间：-[root@Cc touch]# date2020年 03月 24日 星期二 22:49:18 CST[root@Cc touch]# [root@Cc touch]# [root@Cc touch]# touch -d \"2 day ago\" t1[root@Cc touch]# stat t1文件：\"t1\"大小：0               块：0          IO 块：4096   普通空文件设备：fd01h/64769d      Inode：668185      硬链接：1权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)最近访问：2020-03-22 22:49:50.941398201 +0800最近更改：2020-03-22 22:49:50.941398201 +0800最近改动：2020-03-24 22:49:50.941121499 +0800创建时间：-[root@Cc touch]# date2020年 03月 24日 星期二 22:50:01 CST[root@Cc touch]# touch -t \"01231215\" t3[root@Cc touch]# stat t3文件：\"t3\"大小：0               块：0          IO 块：4096   普通空文件设备：fd01h/64769d      Inode：668187      硬链接：1权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)最近访问：2020-01-23 12:15:00.000000000 +0800最近更改：2020-01-23 12:15:00.000000000 +0800最近改动：2020-03-24 22:50:53.180699023 +0800创建时间：-[root@Cc touch]#             rm      rm –help      ```shell [root@Cc touch]# rm –help;用法：rm [选项]… 文件…Remove (unlink) the FILE(s).      -f, –force           ignore nonexistent files and arguments, never prompt  -i                    prompt before every removal  -I                    prompt once before removing more than three files, or                          when removing recursively; less intrusive than -i,                          while still giving protection against most mistakes      –interactive[=WHEN]  prompt according to WHEN: never, once (-I), or                          always (-i); without WHEN, prompt always      –one-file-system         递归删除一个层级时，跳过所有不符合命令行参                                数的文件系统上的文件      –no-preserve-root  do not treat ‘/’ specially      –preserve-root   do not remove ‘/’ (default)  -r, -R, –recursive   remove directories and their contents recursively  -d, –dir             remove empty directories  -v, –verbose         explain what is being done      –help            显示此帮助信息并退出      –version         显示版本信息并退出默认时，rm 不会删除目录。使用–recursive(-r 或-R)选项可删除每个给定的目录，以及其下所有的内容。To remove a file whose name starts with a ‘-‘, for example ‘-foo’,use one of these commands:  rm – -foorm ./-foo请注意，如果使用rm 来删除文件，通常仍可以将该文件恢复原状。如果想保证该文件的内容无法还原，请考虑使用shred。### 查看文件- cat```shell[root@Cc touch]# cat --help用法：cat [选项]... [文件]...将[文件]或标准输入组合输出到标准输出。  -A, --show-all           等于-vET  -b, --number-nonblank    对非空输出行编号  -e                       等于-vE  -E, --show-ends          在每行结束处显示\"$\"  -n, --number             对输出的所有行编号  -s, --squeeze-blank      不输出多行空行  -t                       与-vT 等价  -T, --show-tabs          将跳格字符显示为^I  -u                       (被忽略)  -v, --show-nonprinting   使用^ 和M- 引用，除了LFD和 TAB 之外      --help            显示此帮助信息并退出      --version         显示版本信息并退出如果没有指定文件，或者文件为\"-\"，则从标准输入读取。示例：  cat f - g  先输出f 的内容，然后输出标准输入的内容，最后输出g 的内容。  cat        将标准输入的内容复制到标准输出。  tac```shell[root@Cc touch]# tac –help用法：tac [选项]… [文件]…Write each FILE to standard output, last line first.With no FILE, or when FILE is -, read standard input.Mandatory arguments to long options are mandatory for short options too.  -b, –before                  在行前而非行尾添加分隔标志  -r, –regex                   将分隔标志视作正则表达式来解析  -s, –separator=字符串        使用指定字符串代替换行作为分隔标志      –help            显示此帮助信息并退出      –version         显示版本信息并退出- more```shell[root@Cc touch]# more --helpmore: 未知选项 -help用法：more [选项] 文件...选项：  -d        显示帮助，而不是响铃  -f        统计逻辑行数而不是屏幕行数  -l        抑制换页(form feed)后的暂停  -p        不滚屏，清屏并显示文本  -c        不滚屏，显示文本并清理行尾  -u        抑制下划线  -s        将多个空行压缩为一行  -NUM      指定每屏显示的行数为 NUM  +NUM      从文件第 NUM 行开始显示  +/STRING  从匹配搜索字符串 STRING 的文件位置开始显示  -V        输出版本信息并退出[root@Cc touch]#   less    这个好长        tac    [root@Cc touch]# tac --help用法：tac [选项]... [文件]...-b, --before                  在行前而非行尾添加分隔标志-r, --regex                   将分隔标志视作正则表达式来解析-s, --separator=字符串        使用指定字符串代替换行作为分隔标志    --help            显示此帮助信息并退出    --version         显示版本信息并退出        tail    [root@Cc touch]# tail -n 3 ../cp/default.conf         index  index.html index.htm;  }}// 最后三行        find    ```shell[root@Cc ~]# find –help用法: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path…] [expression]  默认路径为当前目录；默认表达式为 -print表达式可能由下列成份组成：操作符、选项、测试表达式以及动作：操作符 (优先级递减；未做任何指定时默认使用 -and):      ( EXPR )   ! EXPR   -not EXPR   EXPR1 -a EXPR2   EXPR1 -and EXPR2      EXPR1 -o EXPR2   EXPR1 -or EXPR2   EXPR1 , EXPR2比较测试 (N 可以是 +N 或 -N 或 N): -amin N -anewer FILE -atime N -cmin N      -cnewer 文件 -ctime N -empty -false -fstype 类型 -gid N -group 名称      -ilname 匹配模式 -iname 匹配模式 -inum N -ipath 匹配模式 -iregex 匹配模式      -links N -lname 匹配模式 -mmin N -mtime N -name 匹配模式 -newer 文件      -nouser -nogroup -path PATTERN -perm [-/]MODE -regex PATTERN      -readable -writable -executable      -wholename PATTERN -size N[bcwkMG] -true -type [bcdpflsD] -uid N      -used N -user NAME -xtype [bcdpfls]      -context 文本操作: -delete -print0 -printf 格式 -fprintf 文件 格式 -print       -fprint0 文件 -fprint 文件 -ls -fls 文件 -prune -quit      -exec 命令 ; -exec 命令 {} + -ok 命令 ;      -execdir 命令 ; -execdir 命令 {} + -okdir 命令 ;### 文本文本操作- grep 过滤- diff 比较文件差异- ln 文件目录之间创建链接- file [文件或者文件夹] 显示类型- split 分割- join 合并- umask 文件**权限**##### 把权限拿出来细讲下&gt; unmask 范围[000~777]- r - 4 - 读- w - 2 - 写- x - 1 - 执行###### 计算如下- 最大权限777 读、写、执行权限- 当前环境umask值 ，系统为002- 对于当前目录，根据互补原则目录权限755。而文件默认没有执行权限，最大666，对应的权限644&gt; 文件默认权限666-022=644，目录默认权限777-022=755```shell[root@Cc nmask]# umask0022[root@Cc nmask]# touch file;mkdir dir[root@Cc nmask]# ls -l总用量 4drwxr-xr-x 2 root root 4096 3月  24 23:28 dir-rw-r--r-- 1 root root    0 3月  24 23:28 file[root@Cc nmask]# 目录管理"
  },
  
  {
    "title": "4.1~4.3（命令操作）",
    "url": "/blog.github.io/posts/4.1~4.3-%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/",
    "categories": "",
    "tags": "",
    "date": "2015-10-12 00:00:00 +0800",
    





    "snippet": "+++title = “linux(CentOS7) 命令操作”date = “2020-03-23T22:17:54+08:00”draft= falsetags = [ “RedHad” ]categories = [ “SystemUtils” ]description = “linux shell 终端命令操作（历史命令、管道）” +++前言linux 系统架构  硬件  系统内核  命令解析器  上层应用程序    初认命令行          [当前用户@计算机名字~]#      [当前用户@计算机名字~]$                  #为root用户，$普通用户          [root@Cc ~]# su yf[yf@Cc root]$ su rootPassword: [root@Cc ~]#                                         bash Shell别名  alias创建别名,unalias撤销别名  [root@Cc ~]# alias cc='ls -l'[root@Cc ~]# cctotal 24drwxr-xr-x  2 root root 4096 Dec 11 22:44 Ccdrwxr-xr-x  7 root root 4096 Nov 22 19:56 FileRecvdrwxr-xr-x  5 root root 4096 Nov 28 11:45 fileWehChatdrwxr-xr-x 19 root root 4096 Mar  3 15:45 gogs-repositoriesdrwxr-xr-x 17 root root 4096 Mar 18 13:51 lichaochengdrwxr-xr-x  2 root root 4096 Mar 18 08:57 supervisord.d[root@Cc ~]# unalias cc[root@Cc ~]# cccc: fatal error: no input filescompilation terminated.[root@Cc ~]#     历史命令使用  !!          上一个命令        找出特定字符命令    [root@Cc ~]# history | grep sou 1050  history | grep sou[root@Cc ~]#         ![num]     1050  history | grep sou 1051  history | grep ps 1052  ll 1053  history [root@Cc ~]# !1052lltotal 24drwxr-xr-x  2 root root 4096 Dec 11 22:44 Ccdrwxr-xr-x  7 root root 4096 Nov 22 19:56 FileRecvdrwxr-xr-x  5 root root 4096 Nov 28 11:45 fileWehChatdrwxr-xr-x 19 root root 4096 Mar  3 15:45 gogs-repositoriesdrwxr-xr-x 17 root root 4096 Mar 18 13:51 lichaochengdrwxr-xr-x  2 root root 4096 Mar 18 08:57 supervisord.d[root@Cc ~]#         通配符使用          多个字符、任意字符、范围查找、```shell[root@Cc ~]# ls /opt/go*/opt/gomod:Gin      /opt/gopath:bin  pkg  src[root@Cc ~]#[root@Cc ~]# ls /bin/l?/bin/ld  /bin/ln  /bin/lp  /bin/ls[root@Cc ~]# [root@Cc ~]# ls [a-f]*Cc:fileWehChat:2019-09  2019-10  2019-11[root@Cc ~]# find /opt/ -name “cc”/opt/lichaocheng.top/lichaocheng.top.server/.git/objects/cc/opt/gopath/src/smtface/client_user_server/.git/objects/cc/opt/gopath/src/google.golang.org/grpc/.git/objects/cc/opt/client/bogl.lichaocheng.top/.git/objects/cc[root@Cc ~]#### 管道#### 标准输入输出&gt;注意`ctrl+d`结束```shell[root@Cc ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0DEVICE=eth0IPADDR=172.24.40.83NETMASK=255.255.192.0ONBOOT=yesGATEWAY=172.24.63.253[root@Cc ~]# catlcclccyfyfcccc[root@Cc ~]# 输入重定向[root@Cc ~]# wc&lt;  /etc/sysconfig/network-scripts/ifcfg-eth0 5  5 87[root@Cc ~]# cat&lt;  /etc/sysconfig/network-scripts/ifcfg-eth0DEVICE=eth0IPADDR=172.24.40.83NETMASK=255.255.192.0ONBOOT=yesGATEWAY=172.24.63.253[root@Cc ~]# cat &lt;&lt;&lt;EEEEEE[root@Cc ~]# [root@Cc ~]# cat &lt;&lt;CC&gt; 第一个输入&gt; 第二个输入&gt; exit^C[root@Cc ~]# cat &lt;&lt;CC第一个输入第二个输入&gt; 第三个输入&gt; -bash: warning: here-document at line 50 delimited by end-of-file (wanted `CC')第一个输入第二个输入第三个输入  正确的值追加到文件    [root@Cc ~]# [root@Cc RedHad]# lltotal 0-rw-r--r-- 1 root root 0 Mar 23 21:59 readme.md[root@Cc RedHad]# cat readme.md [root@Cc RedHad]# ls -l ./ &gt;&gt;  readme.md [root@Cc RedHad]# cat readme.md total 0-rw-r--r-- 1 root root 0 Mar 23 21:59 readme.md              linux 更多重定向百度、谷歌      linux 目录结构      "
  },
  
  {
    "title": "10（网络管理）",
    "url": "/blog.github.io/posts/10-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/",
    "categories": "",
    "tags": "",
    "date": "2015-10-12 00:00:00 +0800",
    





    "snippet": "+++title = “linux(CentOS7) 网络管理”date = “2020-03-29T00:49:12+08:00”draft= falsetags = [ “RedHad” ]categories = [ “SystemUtils” ]description = “10（网络管理）” +++网络基础知识以及网络管理内容网络管理协议  好多概念知识，会拿出时间来讲解这张预留的空白TCP/IP协议概述  好多概念知识，会拿出时间来讲解这张预留的空白OSI参考模型  好多概念知识，会拿出时间来讲解这张预留的空白包（packet）  好多概念知识，会拿出时间来讲解这张预留的空白网络字节顺序  好多概念知识，会拿出时间来讲解这张预留的空白地址解析协议（ARP）  好多概念知识，会拿出时间来讲解这张预留的空白UTP与ICMP协议简介  好多概念知识，会拿出时间来讲解这张预留的空白网络管理命令ping  测试是否通[root@Cc ~]# ping lichaocheng.topPING lichaocheng.top (60.205.176.110) 56(84) bytes of data.64 bytes from 60.205.176.110 (60.205.176.110): icmp_seq=1 ttl=64 time=0.621 ms64 bytes from 60.205.176.110 (60.205.176.110): icmp_seq=2 ttl=64 time=0.671 ms64 bytes from 60.205.176.110 (60.205.176.110): icmp_seq=3 ttl=64 time=0.659 ms--- lichaocheng.top ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 2001msrtt min/avg/max/mdev = 0.621/0.650/0.671/0.029 ms[root@Cc ~]#   ping 指定次数[root@Cc ~]# ping -c 2 lichaocheng.topPING lichaocheng.top (60.205.176.110) 56(84) bytes of data.64 bytes from 60.205.176.110 (60.205.176.110): icmp_seq=1 ttl=64 time=0.636 ms64 bytes from 60.205.176.110 (60.205.176.110): icmp_seq=2 ttl=64 time=0.659 ms--- lichaocheng.top ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1000msrtt min/avg/max/mdev = 0.636/0.647/0.659/0.027 ms[root@Cc ~]#   指定时间间隔次数限制[root@Cc ~]# ping -c 2 -i 0.01 lichaocheng.topPING lichaocheng.top (60.205.176.110) 56(84) bytes of data.64 bytes from 60.205.176.110 (60.205.176.110): icmp_seq=1 ttl=64 time=0.771 ms64 bytes from 60.205.176.110 (60.205.176.110): icmp_seq=2 ttl=64 time=0.647 ms--- lichaocheng.top ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 10msrtt min/avg/max/mdev = 0.647/0.709/0.771/0.062 ms[root@Cc ~]# 配置网络显示网络状态【ifconfig】  查看          第二行依次                  网卡IP（云服务应该是内网IP）          子网掩码          广播地址                    [root@Cc ~]# ifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.24.40.83  netmask 255.255.192.0  broadcast 172.24.63.255        ether 00:16:3e:0c:d1:d9  txqueuelen 1000  (Ethernet)        RX packets 4270799  bytes 923464936 (880.6 MiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 4640135  bytes 1228322385 (1.1 GiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0[root@Cc ~]#   模拟添加一个网卡[root@Cc network-scripts]# cd /etc/sysconfig/network-scripts/[root@Cc network-scripts]# cp ifcfg-eth0 ifcfg-eth1[root@Cc network-scripts]# vim ifcfg-eth1[root@Cc network-scripts]# vim ifcfg-eth1[root@Cc network-scripts]# cat ifcfg-eth1# 网卡名字DEVICE=eth1LccTest# ip地址IPADDR=192.168.1.199# 子网掩码NETMASK=255.255.255.0# 开机自启ONBOOT=yes# 网关地址GATEWAY=172.24.63.253[root@Cc network-scripts]#   最后systemctl restart network  和service network restart 失败 ，报了文件错误，那直接修改主网卡 eth0  修改（需谨慎，高能操作修改前请先系统快照）  执行完成后直接退出 sshd 远程  ，最后 up 是开启的意思[root@Cc network-scripts]# ifconfig eth0 172.24.40.88 netmask 255.255.192.0 up连接断开  翻车 阿里云连接也失败找不到 ,只能快照或者联系阿里云技术服务,ping 服务器 超时，重启服务器  最后还是没有修改成功，反而立马远程不了          失败原因可能是我模拟添加网卡造成失败      可能改了网卡地址，在阿里云我公网ip对应不到修改阿里云内网ip      重启服务器之后，需要密钥才能登录，可能触发阿里云安全防控机制，阿里做了系统配置，我实例id 与hostname，充值了网卡 其余的没有找到      然之 需要密钥，我的做法是修改了密码，重启，之后远程登陆      谨慎操作修改网卡地址      可能修改成功了，也有可能是模拟网卡配置导致错误      [root@iz2zeb00z6vr5gix5utl11z lichaocheng.top.server]# ifconfig  eth0eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.24.40.83  netmask 255.255.192.0  broadcast 172.24.63.255        ether 00:16:3e:0c:d1:d9  txqueuelen 1000  (Ethernet)        RX packets 5310  bytes 575889 (562.3 KiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 6178  bytes 1043414 (1018.9 KiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0[root@iz2zeb00z6vr5gix5utl11z lichaocheng.top.server]#   我修改另一个网卡[root@Cc ~]# ifconfig dockerdocker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.17.0.1  netmask 255.255.0.0  broadcast 0.0.0.0        ether 02:42:5f:3a:85:e0  txqueuelen 0  (Ethernet)        RX packets 34  bytes 2663 (2.6 KiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 15  bytes 7621 (7.4 KiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0[root@Cc ~]# ifconfig docker0 172.24.40.88 netmask 255.255.192.0 up[root@Cc ~]# ifconfig dockerdocker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.24.40.88  netmask 255.255.192.0  broadcast 172.24.63.255        ether 02:42:5f:3a:85:e0  txqueuelen 0  (Ethernet)        RX packets 34  bytes 2663 (2.6 KiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 15  bytes 7621 (7.4 KiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0[root@Cc ~]# ifconfig docker0 hw ether 02:30:30:3f:5f:3a [root@Cc ~]# ifconfig dockerdocker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.24.40.88  netmask 255.255.192.0  broadcast 172.24.63.255        ether 02:30:30:3f:5f:3a  txqueuelen 0  (Ethernet)        RX packets 34  bytes 2663 (2.6 KiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 15  bytes 7621 (7.4 KiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0[root@Cc ~]#   禁用与启用[root@Cc ~]# ifconfig docker0 down[root@Cc ~]# ifconfig docker0 up路由表显示与修改【route】  route [-f] [-p] [Command [Destination] [mask Netmask] [Gateway][metric Metric]] [if Interface]]参数说明  Command 指定您想运行的命令 (Add/Change/Delete/Print)  Destination 指定该路由的网络目标  mask Netmask 指定与网络目标相关的网络掩码（也被称作子网掩码）  Gateway 指定网络目标定义的地址集和子网掩码可以到达的前进或下一跃点 IP 地址  metric Metric 为路由指定一个整数成本值标（从 1 至 9999），当在路由表(与转发的数据包目标地址最匹配)的多个路由中进行选择时可以使用  if Interface为可以访问目标的接口指定接口索引。若要获得一个接口列表和它们相应的接口索引，使用 route print 命令的显示功能。可以使用十进制或十六进-c 显示更多信息-n 不解析名字-v 显示详细的处理信息-F 显示发送信息-C 显示路由缓存-f 清除所有网关入口的路由表。-p 与add 命令一起使用时使路由具有永久性。add：添加一条新路由。del：删除一条路由。-net：目标地址是一个网络。-host：目标地址是一个主机。netmask：当添加一个网络路由时，需要使用网络掩码。gw：路由数据包通过网关。注意，你指定的网关必须能够达到。metric：设置路由跳数。显示示例[root@Cc ~]# route -nKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface0.0.0.0         172.24.63.253   0.0.0.0         UG    0      0        0 eth0169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0172.24.0.0      0.0.0.0         255.255.192.0   U     0      0        0 eth0172.24.0.0      0.0.0.0         255.255.192.0   U     0      0        0 docker0[root@Cc ~]# 添加路由  注：如果服务器添加时 添加路由可以看到但是ping不通  主机号  155.28.138.45[root@Lgr ~]# curl ip.sb115.28.138.45[root@Lgr ~]# ifconfig eth0eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.31.220.39  netmask 255.255.240.0  broadcast 172.31.223.255        ether 00:16:3e:08:80:34  txqueuelen 1000  (Ethernet)        RX packets 4840062  bytes 2017732415 (1.8 GiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 4449497  bytes 952525473 (908.3 MiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0[root@Lgr ~]# route -nKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface0.0.0.0         172.31.223.253  0.0.0.0         UG    0      0        0 eth010.200.192.0    0.0.0.0         255.255.240.0   U     0      0        0 mpgre0169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0172.31.208.0    0.0.0.0         255.255.240.0   U     0      0        0 eth0[root@Lgr ~]# route add -net 172.24.0.0 netmask 255.255.192.0 gw 172.31.223.225[root@Lgr ~]# route -nKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface0.0.0.0         172.31.223.253  0.0.0.0         UG    0      0        0 eth010.200.192.0    0.0.0.0         255.255.240.0   U     0      0        0 mpgre0169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0172.24.0.0      172.31.223.225  255.255.192.0   UG    0      0        0 eth0172.31.208.0    0.0.0.0         255.255.240.0   U     0      0        0 eth0[root@Lgr ~]# route add -net 172.24.0.0 netmask 255.255.192.0 dev eth0[root@Lgr ~]# route -nKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface0.0.0.0         172.31.223.253  0.0.0.0         UG    0      0        0 eth010.200.192.0    0.0.0.0         255.255.240.0   U     0      0        0 mpgre0169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0172.24.0.0      0.0.0.0         255.255.192.0   U     0      0        0 eth0172.31.208.0    0.0.0.0         255.255.240.0   U     0      0        0 eth0[root@Lgr ~]# ping 172.24.40.83PING 172.24.40.83 (172.24.40.83) 56(84) bytes of data.From 172.31.220.39 icmp_seq=1 Destination Host UnreachableFrom 172.31.220.39 icmp_seq=2 Destination Host UnreachableFrom 172.31.220.39 icmp_seq=3 Destination Host UnreachableFrom 172.31.220.39 icmp_seq=4 Destination Host Unreachable^C--- 172.24.40.83 ping statistics ---5 packets transmitted, 0 received, +4 errors, 100% packet loss, time 4000mspipe 4[root@Lgr ~]# # 可能是哪里配错了  主机号 60.205.176.110[root@Cc ~]# curl ip.sb60.205.176.110[root@Cc ~]# ifconfig eth0eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.24.40.83  netmask 255.255.192.0  broadcast 172.24.63.255        ether 00:16:3e:0c:d1:d9  txqueuelen 1000  (Ethernet)        RX packets 158625  bytes 26310297 (25.0 MiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 161713  bytes 44000608 (41.9 MiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0[root@Cc ~]# route -nKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface0.0.0.0         172.24.63.253   0.0.0.0         UG    0      0        0 eth0169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0172.24.0.0      0.0.0.0         255.255.192.0   U     0      0        0 eth0172.24.0.0      0.0.0.0         255.255.192.0   U     0      0        0 docker0[root@Cc ~]# route add -net 172.31.208.0  netmask 255.255.240.0 gw 172.24.63.225[root@Cc ~]# route -nKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface0.0.0.0         172.24.63.253   0.0.0.0         UG    0      0        0 eth0169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0172.24.0.0      0.0.0.0         255.255.192.0   U     0      0        0 docker0172.24.0.0      0.0.0.0         255.255.192.0   U     0      0        0 eth0172.31.208.0    172.24.63.225   255.255.240.0   UG    0      0        0 docker0[root@Cc ~]# route add -net 172.31.208.0  netmask 255.255.240.0 dev eth0[root@Cc ~]# route -nKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface0.0.0.0         172.24.63.253   0.0.0.0         UG    0      0        0 eth0169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0172.24.0.0      0.0.0.0         255.255.192.0   U     0      0        0 docker0172.24.0.0      0.0.0.0         255.255.192.0   U     0      0        0 eth0172.31.208.0    0.0.0.0         255.255.240.0   U     0      0        0 eth0[root@Cc ~]# ping 172.31.220.39PING 172.31.220.39 (172.31.220.39) 56(84) bytes of data.From 172.24.40.83 icmp_seq=1 Destination Host UnreachableFrom 172.24.40.83 icmp_seq=2 Destination Host UnreachableFrom 172.24.40.83 icmp_seq=3 Destination Host UnreachableFrom 172.24.40.83 icmp_seq=4 Destination Host Unreachable^C--- 172.31.220.39 ping statistics ---5 packets transmitted, 0 received, +4 errors, 100% packet loss, time 4000mspipe 4[root@Cc ~]# # 可能是哪里配错了  两台服务器内网互通  两台服务器还是没有互通，可能要去响应云厂商，控制台添加，重启网卡服务service network restarty 还是没有删除路由  注： 删除时不需要网关[root@Cc ~]# route -nKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface0.0.0.0         172.24.63.253   0.0.0.0         UG    0      0        0 eth0169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0172.24.0.0      0.0.0.0         255.255.192.0   U     0      0        0 eth0172.24.0.0      0.0.0.0         255.255.192.0   U     0      0        0 docker0172.31.208.0    172.24.40.83    255.255.240.0   UG    0      0        0 eth0[root@Cc ~]# route del -net 172.31.208.0 netmask 255.255.240.0[root@Cc ~]# route -nKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface0.0.0.0         172.24.63.253   0.0.0.0         UG    0      0        0 eth0169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0172.24.0.0      0.0.0.0         255.255.192.0   U     0      0        0 eth0172.24.0.0      0.0.0.0         255.255.192.0   U     0      0        0 docker0[root@Cc ~]# [root@Lgr ~]# route del -net 172.24.0.0 netmask 255.255.192.0屏蔽路由[root@Lgr ~]# route add -net 10.10.10.128 netmask 255.255.255.128 reject添加默认网关[root@Cc ~]#  route del default gw 192.168.40.2添加某个ip路由[root@Cc ~]# route add -host 192.168.40.1dev eth0复制文件至其他系统【scp】[root@Cc ~]# scpusage: scp [-12346BCpqrv] [-c cipher] [-F ssh_config] [-i identity_file]           [-l limit] [-o ssh_option] [-P port] [-S program]           [[user@]host1:]file1 ... [[user@]host2:]file2[root@Cc ~]# 示例  Cc主机[root@Cc 10]# curl ip.sb;pwd60.205.176.110/root/RedHad/10[root@Cc 10]#   Lgr主机[root@Lgr 10]# curl ip.sb;pwd115.28.138.45/root/RedHad/10[root@Lgr 10]#   在Cc主机创建和文件夹和查看Lgr主机状态[root@Cc 10]# curl ip.sb;pwd;tree60.205.176.110/root/RedHad/10.├── scp│   └── scpInTst.txt└── scp.txt1 directory, 2 files[root@Cc 10]# [root@Lgr 10]# curl ip.sb;pwd;tree115.28.138.45/root/RedHad/10-bash: tree: command not found[root@Lgr 10]#   Cc复制到Lgr【文件】[root@Cc 10]# rm -r /root/.ssh/known_hosts rm: remove regular file ‘/root/.ssh/known_hosts’? y[root@Cc 10]# scp scp.txt root@115.28.138.45:/root/RedHad/10The authenticity of host '115.28.138.45 (115.28.138.45)' can't be established.ECDSA key fingerprint is SHA256:3yMka431yjt0thBqIeSCWPCfsy46wknMMJrO8QQe4cw.ECDSA key fingerprint is MD5:30:23:91:24:0a:ca:b3:3c:d8:ec:a0:fe:cd:b5:43:0d.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '115.28.138.45' (ECDSA) to the list of known hosts.root@115.28.138.45's password: scp.txt                                                    100%    0     0.0KB/s   00:00    [root@Cc 10]# [root@Lgr 10]# lltotal 0-rw-r--r-- 1 root root 0 Mar 29 13:46 scp.txt[root@Lgr 10]#   其他的就不操作了，看下面叫要说明scp root@107.172.27.254:/home/test.txt .   //下载文件scp test.txt root@107.172.27.254:/home  //上传文件scp -r root@107.172.27.254:/home/test .  //下载目录scp -r test root@107.172.27.254:/home   //上传目录scp -P 9922 -r root@47.244.225.92:/home // 指定端口复制文件至其他系统【rsync】  rsync  是Linux  系统下常用的数据镜像备份工具，不同主机之间同步文件，除了文件意外，还可以镜像保存整个目录树和文件系统，可以增量同步，并保持文件原来属性（权限、时间戳……）,而且传输过程中是加密，保证了数据安全性  helpUsage: rsync [OPTION]... SRC [SRC]... DEST  or   rsync [OPTION]... SRC [SRC]... [USER@]HOST:DEST  or   rsync [OPTION]... SRC [SRC]... [USER@]HOST::DEST  or   rsync [OPTION]... SRC [SRC]... rsync://[USER@]HOST[:PORT]/DEST  or   rsync [OPTION]... [USER@]HOST:SRC [DEST]  or   rsync [OPTION]... [USER@]HOST::SRC [DEST]  or   rsync [OPTION]... rsync://[USER@]HOST[:PORT]/SRC [DEST]  rsync 后续添加显示网络连接、路由表或接口 【netstart】  显示tpc  显示udp  显示核心路由  显示网络接口列表  常用显示[root@Cc ~]# netstat -atActive Internet connections (servers and established)Proto Recv-Q Send-Q Local Address           Foreign Address         State      tcp        0      0 0.0.0.0:https           0.0.0.0:*               LISTEN     tcp        0      0 0.0.0.0:aequus          0.0.0.0:*               LISTEN     tcp        0      0 localhost:32000         0.0.0.0:*               LISTEN     tcp        0      0 0.0.0.0:8836            0.0.0.0:*               LISTEN     tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN     tcp        0      0 0.0.0.0:http            0.0.0.0:*               LISTEN     tcp        0      0 0.0.0.0:ssh             0.0.0.0:*               LISTEN     tcp        0      0 Cc:53354                100.100.30.26:http      ESTABLISHEDtcp        0      0 Cc:ssh                  113.118.200.16:7069     ESTABLISHEDtcp        0      0 localhost:31000         localhost:32000         ESTABLISHEDtcp        0      0 localhost:32000         localhost:31000         ESTABLISHEDtcp6       0      0 [::]:filenet-tms        [::]:*                  LISTEN     tcp6       0      0 [::]:cslistener         [::]:*                  LISTEN     tcp6       0      0 [::]:mysql              [::]:*                  LISTEN     tcp6       0      0 [::]:8180               [::]:*                  LISTEN     [root@Cc ~]# netstat -auActive Internet connections (servers and established)Proto Recv-Q Send-Q Local Address           Foreign Address         State      udp        0      0 0.0.0.0:bootpc          0.0.0.0:*                          udp        0      0 Cc:ntp                  0.0.0.0:*                          udp        0      0 Cc:ntp                  0.0.0.0:*                          udp        0      0 localhost:ntp           0.0.0.0:*                          udp        0      0 0.0.0.0:ntp             0.0.0.0:*                          udp6       0      0 [::]:ntp                [::]:*                             [root@Cc ~]# netstat -rKernel IP routing tableDestination     Gateway         Genmask         Flags   MSS Window  irtt Ifacedefault         gateway         0.0.0.0         UG        0 0          0 eth010.0.0.0        0.0.0.0         255.255.255.0   U         0 0          0 eth0link-local      0.0.0.0         255.255.0.0     U         0 0          0 eth0172.24.0.0      0.0.0.0         255.255.192.0   U         0 0          0 docker0172.24.0.0      0.0.0.0         255.255.192.0   U         0 0          0 eth0172.31.208.0    0.0.0.0         255.255.240.0   U         0 0          0 eth0[root@Cc ~]# netstat -iKernel Interface tableIface             MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flgdocker0          1500       34      0      0 0            30      0      0      0 BMRUeth0             1500   660702      0      0 0        790356      0      0      0 BMRUlo              65536    50832      0      0 0         50832      0      0      0 LRUvethbb7d0dd      1500        8      0      0 0            23      0      0      0 BMRUvethf4f0960      1500       26      0      0 0            38      0      0      0 BMRU[root@Cc ~]# netstat -ntlpActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    tcp        0      0 0.0.0.0:443             0.0.0.0:*               LISTEN      923/nginx: master p tcp        0      0 0.0.0.0:23456           0.0.0.0:*               LISTEN      1425/sshd           tcp        0      0 127.0.0.1:32000         0.0.0.0:*               LISTEN      1199/java           tcp        0      0 0.0.0.0:8836            0.0.0.0:*               LISTEN      923/nginx: master p tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      824/redis-server 0. tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      923/nginx: master p tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1425/sshd           tcp6       0      0 :::32768                :::*                    LISTEN      1731/docker-proxy-c tcp6       0      0 :::9000                 :::*                    LISTEN      1746/docker-proxy-c tcp6       0      0 :::3306                 :::*                    LISTEN      1508/mysqld         tcp6       0      0 :::8180                 :::*                    LISTEN      3090/./server       [root@Cc ~]# 探测至目的地址的路由信息【traceroute】  显示本机到 baidu.com 所经过的路由[root@Cc ~]# traceroute -n baidu.comtraceroute to baidu.com (220.181.38.148), 30 hops max, 60 byte packets 1  * * * 2  * * * 3  11.220.31.154  1.371 ms 11.220.30.130  0.920 ms 11.220.30.138  3.912 ms 4  11.218.196.254  1.254 ms 11.204.180.122  1.597 ms 11.218.196.254  1.435 ms 5  116.251.117.10  1.938 ms 42.120.243.82  1.842 ms 116.251.117.2  2.458 ms 6  116.251.112.153  1.454 ms 116.251.94.17  2.001 ms 116.251.112.205  13.491 ms 7  36.110.169.221  2.931 ms 36.110.169.101  3.467 ms 106.38.196.253  3.093 ms 8  * 36.110.244.57  3.801 ms 36.110.244.49  3.765 ms 9  220.181.182.178  3.718 ms * *10  220.181.17.90  3.963 ms  4.313 ms 220.181.182.170  3.559 ms11  * * *14  * * *………………………………29  * * *30  * * *[root@Cc ~]#   域名不可达，最大30跳测试登录、控制远程【telnet】  找不到命令 ,可以连接互联网情况下使用yum install telnet安装  成功[root@Cc ~]# telnet 115.28.138.41 22Trying 115.28.138.41...Connected to 115.28.138.41.Escape character is '^]'.SSH-2.0-OpenSSH_7.4test sshdProtocol mismatch.Connection closed by foreign host.[root@Cc ~]# telnet baidu.com 80Trying 39.156.69.79...\\Connected to baidu.com.Escape character is '^]'.Connection closed by foreign host.[root@Cc ~]#   失败[root@Cc ~]# telnet 192.168.1.12 22Trying 192.168.1.12...下载网络文件【wget】  下载文件wget [地址]  断点续传wget -c   批量下载下载文件中 一些列网址 wget -i download.txt[root@Cc ~]# wget --help;GNU Wget 1.14，非交互式的网络文件下载工具。用法： wget [选项]... [URL]...长选项所必须的参数在使用短选项时也是必须的。启动：  -V,  --version           显示 Wget 的版本信息并退出。  -h,  --help              打印此帮助。  -b,  --background        启动后转入后台。  -e,  --execute=COMMAND   运行一个“.wgetrc”风格的命令。日志和输入文件：  -o,  --output-file=FILE    将日志信息写入 FILE。  -a,  --append-output=FILE  将信息添加至 FILE。  -d,  --debug               打印大量调试信息。  -q,  --quiet               安静模式 (无信息输出)。  -v,  --verbose             详尽的输出 (此为默认值)。  -nv, --no-verbose          关闭详尽输出，但不进入安静模式。       --report-speed=TYPE   Output bandwidth as TYPE.  TYPE can be bits.  -i,  --input-file=FILE     下载本地或外部 FILE 中的 URLs。  -F,  --force-html          把输入文件当成 HTML 文件。  -B,  --base=URL            解析与 URL 相关的                             HTML 输入文件 (由 -i -F 选项指定)。       --config=FILE         Specify config file to use.下载：  -t,  --tries=NUMBER            设置重试次数为 NUMBER (0 代表无限制)。       --retry-connrefused       即使拒绝连接也是重试。  -O,  --output-document=FILE    将文档写入 FILE。  -nc, --no-clobber              skip downloads that would download to                                 existing files (overwriting them).  -c,  --continue                断点续传下载文件。       --progress=TYPE           选择进度条类型。  -N,  --timestamping            只获取比本地文件新的文件。  --no-use-server-timestamps     不用服务器上的时间戳来设置本地文件。  -S,  --server-response         打印服务器响应。       --spider                  不下载任何文件。  -T,  --timeout=SECONDS         将所有超时设为 SECONDS 秒。       --dns-timeout=SECS        设置 DNS 查寻超时为 SECS 秒。       --connect-timeout=SECS    设置连接超时为 SECS 秒。       --read-timeout=SECS       设置读取超时为 SECS 秒。  -w,  --wait=SECONDS            等待间隔为 SECONDS 秒。       --waitretry=SECONDS       在获取文件的重试期间等待 1..SECONDS 秒。       --random-wait             获取多个文件时，每次随机等待间隔                                 0.5*WAIT...1.5*WAIT 秒。       --no-proxy                禁止使用代理。  -Q,  --quota=NUMBER            设置获取配额为 NUMBER 字节。       --bind-address=ADDRESS    绑定至本地主机上的 ADDRESS (主机名或是 IP)。       --limit-rate=RATE         限制下载速率为 RATE。       --no-dns-cache            关闭 DNS 查寻缓存。       --restrict-file-names=OS  限定文件名中的字符为 OS 允许的字符。       --ignore-case             匹配文件/目录时忽略大小写。  -4,  --inet4-only              仅连接至 IPv4 地址。  -6,  --inet6-only              仅连接至 IPv6 地址。       --prefer-family=FAMILY    首先连接至指定协议的地址                                 FAMILY 为 IPv6，IPv4 或是 none。       --user=USER               将 ftp 和 http 的用户名均设置为 USER。       --password=PASS           将 ftp 和 http 的密码均设置为 PASS。       --ask-password            提示输入密码。       --no-iri                  关闭 IRI 支持。       --local-encoding=ENC      IRI (国际化资源标识符) 使用 ENC 作为本地编码。       --remote-encoding=ENC     使用 ENC 作为默认远程编码。       --unlink                  remove file before clobber.目录：  -nd, --no-directories           不创建目录。  -x,  --force-directories        强制创建目录。  -nH, --no-host-directories      不要创建主目录。       --protocol-directories     在目录中使用协议名称。  -P,  --directory-prefix=PREFIX  以 PREFIX/... 保存文件       --cut-dirs=NUMBER          忽略远程目录中 NUMBER 个目录层。HTTP 选项：       --http-user=USER        设置 http 用户名为 USER。       --http-password=PASS    设置 http 密码为 PASS。       --no-cache              不在服务器上缓存数据。       --default-page=NAME     改变默认页                               (默认页通常是“index.html”)。  -E,  --adjust-extension      以合适的扩展名保存 HTML/CSS 文档。       --ignore-length         忽略头部的‘Content-Length’区域。       --header=STRING         在头部插入 STRING。       --max-redirect          每页所允许的最大重定向。       --proxy-user=USER       使用 USER 作为代理用户名。       --proxy-password=PASS   使用 PASS 作为代理密码。       --referer=URL           在 HTTP 请求头包含‘Referer: URL’。       --save-headers          将 HTTP 头保存至文件。  -U,  --user-agent=AGENT      标识为 AGENT 而不是 Wget/VERSION。       --no-http-keep-alive    禁用 HTTP keep-alive (永久连接)。       --no-cookies            不使用 cookies。       --load-cookies=FILE     会话开始前从 FILE 中载入 cookies。       --save-cookies=FILE     会话结束后保存 cookies 至 FILE。       --keep-session-cookies  载入并保存会话 (非永久) cookies。       --post-data=STRING      使用 POST 方式；把 STRING 作为数据发送。       --post-file=FILE        使用 POST 方式；发送 FILE 内容。       --content-disposition   当选中本地文件名时                               允许 Content-Disposition 头部 (尚在实验)。       --content-on-error      output the received content on server errors.       --auth-no-challenge     发送不含服务器询问的首次等待                               的基本 HTTP 验证信息。HTTPS (SSL/TLS) 选项：       --secure-protocol=PR     choose secure protocol, one of auto, SSLv2,                                SSLv3, TLSv1, TLSv1_1 and TLSv1_2.       --no-check-certificate   不要验证服务器的证书。       --certificate=FILE       客户端证书文件。       --certificate-type=TYPE  客户端证书类型，PEM 或 DER。       --private-key=FILE       私钥文件。       --private-key-type=TYPE  私钥文件类型，PEM 或 DER。       --ca-certificate=FILE    带有一组 CA 认证的文件。       --ca-directory=DIR       保存 CA 认证的哈希列表的目录。       --random-file=FILE       带有生成 SSL PRNG 的随机数据的文件。       --egd-file=FILE          用于命名带有随机数据的 EGD 套接字的文件。FTP 选项：       --ftp-user=USER         设置 ftp 用户名为 USER。       --ftp-password=PASS     设置 ftp 密码为 PASS。       --no-remove-listing     不要删除‘.listing’文件。       --no-glob               不在 FTP 文件名中使用通配符展开。       --no-passive-ftp        禁用“passive”传输模式。       --preserve-permissions  保留远程文件的权限。       --retr-symlinks         递归目录时，获取链接的文件 (而非目录)。WARC options:       --warc-file=FILENAME      save request/response data to a .warc.gz file.       --warc-header=STRING      insert STRING into the warcinfo record.       --warc-max-size=NUMBER    set maximum size of WARC files to NUMBER.       --warc-cdx                write CDX index files.       --warc-dedup=FILENAME     do not store records listed in this CDX file.       --no-warc-compression     do not compress WARC files with GZIP.       --no-warc-digests         do not calculate SHA1 digests.       --no-warc-keep-log        do not store the log file in a WARC record.       --warc-tempdir=DIRECTORY  location for temporary files created by the                                 WARC writer.递归下载：  -r,  --recursive          指定递归下载。  -l,  --level=NUMBER       最大递归深度 (inf 或 0 代表无限制，即全部下载)。       --delete-after       下载完成后删除本地文件。  -k,  --convert-links      让下载得到的 HTML 或 CSS 中的链接指向本地文件。  --backups=N   before writing file X, rotate up to N backup files.  -K,  --backup-converted   在转换文件 X 前先将它备份为 X.orig。  -m,  --mirror             -N -r -l inf --no-remove-listing 的缩写形式。  -p,  --page-requisites    下载所有用于显示 HTML 页面的图片之类的元素。       --strict-comments    用严格方式 (SGML) 处理 HTML 注释。递归接受/拒绝：  -A,  --accept=LIST               逗号分隔的可接受的扩展名列表。  -R,  --reject=LIST               逗号分隔的要拒绝的扩展名列表。       --accept-regex=REGEX        regex matching accepted URLs.       --reject-regex=REGEX        regex matching rejected URLs.       --regex-type=TYPE           regex type (posix|pcre).  -D,  --domains=LIST              逗号分隔的可接受的域列表。       --exclude-domains=LIST      逗号分隔的要拒绝的域列表。       --follow-ftp                跟踪 HTML 文档中的 FTP 链接。       --follow-tags=LIST          逗号分隔的跟踪的 HTML 标识列表。       --ignore-tags=LIST          逗号分隔的忽略的 HTML 标识列表。  -H,  --span-hosts                递归时转向外部主机。  -L,  --relative                  只跟踪有关系的链接。  -I,  --include-directories=LIST  允许目录的列表。  --trust-server-names             use the name specified by the redirection                                   url last component.  -X,  --exclude-directories=LIST  排除目录的列表。  -np, --no-parent                 不追溯至父目录。请将错误报告或建议寄给 &lt;bug-wget@gnu.org&gt;。[root@Cc ~]# 网络配置查看某网卡配置[root@Cc ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0 DEVICE=eth0BOOTPROTO=dhcpONBOOT=yes[root@Cc ~]# 设置主机名  设置主机名之后需要重新的启动，我这里是切换用户登录，查看效果[root@Cc ~]# hostname Hyper[root@Cc ~]# su testUser[testUser@Hyper root]$ su root密码：[root@Hyper ~]# 设置默认网关  方法一  [root@Hyper ~]# route add default wg 172.24.63.255  如果是虚拟机就可以试试设置网关，在这网络配置还是要小心为妙，我这里就没有执行这一行  方法二[root@Hyper ~]# cat /etc/sysconfig/network# Created by anacondaNETWORKING_IPV6=noPEERNTP=noGATEWAY=172.24.63.255[root@Hyper ~]#   重新启动网卡    [root@Hyper ~]# /etc/rc.d/init.d/network restartRestarting network (via systemctl):                        [  确定  ][root@Hyper ~]#       设置DNS服务[root@Hyper ~]# cat /etc/resolv.conf options timeout:2 attempts:3 rotate single-request-reopen; generated by /usr/sbin/dhclient-scriptnameserver 100.100.2.136nameserver 100.100.2.138[root@Hyper ~]# 动态主机配置协议DHCP  好多概念知识，会拿出时间来讲解这张预留的空白Linux 域名服务DNS  好多概念知识，会拿出时间来讲解这张预留的空白配置精确时间协议  好多概念知识，会拿出时间来讲解这张预留的空白监控网卡流量#预留"
  },
  
  {
    "title": "1 3 （基础知识）",
    "url": "/blog.github.io/posts/1-3-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
    "categories": "",
    "tags": "",
    "date": "2015-10-12 00:00:00 +0800",
    





    "snippet": "+++title = “linux(CentOS7)基础知识”date = “2020-03-23T22:17:54+08:00”draft= falsetags = [ “RedHad” ]categories = [ “SystemUtils” ]description = “linux 基础知识、认识、远程控制 “ project_url = “”+++linux 基础知识linux 历史发布启动选择Red Hat 安装安装之后远程登入  查看是否启动    [root@Cc ~]# ps -ef |grep sshdroot      1377     1  0 Mar20 ?        00:00:00 /usr/sbin/sshd -Droot     21020  1377  0 20:49 ?        00:00:00 sshd: root@pts/1root     21310 21022  0 21:02 pts/1    00:00:00 grep --color=auto sshd        查看sshd 端口多少    [root@Cc ~]# netstat -ntlp |grep sshdtcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1377/sshd            ssh 远程登入          服务终端命令登陆          [root@Lgr ~]# ssh root@lichaocheng.top  root@lichaocheng.top's password:   Last login: Mon Mar 23 21:04:51 2020 from 58.60.57.2          Welcome to Alibaba Cloud Elastic Compute Service !  [root@Cc ~]#                     可以使用工具                  xshell          FinalShell            linux 图像界面                              "
  }
  
]

